<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Adapter</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Adapter.Application">
            <summary>
            Represent a base application in WaveEngine, you need inherit of it for a new WaveEngine application.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.windowedWidth">
            <summary>
            Windowed width.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.windowedHeight">
            <summary>
            Windowed height.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.renderForm">
            <summary>
            Render form.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Application.windowsTitle">
            <summary>
            The windows title
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>
            The graphics device.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Application.Form">
            <summary>
            Gets the windows form .
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.WindowTitle">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Application.FullScreen">
            <summary>
            Gets or sets a value indicating whether the window is in full screen.
            </summary>
            <value>
              <c>true</c> if in full screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Application"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.RenderForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Handles the FormClosing event of the renderForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The System.Windows.Forms.FormClosingEventArgs instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.ResizeScreen(System.Int32,System.Int32)">
            <summary>
            Resize application windows to the specefied size
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Run">
            <summary>
            Call this method to initialize the game, begin running the game loop, and start processing events for the game. 
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnFormGotFocus(System.Object,System.EventArgs)">
            <summary>
            App form got focus
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnFormLostFocus(System.Object,System.EventArgs)">
            <summary>
            App form lost focus
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnFormSizeChanged(System.Object,System.EventArgs)">
            <summary>
            App form size changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnActivated">
            <summary>
            Called when the application has been activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.OnDeactivate">
            <summary>
            Called when the application has been deactivated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Exit">
            <summary>
            Exits this instance. 
            </summary>
            <remarks>This function is not intended to be called directly from your code. Use WaveServices.Platform.Exit instead.</remarks>
        </member>
        <member name="M:WaveEngine.Adapter.Application.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.BaseApplication">
            <summary>
            Common methods of Applications
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.device">
            <summary>
            Direct3D device.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.dxgiDeviceManager">
            <summary>
            The DXGI device manager
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.context">
            <summary>
            Direct3D context.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.swapChain">
            <summary>
            Swap chain for drawing.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.factory">
            <summary>
            DXGI factory.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.backBuffer">
            <summary>
            Texture holding the backbuffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.renderView">
            <summary>
            View for the render target.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.userResized">
            <summary>
            Holds if the user resized the window.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.isInitialize">
            <summary>
            Holds if the application is initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.initialIsFullScreen">
            <summary>
            The initial is full screen
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.desc">
            <summary>
            Swap chain description.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.stopwatch">
            <summary>
            Stopwatch for timestep.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.BaseApplication.adapter">
            <summary>
            Windows Adapter instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.Adapter">
            <summary>
            Gets the parent adapter needed to initialize the application.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.WindowTitle">
            <summary>
            Gets or sets the title of the application window, when available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.FullScreen">
            <summary>
            Gets or sets a value indicating whether the window is in full screen.
            </summary>
            <value>
              <c>true</c> if in full screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.HasVideoSupport">
            <summary>
            Gets or sets a value indicating whether the video need to be supported
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.IsFixedTimeStep">
            <summary>
            Gets or sets a value indicating whether this instance is fixed time step.
            </summary>
            <value>
            <c>true</c> if this instance is fixed time step; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.Width">
            <summary>
            Gets or sets the preferred back-buffer width.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.BaseApplication.Height">
            <summary>
            Gets or sets the preferred back-buffer height.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.BaseApplication" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Configure(System.IntPtr)">
            <summary>
            Configures the specified windows handler.
            </summary>
            <param name="windowsHandler">The windows handler.</param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.BaseRender">
            <summary>
            Base renderer of this application
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Render">
            <summary>
            Renders this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.CreateSwapChain(System.IntPtr)">
            <summary>
            Create the app swapchain
            </summary>
            <param name="windowsHandler">The windows handler.</param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.ResizeBuffers">
            <summary>
            Resizes the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.CreateDepthBuffer">
            <summary>
            Creates the depth buffer
            </summary>
            <returns>The default depth texture</returns>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.BaseInitialize">
            <summary>
            Base initialization method
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.RefreshFullScreen">
            <summary>
            Try to refresh the full screen
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.ResizeScreen(System.Int32,System.Int32)">
            <summary>
            Resizes the screen.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>        
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.OnActivated">
            <summary>
            Called when the application has been activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.OnDeactivate">
            <summary>
            Called when the application has been deactivated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Initialize">
            <summary>
            Perform further custom initialize for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Update(System.TimeSpan)">
            <summary>
            Called when updating the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last update.</param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Draw(System.TimeSpan)">
            <summary>
            Called when drawing the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last draw.</param>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Exit">
            <summary>
            Exits this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.BaseApplication.NotifySizeChangedToAdapter(System.Int32,System.Int32)">
            <summary>
            Notify to the adapter that the screen size is changed
            </summary>
            <param name="width">The new width</param>
            <param name="height">The new height</param>
        </member>
        <member name="T:WaveEngine.Adapter.Basics.SimpleApp">
            <summary>
            Create a simple 3D application.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Basics.SimpleApp.game">
            <summary>
            Game instance.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Basics.SimpleApp.Started">
            <summary>
            Occurs when this application has started.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Basics.SimpleApp.firstFrame">
            <summary>
            First frame.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.RunAsync(WaveEngine.Common.IGame,System.Int32,System.Int32)">
            <summary>
            Create a a simple application.
            </summary>
            <param name="game">The a new game instance.</param>
            <param name="width">The screen's width.</param>
            <param name="height">The screen's height.</param>
            <returns>The application instance.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.#ctor(WaveEngine.Common.IGame,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Basics.SimpleApp"/> class.
            </summary>
            <param name="game">The a new game instance.</param>
            <param name="width">The screen's width.</param>
            <param name="height">The screen's height.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.Initialize">
            <summary>
            Initialize all paramenters to launch the new application.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.Run">
            <summary>
            Call this method to initialize the game, begin running the game loop, and start processing events for the game. 
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.Update(System.TimeSpan)">
            <summary>
            Update the current scene.
            </summary>
            <param name="elapsedTime">Elapsed time.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.Draw(System.TimeSpan)">
            <summary>
            Draw the current frame.
            </summary>
            <param name="elapsedTime">Elapsed time.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.OnActivated">
            <summary>
            Occurs when the aplication is activate.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Basics.SimpleApp.OnDeactivate">
            <summary>
            Occurs when the application is deactivate.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.FormApplication">
            <summary>
            Application for Windows Form Solutions
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.FormApplication.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.FormApplication" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Guide.Guide">
            <summary>
            Provides access to guide services.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Guide.IsTrialMode">
            <summary>
            Gets a value indicating whether this instance is trial mode.
            </summary>
            <value>
                <c>true</c> if this instance is trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Guide.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Guide.Guide.SimulateTrialMode">
            <summary>
            Gets or sets a value indicating whether [simulate trial mode].
            </summary>
            <value>
              <c>true</c> if [simulate trial mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowWebBrowser(System.Uri)">
            <summary>
            Shows the web browser.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the show keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.EndShowKeyboardInput(System.IAsyncResult)">
            <summary>
            Ends the show keyboard input.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Resulting text.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.BeginShowMessageBox(System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the show message box.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="callback">The callback.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.EndShowMessageBox(System.IAsyncResult)">
            <summary>
            Ends the show message box.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Result of the message box.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowMessageBoxAsync(System.String,System.String)">
            <summary>
            Show an OK/Cancel message box asyncronously 
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <returns>The index of the option selected</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Guide.Guide.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
            <summary>
            Show a text dialog box asynchronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <param name="defaultText">The default text in the text box</param>
            <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="T:WaveEngine.Adapter.Input.AccelerometerListener">
            <summary>
            Acceleromter for Windows
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.AccelerometerListener.state">
            <summary>
            The started
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.AccelerometerListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>
            The state of the accelerometer
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.AccelerometerListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.CompassListener">
            <summary>
            Compass Listener class
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.CompassListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.CompassListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.CompassListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.MotionSensorListener">
            <summary>
            Motion Listener class
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.MotionSensorListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.MotionSensorListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.MotionSensorListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.GyroscopeListener">
            <summary>
            Gyroscope Listener class
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.GyroscopeListener.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.GyroscopeListener"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.GyroscopeListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.ListenerFactoryWindows">
            <summary>
            Sensor Factory for Windows
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.ListenerFactoryWindows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.ListenerFactoryWindows"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Input.InputManager">
            <summary>
            Manages input devices.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.ThumbMaxValue">
            <summary>
            The thumb max value
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.directInput">
            <summary>
            DirectInput instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.mouse">
            <summary>
            Mouse object.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.mouseX">
            <summary>
            Mouse X coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.mouseY">
            <summary>
            Mouse Y coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.mouseWheel">
            <summary>
            The mouse wheel
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.keyboard">
            <summary>
            Keyboard object.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.isActive">
            <summary>
            The input manager is active
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.keyboardState">
            <summary>
            The keyboard state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.mouseState">
            <summary>
            The mouse state
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.gamePadState">
            <summary>
            The game pad state (4 XBOX GamePad)
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.controllers">
            <summary>
            The controllers
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Input.InputManager.gyroscopeState">
            <summary>
            The gyroscope state
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnOrientationChanged">
            <summary>
            Occurs when [on orientation changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnCompassChanged">
            <summary>
            Occurs when [on compass state changed]
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Input.InputManager.OnInputChanged">
            <summary>
            Occur when a nen device is detected.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Input.InputManager" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.KeyboardGetState">
            <summary>
            Keyboards the state of the get.
            </summary>
            <returns>
            Keyboard state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.MouseGetState">
            <summary>
            Mouses the state of the get.
            </summary>
            <returns>
            Mouse state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Games the state of the pad get.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>
            Game pad state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.TouchPanelGetState">
            <summary>
            Touches the state of the panel get.
            </summary>
            <returns>
            Touch panel state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.CompassGetState">
            <summary>
            Compasss the state of the get
            </summary>
            <returns>
            Compass state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.DisplayOrientationGetState">
            <summary>
            Displays the state of the orientation get.
            </summary>
            <returns>
            Display orientation state.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GyroscopeExist">
            <summary>
            Check if Gyroscope sensor is available
            </summary>
            <returns>True if gyrsocope sensor available, false in other case</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.StartGyroscope">
            <summary>
            Starts Gyroscope readings.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.StopGyroscope">
            <summary>
            Stops the gyroscope.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GyroscopeGetState">
            <summary>
            Gets the state of the Gyrsocope
            </summary>
            <returns>
            Gyroscope State
            </returns>        
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.AccelerometerExist">
            <summary>
            Accelerometers the exist.
            </summary>
            <returns>
            True if accelerometer sensor available, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.StartAccelerometer">
            <summary>
            Starts the accelerometer.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.StopAccelerometer">
            <summary>
            Stops the accelerometer.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Activate">
            <summary>
            Activate input manager
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Deactivate">
            <summary>
            Deactivate input manager
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.GetKeyState(SharpDX.DirectInput.Key)">
            <summary>
            Get key state
            </summary>
            <param name="key">The specific key</param>
            <returns>The state of the specific key <see cref="T:WaveEngine.Common.Input.ButtonState"/> </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Form_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseMove event of the Form control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The System.Windows.Forms.MouseEventArgs instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Form_MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseWheel event of the Form control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.ReadKeyboard">
            <summary>
            Reads the keyboard.
            </summary>
            <returns>It was possible to read the keyboard.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.ReadMouse">
            <summary>
            Reads the mouse.
            </summary>
            <returns>It was possible to read the mouse.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Input.InputManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.Adapter.Input.Vibrate">
            <summary>
            Vibrate Class
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Input.Vibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate the device for specified amount of time
            </summary>
            <param name="milliseconds">Time in Milliseconds to vibrate. 500ms is default</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.CameraCapture">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.nativeCameraCapture">
            <summary>
            Native Camera Capture 
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.adapter">
            <summary>
            Windows Adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.currentPath">
            <summary>
            The current recording video path
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.CameraCapture.devices">
            <summary>
            The list of devices
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.PreviewTexture">
            <summary>
            Gets preview texture
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.State">
            <summary>
            Gets camera State
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.CameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether camera is available
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.CameraCapture"/> class.
            </summary>
            <param name="adapter">Windows adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Start capture preview
            </summary>
            <param name="cameraType">camera type</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Stop">
            <summary>
            Stop camera preview
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.StartRecording(System.String)">
            <summary>
            Start record camera to file
            </summary>
            <param name="videoFilePath">path of the file to record</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.StopRecording">
            <summary>
            Stop recording the camera
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Update(System.TimeSpan)">
            <summary>
            Update camera
            </summary>
            <param name="gameTime">Game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.InitializeCapture">
            <summary>
            Initialize Capture resources
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.LoadNativeCapture">
            <summary>
            Load native capture from native Dll
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.SetDevice(System.Int32)">
            <summary>
            Set the device by index
            </summary>
            <param name="index">The device index.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.CreateTexture(System.Int32,System.Int32)">
            <summary>
            Create video texture
            </summary>
            <param name="width">texture with</param>
            <param name="height">texture height</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.CameraCapture.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.LazyCameraCapture">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.mediaSourceGuid">
            <summary>
            Media Source class GUID
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.adapter">
            <summary>
            Wave adapter for Windows platform
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.devices">
            <summary>
            Media Foundation device list
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.presentationDesc">
            <summary>
            Presentation Description
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyCameraCapture.state">
            <summary>
            Gets the camera recording state
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.PreviewTexture">
            <summary>
            Gets a preview texture;
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyCameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether there is a camera available.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.LazyCameraCapture"/> class.
            </summary>
            <param name="adapter">Windows adapter instance</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Start capture preview
            </summary>
            <param name="cameraType">camera type</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.Stop">
            <summary>
            Stop preview
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.StartRecording(System.String)">
            <summary>
            Start recording
            </summary>
            <param name="videoFilePath">video file.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.StopRecording">
            <summary>
            Stop recording
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.Update(System.TimeSpan)">
            <summary>
            Update Camera capture
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.System#IDisposable#Dispose">
            <summary>
            IVideoPlayer Dispose Camera capture
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.ListDevices">
            <summary>
            List MF capture devices
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.GetMediaSource(System.Int32)">
            <summary>
            Get media source
            </summary>
            <param name="index">The device index.</param>
            <returns>The media source</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.SetDeviceFormat(SharpDX.MediaFoundation.MediaSource,System.Int32)">
            <summary>
            Set device format
            </summary>
            <param name="source">The media source</param>
            <param name="formatIndex">The format index</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.EnumerateCaptureFormats(SharpDX.MediaFoundation.MediaSource)">
            <summary>
            Enumerate the capture formats
            </summary>
            <param name="source">The source</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.LogMediaType(SharpDX.MediaFoundation.MediaType)">
            <summary>
            Log media types
            </summary>
            <param name="type">The media type</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyCameraCapture.LogAttributeValueByIndex(SharpDX.MediaFoundation.MediaAttributes,System.Int32)">
            <summary>
            Log attributes by index
            </summary>
            <param name="attributes">The attributes</param>
            <param name="index">The index</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.LazyVideoPlayer">
            <summary>
            Plays video files.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyVideoPlayer.videoPlayer">
            <summary>
            Lazy initialization class of Video player. This class avoid the load of WavEngine.Adapter.Video assembly if videoplayer is not used
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.LazyVideoPlayer.adapter">
            <summary>
            Wave adapter for Windows platform
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.VideoPlayer">
            <summary>
            Gets a value indicationg the internal video player
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.LazyVideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether Video texture is supported on this device
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.LazyVideoPlayer.OnComplete">
            <summary>
            Event fired when the video play os completed
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.LazyVideoPlayer.OnError">
            <summary>
            Event fired when the video play has error
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.LazyVideoPlayer"/> class.
            </summary>
            <param name="adapter">Windows adapter instance</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.LazyVideoPlayer.System#IDisposable#Dispose">
            <summary>
            IVideoPlayer Dispose video player
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.Microphone">
            <summary>
            Manages a microphone device.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Media.Microphone.RecordingState">
            <summary>
            Recording state of the WaveIn
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.RecordingState.Stopped">
            <summary>
            Stopped state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.RecordingState.Recording">
            <summary>
            Recording state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.RecordingState.RequestedStop">
            <summary>
            Request stop state.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Media.Microphone.DataAvailable">
            <summary>
            Event launched when there is data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is currently recording
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone on the device.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.RecordSoundPath">
            <summary>
            Gets the current record file path
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.Microphone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.waveIn">
            <summary>
            WaveIn object
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordingState">
            <summary>
            Recording state.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.writer">
            <summary>
            Wave writer.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordingFormat">
            <summary>
            Recording format.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.soundBase">
            <summary>
            Sound Base
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.Microphone.recordSoundPath">
            <summary>
            Path of recorded sound
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.Microphone"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start">
            <summary>
            Starts the record
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Start(System.String)">
            <summary>
            Starts the record saving into a file.
            </summary>
            <param name="recordSoundPath">Path of the record file.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Stop">
            <summary>
            Stops the record.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.GetRecordedSound">
            <summary>
            Get a soundbase object
            </summary>
            <returns>
            The recorded sound.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.DestroyRecordedSound">
            <summary>
            Delete the recorded sound ( if any )
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.OnRecordingStopped(System.Object,NAudio.Wave.StoppedEventArgs)">
            <summary>
            Called when the device stopped recording.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">StoppedEvent args</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.OnWaveInDataAvailable(System.Object,NAudio.Wave.WaveInEventArgs)">
            <summary>
            Event handler that catch when there is data available from the audio recorder.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Wave in event args.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.Microphone.WriteToFile(System.Byte[],System.Int32)">
            <summary>
            Writes the buffer to the file
            </summary>
            <param name="buffer">byte buffer</param>
            <param name="bytesRecorded">bytes recordd</param>
        </member>
        <member name="T:WaveEngine.Adapter.Media.MusicPlayer">
            <summary>
            Manages music playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.player">
            <summary>
            Windows media player instante.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Media.MusicPlayer.volume">
            <summary>
            Volume of the music.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
            <value>
              <c>true</c> if this instance is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value>
              <c>true</c> if this instance is repeat; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Media.MusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether [music enabled].
            </summary>
            <value>
              <c>true</c> if [music enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Media.MusicPlayer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Play(WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified music.
            </summary>
            <param name="music">The music.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Media.MusicPlayer.PlayerMediaEnded(System.Object,System.EventArgs)">
            <summary>
            Players the media ended.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The System.EventArgs instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Adapter.IO.IOManager">
            <summary>
            Input/Output manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.DefaultLocation">
            <summary>
            The default location
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.location">
            <summary>
            Path of the installation.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.storageFile">
            <summary>
            Storage file instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.IO.IOManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.IO.IOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.IO.IOManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsContentFile(System.String)">
            <summary>
            Contents the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">A search pattern that supports single-character ("?") and multicharacter ("*") wildcards.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">A search pattern that supports single-character ("?") and multicharacter ("*") wildcards.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.IO.IOManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.Adapter.System.Stopwatch">
            <summary>
            Class for representing a stop watch.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.System.Stopwatch.stopwatch">
            <summary>
            Internal Watch object.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.System.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.System.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.Stopwatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.System.System">
            <summary>
            Manages system functionality.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.StartStopwatch">
            <summary>
            Starts the stopwatch.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.BeginTask">
            <summary>
            Begins the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.EndTask">
            <summary>
            Ends the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.System.System.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Adapter">
            <summary>
            Represents a graphics adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.UserAgentCustomInfoEnd">
            <summary>
            End of the user agent string.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.UserAgentCustomInfoOrmma">
            <summary>
            User agent ormma.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.UserAgentCustomInfoOs">
            <summary>
            User agent OS.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.UserAgentCustomInfoStart">
            <summary>
            User agent custom string start.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.UserAgentStart">
            <summary>
            User agent start.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.RuntimeType">
            <summary>
            User agent runtime.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.ClientVersion">
            <summary>
            User agent client version.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.GraphicsDevice">
            <summary>
            Graphics device object.
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.NativeAdVisibilityChanged">
            <summary>
            Occurs when [native ad visibility changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Adapter.Adapter.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Adapter.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceUniqueID">
            <summary>
            Gets the device unique ID.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AppVersion">
            <summary>
            Gets the app version.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.OSVersion">
            <summary>
            Gets the OS version.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DeviceMake">
            <summary>
            Gets the device make.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.LocaleLanguage">
            <summary>
            Gets the locale language.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.IOManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.MusicPlayer">
            <summary>
            Gets the music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.VideoPlayer">
            <summary>
            Gets the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.SoundManager">
            <summary>
            Gets the sound manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Microphone">
            <summary>
            Gets the microphone.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.InputManager">
            <summary>
            Gets the input manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Guide">
            <summary>
            Gets the guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Vibrate">
            <summary>
            Gets the Vibrate.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.InAppPurchase">
            <summary>
            Gets the in app purchases.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.CameraCapture">
            <summary>
            Gets the camera capture object.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.FullScreen">
            <summary>
            Gets or sets a value indicating whether [full screen].
            </summary>
            <value>
              <c>true</c> if [full screen]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AdapterType">
            <summary>
            Gets the type of the adapter.
            </summary>
            <value>
            The type of the adapter.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.SupportedOrientations">
            <summary>
            Gets or sets the supported orientations.
            </summary>
            <value>
            The supported orientations.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.DefaultOrientation">
            <summary>
            Gets or sets the default orientation.
            </summary>
            <value>
            The default orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.AdvertismentVisible">
            <summary>
            Sets a value indicating whether [advertisment visible].
            </summary>
            <value>
              <c>true</c> if [advertisment visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.ListenersFactory">
            <summary>
            Gets the listeners factory.
            </summary>
            <value>
            The listeners factory.
            </value>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.IsRunningOnMono">
            <summary>
            Gets a value indicating whether the application is running using Mono.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Adapter.PlatformFamily">
            <summary>
            Gets the Platform Cpu architecture
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.#ctor(WaveEngine.DirectX.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Adapter"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.SizeChanged(System.Int32,System.Int32)">
            <summary>
            Screen size changed
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.InputManager_OnOrientationChanged(System.Object,WaveEngine.Common.Input.OrientationChangedArgs)">
            <summary>
            Inputs the manager_ on orientation changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.GetDeviceModelAndMake">
            <summary>
            Gets the device model and make.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.GetMachineGuid">
            <summary>
            Gets the machine GUID.
            </summary>
            <returns>Machine GUID.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.GetUserAgentString">
            <summary>
            Gets the user agent string.
            </summary>
            <returns>User agent string of the web browser.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.LostFocus">
            <summary>
            Windows lost focus
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.GotFocus">
            <summary>
            Windows got focus
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Adapter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.RenderLoop">
            <summary>
            RenderLoop provides a rendering loop infrastructure. See remarks for usage. 
            </summary>  
        </member>
        <member name="F:WaveEngine.Adapter.Win32.RenderLoop.controlHandle">
            <summary>
            The control handle
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.RenderLoop.control">
            <summary>
            The control
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.RenderLoop.isControlAlive">
            <summary>
            The is control alive
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.RenderLoop.switchControl">
            <summary>
            The switch control
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Win32.RenderLoop"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.Win32.RenderLoop" /> class.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="P:WaveEngine.Adapter.Win32.RenderLoop.Control">
            <summary>
            Gets or sets the control.
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.Win32.RenderLoop.UseApplicationDoEvents">
            <summary>
            Gets or sets a value indicating whether [use application do events].
            </summary>
            <value>
            <c>true</c> if [use application do events]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.NextFrame">
            <summary>
            Calls this method on each frame.
            </summary>
            <returns><c>true</c> if if the control is still active, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.ControlDisposed(System.Object,System.EventArgs)">
            <summary>
            Controls the disposed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.RenderLoop.RenderCallback">
            <summary>
            Delegate for the rendering loop.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.Run(System.Windows.Forms.ApplicationContext,WaveEngine.Adapter.Win32.RenderLoop.RenderCallback)">
            <summary>
            Runs the specified main loop in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="renderCallback">The render callback.</param>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.RenderLoop.Run(System.Windows.Forms.Control,WaveEngine.Adapter.Win32.RenderLoop.RenderCallback,System.Boolean)">
            <summary>
            Runs the specified form.
            </summary>
            <param name="form">The form.</param>
            <param name="renderCallback">The render callback.</param>
            <param name="useApplicationDoEvents">if set to <c>true</c> [use application do events].</param>
        </member>
        <member name="P:WaveEngine.Adapter.Win32.RenderLoop.IsIdle">
            <summary>
            Gets a value indicating whether this instance is application idle.
            </summary>
            <value>
            <c>true</c> if this instance is application idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.Win32Native">
            <summary>
            Interoperation with Win32 Native
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.Win32Native.LogFont">
            <summary>
            Log Font struct
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfHeight">
            <summary>
            The lf height
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfWidth">
            <summary>
            The lf width
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfEscapement">
            <summary>
            The lf escapement
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfOrientation">
            <summary>
            The lf orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfWeight">
            <summary>
            The lf weight
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfItalic">
            <summary>
            The lf italic
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfUnderline">
            <summary>
            The lf underline
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfStrikeOut">
            <summary>
            The lf strike out
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfCharSet">
            <summary>
            The lf char set
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfOutPrecision">
            <summary>
            The lf out precision
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfClipPrecision">
            <summary>
            The lf clip precision
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfQuality">
            <summary>
            The lf quality
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfPitchAndFamily">
            <summary>
            The lf pitch and family
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.LogFont.LfFaceName">
            <summary>
            The lf face name
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.Win32Native.TextMetric">
            <summary>
            Text Metric struct
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmHeight">
            <summary>
            The tm height
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmAscent">
            <summary>
            The tm ascent
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmDescent">
            <summary>
            The tm descent
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmInternalLeading">
            <summary>
            The tm internal leading
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmExternalLeading">
            <summary>
            The tm external leading
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmAveCharWidth">
            <summary>
            The tm ave char width
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmMaxCharWidth">
            <summary>
            The tm max char width
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmWeight">
            <summary>
            The tm weight
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmOverhang">
            <summary>
            The tm overhang
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmDigitizedAspectX">
            <summary>
            The tm digitized aspect X
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmDigitizedAspectY">
            <summary>
            The tm digitized aspect Y
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmFirstChar">
            <summary>
            The tm first char
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmLastChar">
            <summary>
            The tm last char
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmDefaultChar">
            <summary>
            The tm default char
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmBreakChar">
            <summary>
            The tm break char
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmItalic">
            <summary>
            The tm italic
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmUnderlined">
            <summary>
            The tm underlined
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmStruckOut">
            <summary>
            The tm struck out
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmPitchAndFamily">
            <summary>
            The tm pitch and family
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.TextMetric.TmCharSet">
            <summary>
            The tm char set
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.PeekMessage(SharpDX.Win32.NativeMessage@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Peeks the message.
            </summary>
            <param name="lpMsg">The lp MSG.</param>
            <param name="hWnd">The h WND.</param>
            <param name="wMsgFilterMin">The w MSG filter min.</param>
            <param name="wMsgFilterMax">The w MSG filter max.</param>
            <param name="wRemoveMsg">The w remove MSG.</param>
            <returns>int code</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetMessage(SharpDX.Win32.NativeMessage@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Gets the message.
            </summary>
            <param name="lpMsg">The lp MSG.</param>
            <param name="hWnd">The h WND.</param>
            <param name="wMsgFilterMin">The w MSG filter min.</param>
            <param name="wMsgFilterMax">The w MSG filter max.</param>
            <returns>int code</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.TranslateMessage(SharpDX.Win32.NativeMessage@)">
            <summary>
            Translates the message.
            </summary>
            <param name="lpMsg">The lp MSG.</param>
            <returns>int code</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.DispatchMessage(SharpDX.Win32.NativeMessage@)">
            <summary>
            Dispatches the message.
            </summary>
            <param name="lpMsg">The lp MSG.</param>
            <returns>int code</returns>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.Win32Native.WindowLongType">
            <summary>
            Window Long Types
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.WndProc">
            <summary>
            The WND proc
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.HInstance">
            <summary>
            The H instance
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.HwndParent">
            <summary>
            The HWND parent
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.Style">
            <summary>
            The style
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.ExtendedStyle">
            <summary>
            The extended style
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.UserData">
            <summary>
            The user data
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.Win32.Win32Native.WindowLongType.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="T:WaveEngine.Adapter.Win32.Win32Native.WndProc">
            <summary>
            Delegate WndProc
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="msg">The MSG.</param>
            <param name="wParam">The w param.</param>
            <param name="lParam">The l param.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetWindowLong(System.Runtime.InteropServices.HandleRef,WaveEngine.Adapter.Win32.Win32Native.WindowLongType)">
            <summary>
            Gets the window long.
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="index">The index.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetFocus">
            <summary>
            Gets the focus.
            </summary>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetWindowLong32(System.Runtime.InteropServices.HandleRef,WaveEngine.Adapter.Win32.Win32Native.WindowLongType)">
            <summary>
            Gets the window long32.
            </summary>
            <param name="hwnd">The HWND.</param>
            <param name="index">The index.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetWindowLong64(System.Runtime.InteropServices.HandleRef,WaveEngine.Adapter.Win32.Win32Native.WindowLongType)">
            <summary>
            Gets the window long64.
            </summary>
            <param name="hwnd">The HWND.</param>
            <param name="index">The index.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.SetWindowLong(System.Runtime.InteropServices.HandleRef,WaveEngine.Adapter.Win32.Win32Native.WindowLongType,System.IntPtr)">
            <summary>
            Sets the window long.
            </summary>
            <param name="hwnd">The HWND.</param>
            <param name="index">The index.</param>
            <param name="wndProcPtr">The WND proc PTR.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.SetParent(System.Runtime.InteropServices.HandleRef,System.IntPtr)">
            <summary>
            Sets the parent.
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="hWndParent">The h WND parent.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.SetWindowLong32(System.Runtime.InteropServices.HandleRef,WaveEngine.Adapter.Win32.Win32Native.WindowLongType,System.IntPtr)">
            <summary>
            Sets the window long32.
            </summary>
            <param name="hwnd">The HWND.</param>
            <param name="index">The index.</param>
            <param name="wndProc">The WND proc.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.ShowWindow(System.Runtime.InteropServices.HandleRef,System.Boolean)">
            <summary>
            Shows the window.
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="windowVisible">if set to <c>true</c> [window visible].</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.ShowWindow(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            Shows the window.
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="mCmdShow">The m CMD show.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.SetWindowLongPtr64(System.Runtime.InteropServices.HandleRef,WaveEngine.Adapter.Win32.Win32Native.WindowLongType,System.IntPtr)">
            <summary>
            Sets the window long PTR64.
            </summary>
            <param name="hwnd">The HWND.</param>
            <param name="index">The index.</param>
            <param name="wndProc">The WND proc.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.CallWindowProc(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the window proc.
            </summary>
            <param name="wndProc">The WND proc.</param>
            <param name="hwnd">The HWND.</param>
            <param name="msg">The MSG.</param>
            <param name="wParam">The w param.</param>
            <param name="lParam">The l param.</param>
            <returns>function pointer</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetClientRect(System.IntPtr,SharpDX.Rectangle@)">
            <summary>
            Gets the client rect.
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="lpRect">The lp rect.</param>
            <returns>operation success</returns>
        </member>
        <member name="M:WaveEngine.Adapter.Win32.Win32Native.GetModuleHandle(System.String)">
            <summary>
            Gets the module handle.
            </summary>
            <param name="lpModuleName">Name of the lp module.</param>
            <returns>function pointer</returns>
        </member>
        <member name="T:WaveEngine.Adapter.WPFApplication">
            <summary>
            Application for Windows Presentation Foundation solutions
            </summary>
        </member>
        <member name="F:WaveEngine.Adapter.WPFApplication.imageSource">
            <summary>
            The image source
            </summary>
        </member>
        <member name="P:WaveEngine.Adapter.WPFApplication.ImageSource">
            <summary>
            Gets the image source.
            </summary>
            <value>
            The image source.
            </value>
        </member>
        <member name="M:WaveEngine.Adapter.WPFApplication.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Adapter.WPFApplication" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Adapter.WPFApplication.Configure">
            <summary>
            Runs this instance.
            </summary>
            <returns>The image source of the application image view</returns>
        </member>
        <member name="M:WaveEngine.Adapter.WPFApplication.Render">
            <summary>
            Renders this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.WPFApplication.ResizeBuffers">
            <summary>
            Refreshes the render information.
            </summary>
        </member>
        <member name="M:WaveEngine.Adapter.WPFApplication.RefreshImageSource">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.DXImageSource">
            <summary>
            DirectX image source
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.GetDesktopWindow">
            <summary>
            Gets the desktop window.
            </summary>
            <returns>Destktop window pointer</returns>
        </member>
        <member name="F:WaveEngine.DirectX.DXImageSource.activeClients">
            <summary>
            The s_active clients
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXImageSource.context">
            <summary>
            The context
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXImageSource.device">
            <summary>
            The device
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXImageSource.isDisposed">
            <summary>
            The m_is disposed
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXImageSource.backBuffer">
            <summary>
            The m_back buffer
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXImageSource"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.DirectX.DXImageSource"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.DirectX.DXImageSource.IsDisposed">
            <summary>
            Gets a value indicating whether [is disposed].
            </summary>
            <value>
              <c>true</c> if [is disposed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.SetBackBuffer(SharpDX.Direct3D11.Texture2D)">
            <summary>
            Sets the back buffer.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.GetSharedD3D9(SharpDX.Direct3D9.DeviceEx,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Gets the shared d3 d9.
            </summary>
            <param name="device">The device.</param>
            <param name="renderTarget">The render target.</param>
            <returns>D3D9 texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.ToD3D9(SharpDX.DXGI.Format)">
            <summary>
            To the d3 d9.
            </summary>
            <param name="dxgiformat">The dxgiformat.</param>
            <returns>D3D9 format</returns>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.SetBackBuffer(SharpDX.Direct3D9.Texture)">
            <summary>
            Sets the back buffer.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.StartD3D9">
            <summary>
            Starts the d3 d9.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXImageSource.EndD3D9">
            <summary>
            Ends the d3 d9.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.GraphicsDevice">
            <summary>
            Represents a DirectX graphics device.
            </summary>
            <summary>
            Represents a DirectX graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.Form">
            <summary>
            Render form.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DeviceDirect3D">
            <summary>
            Direct3D graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.ContextDirect3D">
            <summary>
            Direct3D context.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DxgiDeviceManager">
            <summary>
            The DXGI device manager
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.RenderTargetViews">
            <summary>
            Render target view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DepthStencilView">
            <summary>
            Depth stencil view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.BackBuffer">
            <summary>
            Back buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.SwapChain">
            <summary>
            Current SwapChain.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.DepthStencil">
            <summary>
            Directx depth stencil
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.Width">
            <summary>
            Back buffer width.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.GraphicsDevice.Height">
            <summary>
            Back buffer height.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.GraphicsDevice.IsSrgbModeEnabled">
            <summary>
            Gets or sets a value indicating whether the renderer need to draw in SRGB mode.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.DXDepth">
            <summary>
            Render target for DirectX interop.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.DepthView">
            <summary>
            Render target view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.ResourceView">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXDepth.Depth">
            <summary>
            Render target texture.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.DXDepth.NativeDepthView">
            <summary>
            Gets the native depth view.
            </summary>
            <value>
            The native depth view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXDepth.NativeResourceView">
            <summary>
            Gets the native resource view.
            </summary>
            <value>
            The native resource view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXDepth.NativeTexture">
            <summary>
            Gets the native texture.
            </summary>
            <value>
            The native texture.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.DXDepth.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXDepth"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="depthTexture">The depthTexture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXDepth.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXDepth.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.DirectX.DXRenderTarget">
            <summary>
            Render target for DirectX interop.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.TargetView">
            <summary>
            Render target view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.ResourceView">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXRenderTarget.Target">
            <summary>
            Render target texture.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.DXRenderTarget.NativeTargetView">
            <summary>
            Gets the native target view.
            </summary>
            <value>
            The native target view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXRenderTarget.NativeResourceView">
            <summary>
            Gets the native resource view.
            </summary>
            <value>
            The native resource view.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.DXRenderTarget.NativeTexture">
            <summary>
            Gets the native texture.
            </summary>
            <value>
            The native texture.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription},System.Nullable{SharpDX.Direct3D11.ShaderResourceViewDescription})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXRenderTarget"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="renderTarget">The render target.</param>
            <param name="rtDescription">The rendertargetview description.</param>
            <param name="srDescription">The shaderResourceview description.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D,System.Nullable{SharpDX.Direct3D11.RenderTargetViewDescription})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXRenderTarget"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="renderTarget">The render target.</param>
            <param name="rtDescription">The rendertargetview description.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXRenderTarget.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.DirectX.DXTexture">
            <summary>
            Texture for the DirectX render target.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXTexture.disposed">
            <summary>
            Holds if the instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXTexture.Resource">
            <summary>
            Shader resource view.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.DXTexture.Texture">
            <summary>
            DirectX texture.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXTexture.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.DXTexture"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.DXTexture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.DXTexture.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.DirectX.Graphics">
            <summary>
            Manages all graphical functionality.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.vertexBufferCount">
            <summary>
            Number of vertex buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.indexBufferCount">
            <summary>
            Number of index buffers created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.cachedClearColor">
            <summary>
            Cached clear color.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.Graphics.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.TextureManager">
            <summary>
            Gets the texture manager.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.ShaderManager">
            <summary>
            Gets the shader manager.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.RenderTargetManager">
            <summary>
            Gets the render target manager.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.VertexBufferHandles">
            <summary>
            Gets the vertex buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.IndexBufferHandles">
            <summary>
            Gets the index buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.Graphics.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.Graphics"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="clearFlags">The clear flags.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.TopologyFromType(WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Topologies from type.
            </summary>
            <param name="type">The type.</param>
            <returns>DirectX topology type.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.DirectX.Graphics.CalcIndexCount(System.Int32,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Calcs the index count.
            </summary>
            <param name="numPrimitives">The num primitives.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <returns>Number of primitive indices to draw.</returns>
        </member>
        <member name="T:WaveEngine.DirectX.GraphicsHelpers">
            <summary>
            Helper graphic functions.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementsFromVertexBufferFormat(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Inputs the elements from vertex buffer format.
            </summary>
            <param name="vbFormat">The vb format.</param>
            <returns>DirectX input element array for the vertex format.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementName(WaveEngine.Common.Graphics.VertexElementUsage)">
            <summary>
            Inputs the name of the element.
            </summary>
            <param name="usage">The usage.</param>
            <returns>Element name of the usage.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementSize(WaveEngine.Common.Graphics.VertexElementFormat)">
            <summary>
            Inputs the size of the element.
            </summary>
            <param name="format">The format.</param>
            <returns>Size of the input element.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.InputElementFormat(WaveEngine.Common.Graphics.VertexElementFormat)">
            <summary>
            Inputs the element format.
            </summary>
            <param name="format">The format.</param>
            <returns>Format of the input element.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.GraphicsHelpers.ToSharpDXVector(WaveEngine.Common.Math.Vector3,SharpDX.Mathematics.Interop.RawVector3@)">
            <summary>
            Transform Wave Vector3 to SharpDX Vector3
            </summary>
            <param name="vector">Wave vector</param>
            <param name="sharpDXVector">SharpDX vector</param>
        </member>
        <member name="T:WaveEngine.DirectX.HLSLShader">
            <summary>
            Represents a HLSL shader object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.Techniques">
            <summary>
            Dictionary of techniques available.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.matricesStream">
            <summary>
            Data stream for matrix buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.MatricesBox">
            <summary>
            Data box for matrix buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.parametersStream">
            <summary>
            Data stream for parameter buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.ParametersBox">
            <summary>
            Data stream for parameter box.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.MatrixBuffer">
            <summary>
            Matrix buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLShader.ParameterBuffer">
            <summary>
            Parameter buffer.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLShader.#ctor(WaveEngine.Common.Graphics.Effect,SharpDX.Direct3D11.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.HLSLShader"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="d3dDevice">The D3D device.</param>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLShader.SetMatrixData(System.Object)">
            <summary>
            Sets the matrix data.
            </summary>
            <param name="matrices">The matrices.</param>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLShader.SetParameterData(System.Object)">
            <summary>
            Sets the parameter data.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:WaveEngine.DirectX.HLSLTechnique">
            <summary>
            Technique of a HLSL shader.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.device">
            <summary>
            DirectX parent device.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.inputLayouts">
            <summary>
            Dictionary of input layouts supported by the technique.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.vertexShaderSource">
            <summary>
            Compiled vertex shader source.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.VertexShader">
            <summary>
            Vertex shader.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.PixelShader">
            <summary>
            Pixel shader.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.HLSLTechnique.VertexBufferFormat">
            <summary>
            The vertex buffer format
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLTechnique.#ctor(SharpDX.Direct3D11.Device,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.HLSLTechnique"/> class.
            </summary>
            <param name="d3dDevice">The D3D device.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbFormat">The vb format.</param>
        </member>
        <member name="M:WaveEngine.DirectX.HLSLTechnique.GetLayoutForVertexFormat(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Gets the layout for vertex format.
            </summary>
            <param name="vbFormat">The vb format.</param>
            <returns>DirectX input layout of the vertex format.</returns>
        </member>
        <member name="T:WaveEngine.DirectX.MipmapChain">
            <summary>
            Internal class to fix a memory leak problem with dataStream object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.MipmapChain.streams">
            <summary>
            The streams
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.MipmapChain.rectangles">
            <summary>
            The rectangles
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.MipmapChain.currentIndex">
            <summary>
            The current index
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.MipmapChain.Rectangles">
            <summary>
            Gets the rectangles.
            </summary>
            <value>
            The rectangles.
            </value>
            <exception cref="T:System.InvalidOperationException">Mipmap chain hasn't been fully created.</exception>
        </member>
        <member name="M:WaveEngine.DirectX.MipmapChain.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.MipmapChain" /> class.
            </summary>
            <param name="mipmapCount">The mipmap count.</param>
        </member>
        <member name="M:WaveEngine.DirectX.MipmapChain.AddLevel(System.Byte[],System.Int32)">
            <summary>
            Adds the level.
            </summary>
            <param name="data">The data.</param>
            <param name="pitch">The pitch.</param>
            <exception cref="T:System.InvalidOperationException">Level count exceeds initial array size.</exception>
        </member>
        <member name="M:WaveEngine.DirectX.MipmapChain.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.RenderState">
            <summary>
            Manages the current render state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.d3dContext">
            <summary>
            Direct3D context.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.cullMode">
            <summary>
            Current cull mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.depthMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.blendMode">
            <summary>
            Current blend mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.fillMode">
            <summary>
            Current fill mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.samplerMode">
            <summary>
            Current sampler mode.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.viewport">
            <summary>
            Current viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.defaultViewport">
            <summary>
            Initial viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.rasterizerStates">
            <summary>
            The rasterizer states
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.none">
            <summary>
            No depth operation.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.read">
            <summary>
            Depth read.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.write">
            <summary>
            Depth write.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.additive">
            <summary>
            Additive blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.alphaBlend">
            <summary>
            Alpha blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.opaque">
            <summary>
            Opaque blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.nonPremultiplied">
            <summary>
            Non premultiplied alpha blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.scissorTestEnabled">
            <summary>
            The scissor test enabled
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.scissorRectangle">
            <summary>
            The scissor rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.depthBias">
            <summary>
            The depth bias
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderState.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
            <value>
            The cull mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.FillMode">
            <summary>
            Gets or sets the Fill mode.
            </summary>
            <value>
            The Fill mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>
            The depth bias.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.DepthMode">
            <summary>
            Gets or sets the depth mode.
            </summary>
            <value>
            The depth mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.SamplerMode">
            <summary>
            Gets or sets the address mode.
            </summary>
            <value>
            The address mode.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.MaxAnisotropy">
            <summary>
            Gets or sets the max anisotropy.
            </summary>
            <value>
            The max anisotropy.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.ScissorTestEnabled">
            <summary>
            Gets or sets a value indicating whether scissor test is enabled.
            </summary>
            <value>
              <c>true</c> if scissor test is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.RenderState.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle.
            </summary>
            <value>
            The scissor rectangle.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.RenderState"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.OnScreenSizeChanged(System.Object,WaveEngine.Common.Helpers.SizeEventArgs)">
            <summary>
            Detect when the screen is resized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The arguments.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.RefreshDefaultViewport">
            <summary>
            Refresh the default viewport
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateRasterizeState(SharpDX.Direct3D11.Device,WaveEngine.Common.Graphics.CullMode,WaveEngine.Common.Graphics.FillMode,WaveEngine.Common.Graphics.DepthBias)">
            <summary>
            Creates the state of the rasterize.
            </summary>
            <param name="device">The device.</param>
            <param name="cullMode">The cull mode.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="depthBias">The depth bias.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateBlendDescription(SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,System.Boolean)">
            <summary>
            Creates the blend description.
            </summary>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="isBlendEnabled">if set to <c>true</c> [is blend enabled].</param>
            <returns>Blend state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateBlendDescription(SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.BlendOperation,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption,System.Boolean)">
            <summary>
            Creates the blend description.
            </summary>
            <param name="blendOperation">The blend operation.</param>
            <param name="alphaBlendOperation">The alpha blend operation.</param>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
            <param name="sourceAlphaBlend">The source alpha blend.</param>
            <param name="destinationAlphaBlend">The destination alpha blend.</param>
            <param name="isBlendEnabled">if set to <c>true</c> [is blend enabled].</param>
            <returns>Blend description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.CreateDepthStencilStateDescription(System.Boolean,SharpDX.Direct3D11.DepthWriteMask)">
            <summary>
            Creates the depth stencil state description.
            </summary>
            <param name="isDepthEnabled">if set to <c>true</c> [is depth enabled].</param>
            <param name="depthWriteMask">The depth write mask.</param>
            <returns>Depth stencil state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderState.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.DirectX.RenderTargetManager">
            <summary>
            Manages render targets.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets or sets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.RenderTargetHandles">
            <summary>
            Gets the dictionary of render target handles.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.DepthTextureHandles">
            <summary>
            Gets the dictionary of depth texture handles.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.renderTargetCount">
            <summary>
            Number of render targets created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.depthTextureCount">
            <summary>
            Number of depth texture created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.RenderTargetManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.RenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating whether a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.RenderTargetManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat,System.Int32)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="sampleCount">The sample count (MSAA).</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(System.IntPtr)">
            <summary>
            Create RenderTarget from an existing texture
            </summary>        
            <param name="textureHandle">The texture handle</param>        
            <returns>The renderTarget</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.RenderTargetViewDescription)">
            <summary>
            Create a new RenderTarget from an existing texture and renderTargetView description.
            </summary>
            <param name="texture">A existing Texture2D.</param>
            <param name="rtDescription">The renderTargetview description.</param>
            <returns>The rendertarget</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateRenderTarget(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.RenderTargetViewDescription,SharpDX.Direct3D11.ShaderResourceViewDescription)">
            <summary>
            Create a new RenderTarget from an existing texture and descriptions.
            </summary>
            <param name="texture">A existing Texture2D.</param>
            <param name="rtDescription">The renderTargetview description.</param>
            <param name="srDescription">The renderTargetView description.</param>
            <returns>The rendertarget</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>        
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="sampleCount">The sample count (MSAA).</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.CreateDepthTexture(SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="depthBufferDescription">DepthBuffer description</param>        
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depth texture</param>
            <param name="renderTargets">The render target.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.TargetFromHandle``1(System.UInt32)">
            <summary>
            Targets from handle.
            </summary>
            <typeparam name="T">Type of the render target.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The render target.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.DepthFromHandle``1(System.UInt32)">
            <summary>
            Depth from handle.
            </summary>
            <typeparam name="T">Type of the depth texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The Depth.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.RenderTargetManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.DirectX.ShaderManager">
            <summary>
            Creates and manages shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.effects">
            <summary>
            Dictionary of shader objects.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.matrices">
            <summary>
            Matrix buffer for shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.currentTechnique">
            <summary>
            Currently used technique.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.cachedTechnique">
            <summary>
            The chached technique
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.cachedMaterial">
            <summary>
            The cached material
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.pointClamp">
            <summary>
            Point clamp sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.pointWrap">
            <summary>
            Point wrap sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.linearClamp">
            <summary>
            Linear clamp sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.linearWrap">
            <summary>
            Linear wrap sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.anisotropicClamp">
            <summary>
            Anisotropic clamp sampler states.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.anisotropicWrap">
            <summary>
            Anisotropic wrap sampler states.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.ShaderManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.ShaderManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>true if the technique exists.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.ResetCachedMaterial">
            <summary>
            Resets the cached material.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the effect.
            </summary>
            <param name="effect">The effect.</param>        
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.SetTechniqueLayout(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Sets the technique layout.
            </summary>
            <param name="vbFormat">The vb format.</param>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateSamplerStateDescription(SharpDX.Direct3D11.TextureAddressMode,SharpDX.Direct3D11.Filter)">
            <summary>
            Creates the sampler state description.
            </summary>
            <param name="addressMode">The address mode.</param>
            <param name="textureFilter">The texture filter.</param>
            <returns>New sampler state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.CreateSamplerStateDescription(SharpDX.Direct3D11.TextureAddressMode,SharpDX.Direct3D11.Filter,System.Int32)">
            <summary>
            Creates the sampler state description.
            </summary>
            <param name="addressMode">The address mode.</param>
            <param name="textureFilter">The texture filter.</param>
            <param name="anisotropyLevel">The anisotropy level.</param>
            <returns>New sampler state description.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.ShaderManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.DirectX.SoundEffect">
            <summary>
            Represents a sound effect.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.Xaudio2">
            <summary>
            XAudio2 object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.X3dAudio">
            <summary>
            X3DAudio object
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.MasteringVoice">
            <summary>
            The mastering voice
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.Buffer">
            <summary>
            Audio buffer object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.SoundBase">
            <summary>
            SoundBase instance.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.SoundFormat">
            <summary>
            Format of the WAV sound.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffect.DecodedPackets">
            <summary>
            Decoded WAV data.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.#ctor(SharpDX.XAudio2.XAudio2,SharpDX.XAudio2.MasteringVoice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.SoundEffect"/> class.
            </summary>
            <param name="xaudio2">The xaudio2.</param>
            <param name="masteringVoice">The mastering voice.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.Initialize(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Initializes the specified sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>New sound instance.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.Play(System.Single,System.Single,System.Boolean)">
            <summary>
            Plays the specified volume.
            </summary>
            <param name="volume">The volume.</param>
            <param name="pan">The pan.</param>
            <param name="looped">if set to <c>true</c> [looped].</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.SoundEffectInstance">
            <summary>
            An instance of a SoundEffect.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.SoundEffect">
            <summary>
            Parent SoundEffect.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.Voice">
            <summary>
            XAudio2 SourceVoice.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.emitter">
            <summary>
            X3D Sound Emitter
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.listener">
            <summary>
            X3D Sound Listener
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.dspSettings">
            <summary>
            DSP settings
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.volume">
            <summary>
            Volume value.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.pan">
            <summary>
            Pan value
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundEffectInstance.pitch">
            <summary>
            Pitch value
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.Pan">
            <summary>
            Gets or sets the pan.
            </summary>
            <value>
            The pan.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.Pitch">
            <summary>
            Gets or sets the pitch.
            </summary>
            <value>
            The pitch.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.IsLooped">
            <summary>
            Gets or sets a value indicating whether this instance is looped.
            </summary>
            <value>
              <c>true</c> if this instance is looped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.DirectX.SoundEffectInstance.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.#ctor(WaveEngine.DirectX.SoundEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.SoundEffectInstance"/> class.
            </summary>
            <param name="soundEffect">The sound effect.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Play">
            <summary>
            Plays this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Voice_StreamEnd">
            <summary>
            Stream end callback.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Apply3D(WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="soundEmitter">The sound emitter</param>
            <param name="soundListener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ApplyVolume(System.Single)">
            <summary>
            Applies the volume.
            </summary>
            <param name="volume">The volume.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ApplyPan(System.Single)">
            <summary>
            Applies the pan.
            </summary>
            <param name="pan">The pan.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ApplyPitch(System.Single)">
            <summary>
            Applies the pitch.
            </summary>
            <param name="pitch">The pitch.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.ComputePanMatrix(System.Int32,System.Int32,System.Single)">
            <summary>
            Computes the pan matrix.
            </summary>
            <param name="srcChannels">The source channels.</param>
            <param name="dstChannels">The DST channels.</param>
            <param name="pan">The pan.</param>
            <returns>The pan matrix.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundEffectInstance.OnBufferEnd(System.IntPtr)">
            <summary>
            Called when [buffer end].
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="T:WaveEngine.DirectX.SoundManager">
            <summary>
            Manages everything related to sounds.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.FloatMin">
            <summary>
            Minimum float value
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.soundCount">
            <summary>
            Number of sounds created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.instanceCount">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.xaudio2">
            <summary>
            XAudio2 object.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.x3dAudio">
            <summary>
            X3DAudio object
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.masteringVoice">
            <summary>
            XAudio2 mastering voice.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.soundHandles">
            <summary>
            Dictionary of sound handles.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.SoundManager.instanceHandles">
            <summary>
            Dictionary of instance handles.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.SoundManager"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase,System.IO.Stream,System.Int32,System.UInt32@)">
            <summary>
            Uploads the sound by a stream.
            </summary>
            <param name="sound">The sound</param>
            <param name="stream">The stream</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.DestroyInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.PlayInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Plays the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.PauseInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Pauses the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.InstanceState(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Instances the state.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.StopInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Stops the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.UpdateInstanceSettings(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Updates the instance settings.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Apply3D(WaveEngine.Common.Media.SoundInstance,WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="instance">The sound instance</param>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Enable3DAudio">
            <summary>
            Enable 3d audio
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.SoundManager.Dispose(System.Boolean)">
            <summary>
            Dispose the asset container.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="T:WaveEngine.DirectX.TextureManager">
            <summary>
            Handles texture management.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.TextureManager.TextureHandles">
            <summary>
            Gets the texture handles.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.TextureManager.textureCount">
            <summary>
            Number of textures created.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.TextureManager.adapter">
            <summary>
            Parent adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.TextureManager.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.TextureManager"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>        
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.TextureFromHandle``1(System.UInt32)">
            <summary>
            Textures from handle.
            </summary>
            <typeparam name="T">Tyep of the returned texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>Texture from handle.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.ToDXUsage(WaveEngine.Common.Graphics.TextureUsage)">
            <summary>
            To convert from TextureUsage to SharpDX ResourceUsage
            </summary>
            <param name="usage">the textureusage value to convert.</param>
            <returns>the ResourceUsage value.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.ToDXCpuAccess(WaveEngine.Common.Graphics.TextureCpuAccess)">
            <summary>
            To convert from TextureCpuAccess to CpuAccessFlags
            </summary>
            <param name="cpuAccess">the TextureCpuAccess to convert.</param>
            <returns>the CpuAccessFlags value.</returns>
        </member>
        <member name="M:WaveEngine.DirectX.TextureManager.ToDXFormat(WaveEngine.Common.Graphics.Texture,SharpDX.DXGI.Format@)">
            <summary>
            To convert from TextureFormat to DirectX Format
            </summary>
            <param name="texture">The texture.</param>
            <param name="textureFormat">the out textureFormat.</param>
            <returns>The texture Pitch.</returns>
        </member>
        <member name="T:WaveEngine.DirectX.VideoInfo">
            <summary>
            Video info instance
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoInfo.IsInitialized">
            <summary>
            Gets or sets a value indicating whether the video player is initialized
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.VideoInfo"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoInfo.Dispose">
            <summary>
            Dispose video info instance
            </summary>
        </member>
        <member name="T:WaveEngine.DirectX.VideoPlayer">
            <summary>
            The video player
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.isInitialized">
            <summary>
            indicates if video player is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.adapter">
            <summary>
            Wave adapter for Windows platform
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.mediaEngine">
            <summary>
            Media engine instance
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.mediaEngineEx">
            <summary>
            Media engine EX instance used to play videos
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.video">
            <summary>
            Current Video info instance
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.textureRefreshed">
            <summary>
            indicate if texture is refreshed
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.lockObject">
            <summary>
            Lock object mutex
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.isReadyToPlay">
            <summary>
            The video is ready to play
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.BackgroundColor">
            <summary>
            Gets or sets the background color used to display the video.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsPlaying">
            <summary>
            Gets a value indicating whether this media player is playing a video or audio.
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the video player is loop
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the video player is muted
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.Volume">
            <summary>
            Gets or sets the video player volume
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.PlayPosition">
            <summary>
            Gets or sets the video play position
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.Video">
            <summary>
            Gets the current video info
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.State">
            <summary>
            Gets the video player state
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.VideoTexture">
            <summary>
            Gets the video texture
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether Video texture is supported on this device
            </summary>
        </member>
        <member name="P:WaveEngine.DirectX.VideoPlayer.DxTexture">
            <summary>
            Gets he dx texture
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.onComplete">
            <summary>
            Internal complete event handler
            </summary>
        </member>
        <member name="E:WaveEngine.DirectX.VideoPlayer.OnComplete">
            <summary>
            Event fired when the video play os completed
            </summary>
        </member>
        <member name="F:WaveEngine.DirectX.VideoPlayer.onError">
            <summary>
            Internal error event handler
            </summary>
        </member>
        <member name="E:WaveEngine.DirectX.VideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.#ctor(WaveEngine.Adapter.Adapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.DirectX.VideoPlayer"/> class.
            </summary>
            <param name="adapter">WinRT adapter.</param>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Dispose">
            <summary>
            Release resources of Video Player
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.Initialize">
            <summary>
            Lazy initialization of VideoPlayer
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.CreateTexture">
            <summary>
            Create video texture
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.SetVideoInfoMetadata">
            <summary>
            Set the video info metadata
            </summary>
        </member>
        <member name="M:WaveEngine.DirectX.VideoPlayer.OnMediaEngineEvent(SharpDX.MediaFoundation.MediaEngineEvent,System.Int64,System.Int32)">
            <summary>
            Media engine event handler method
            </summary>
            <param name="mediaEvent">media event</param>
            <param name="param1">1st event parameter</param>
            <param name="param2">2nd event parameter</param>
        </member>
    </members>
</doc>
