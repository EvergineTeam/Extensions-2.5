//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public partial class DependencyProperty : BaseComponent {
  internal new static DependencyProperty CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new DependencyProperty(cPtr, cMemoryOwn);
  }

  internal DependencyProperty(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(DependencyProperty obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected DependencyProperty() {
  }

  public Type OwnerType {
    get {
      return Noesis.Extend.GetNativeTypeInfo(GetOwnerTypeHelper()).Type;
    }
  }

  public Type PropertyType {
    get {
      if (OriginalPropertyType == null) {
        return Noesis.Extend.GetNativeTypeInfo(GetPropertyTypeHelper()).Type;
      }
      else {
        return OriginalPropertyType;
      }
    }
  }

  public Noesis.PropertyMetadata Metadata {
    get {
      return GetMetadataHelper(GetOwnerTypeHelper());
    }
  }

  public Noesis.PropertyMetadata GetMetadata(Type forType) {
    return GetMetadataHelper(Noesis.Extend.GetNativeType(forType));
  }

  public static object UnsetValue {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.DependencyProperty_UnsetValue_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public string Name {
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.DependencyProperty_Name_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public bool ReadOnly {
    get {
      bool ret = NoesisGUI_PINVOKE.DependencyProperty_ReadOnly_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.DependencyProperty_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private IntPtr GetOwnerTypeHelper() {
    IntPtr ret = NoesisGUI_PINVOKE.DependencyProperty_GetOwnerTypeHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private IntPtr GetPropertyTypeHelper() {
    IntPtr ret = NoesisGUI_PINVOKE.DependencyProperty_GetPropertyTypeHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private PropertyMetadata GetMetadataHelper(IntPtr type) {
    IntPtr cPtr = NoesisGUI_PINVOKE.DependencyProperty_GetMetadataHelper(swigCPtr, type);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (PropertyMetadata)Noesis.Extend.GetProxy(cPtr, false);
  }

}

}

