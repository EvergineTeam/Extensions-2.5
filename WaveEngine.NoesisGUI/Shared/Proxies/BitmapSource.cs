//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class BitmapSource : ImageSource {
  internal new static BitmapSource CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new BitmapSource(cPtr, cMemoryOwn);
  }

  internal BitmapSource(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(BitmapSource obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected BitmapSource() {
  }

  public static BitmapSource Create(int pixelWidth, int pixelHeight, double dpiX, double dpiY, byte[] pixels, int stride, Format format) {
    IntPtr cPtr = CreateHelper(pixelWidth, pixelHeight, (float)dpiX, (float)dpiY, pixels, stride, (uint)format);
    return (BitmapSource)Noesis.Extend.GetProxy(cPtr, true);
  }

  public float DpiX {
    get {
      float ret = NoesisGUI_PINVOKE.BitmapSource_DpiX_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float DpiY {
    get {
      float ret = NoesisGUI_PINVOKE.BitmapSource_DpiY_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int PixelWidth {
    get {
      int ret = NoesisGUI_PINVOKE.BitmapSource_PixelWidth_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int PixelHeight {
    get {
      int ret = NoesisGUI_PINVOKE.BitmapSource_PixelHeight_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private static IntPtr CreateHelper(int pixelWidth, int pixelHeight, float dpiX, float dpiY, byte[] buffer, int stride, uint format) {
    IntPtr ret = NoesisGUI_PINVOKE.BitmapSource_CreateHelper(pixelWidth, pixelHeight, dpiX, dpiY, buffer, stride, format);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.BitmapSource_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Format {
    BGRA8,
    BGR8,
    RGBA8,
    RGB8
  }

}

}

