//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class PasswordBox : Control {
  internal new static PasswordBox CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new PasswordBox(cPtr, cMemoryOwn);
  }

  internal PasswordBox(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(PasswordBox obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events
  #region PasswordChanged
  public delegate void PasswordChangedHandler(object sender, RoutedEventArgs e);
  public event PasswordChangedHandler PasswordChanged {
    add {
      if (!_PasswordChanged.ContainsKey(swigCPtr.Handle)) {
        _PasswordChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_PasswordBox_PasswordChanged(_raisePasswordChanged, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _PasswordChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_PasswordChanged.ContainsKey(swigCPtr.Handle)) {

        _PasswordChanged[swigCPtr.Handle] -= value;

        if (_PasswordChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_PasswordBox_PasswordChanged(_raisePasswordChanged, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();

          _PasswordChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaisePasswordChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePasswordChangedCallback _raisePasswordChanged = RaisePasswordChanged;

  [MonoPInvokeCallback(typeof(RaisePasswordChangedCallback))]
  private static void RaisePasswordChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_PasswordChanged.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for PasswordChanged event");
      }
      if (sender == IntPtr.Zero && e == IntPtr.Zero) {
        _PasswordChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        PasswordChangedHandler handler = _PasswordChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, PasswordChangedHandler> _PasswordChanged =
      new Dictionary<IntPtr, PasswordChangedHandler>();
  #endregion

  #endregion

  public PasswordBox() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(PasswordBox).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_PasswordBox();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public void SelectAll() {
    NoesisGUI_PINVOKE.PasswordBox_SelectAll(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static DependencyProperty CaretBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_CaretBrushProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MaxLengthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_MaxLengthProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty PasswordCharProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_PasswordCharProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectionBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_SelectionBrushProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectionOpacityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_SelectionOpacityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Brush CaretBrush {
    set {
      NoesisGUI_PINVOKE.PasswordBox_CaretBrush_set(swigCPtr, Brush.getCPtr(value));
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_CaretBrush_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public int MaxLength {
    set {
      NoesisGUI_PINVOKE.PasswordBox_MaxLength_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = NoesisGUI_PINVOKE.PasswordBox_MaxLength_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public char PasswordChar {
    set {
      NoesisGUI_PINVOKE.PasswordBox_PasswordChar_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      char ret = NoesisGUI_PINVOKE.PasswordBox_PasswordChar_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string Password {
    set {
      NoesisGUI_PINVOKE.PasswordBox_Password_set(swigCPtr, value != null ? value : string.Empty);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.PasswordBox_Password_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public Brush SelectionBrush {
    set {
      NoesisGUI_PINVOKE.PasswordBox_SelectionBrush_set(swigCPtr, Brush.getCPtr(value));
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.PasswordBox_SelectionBrush_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float SelectionOpacity {
    set {
      NoesisGUI_PINVOKE.PasswordBox_SelectionOpacity_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.PasswordBox_SelectionOpacity_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.PasswordBox_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_PasswordBox(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

