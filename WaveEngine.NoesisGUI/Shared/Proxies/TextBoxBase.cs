//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class TextBoxBase : Control {
  internal new static TextBoxBase CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new TextBoxBase(cPtr, cMemoryOwn);
  }

  internal TextBoxBase(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TextBoxBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected TextBoxBase() {
  }

  #region Events
  #region SelectionChanged
  public delegate void SelectionChangedHandler(object sender, RoutedEventArgs e);
  public event SelectionChangedHandler SelectionChanged {
    add {
      if (!_SelectionChanged.ContainsKey(swigCPtr.Handle)) {
        _SelectionChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_TextBoxBase_SelectionChanged(_raiseSelectionChanged, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _SelectionChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_SelectionChanged.ContainsKey(swigCPtr.Handle)) {

        _SelectionChanged[swigCPtr.Handle] -= value;

        if (_SelectionChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_TextBoxBase_SelectionChanged(_raiseSelectionChanged, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();

          _SelectionChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseSelectionChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseSelectionChangedCallback _raiseSelectionChanged = RaiseSelectionChanged;

  [MonoPInvokeCallback(typeof(RaiseSelectionChangedCallback))]
  private static void RaiseSelectionChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_SelectionChanged.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for SelectionChanged event");
      }
      if (sender == IntPtr.Zero && e == IntPtr.Zero) {
        _SelectionChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        SelectionChangedHandler handler = _SelectionChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, SelectionChangedHandler> _SelectionChanged =
      new Dictionary<IntPtr, SelectionChangedHandler>();
  #endregion

  #region TextChanged
  public delegate void TextChangedHandler(object sender, RoutedEventArgs e);
  public event TextChangedHandler TextChanged {
    add {
      if (!_TextChanged.ContainsKey(swigCPtr.Handle)) {
        _TextChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_TextBoxBase_TextChanged(_raiseTextChanged, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _TextChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_TextChanged.ContainsKey(swigCPtr.Handle)) {

        _TextChanged[swigCPtr.Handle] -= value;

        if (_TextChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_TextBoxBase_TextChanged(_raiseTextChanged, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();

          _TextChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseTextChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTextChangedCallback _raiseTextChanged = RaiseTextChanged;

  [MonoPInvokeCallback(typeof(RaiseTextChangedCallback))]
  private static void RaiseTextChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_TextChanged.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for TextChanged event");
      }
      if (sender == IntPtr.Zero && e == IntPtr.Zero) {
        _TextChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        TextChangedHandler handler = _TextChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, TextChangedHandler> _TextChanged =
      new Dictionary<IntPtr, TextChangedHandler>();
  #endregion

  #endregion

  public static DependencyProperty AcceptsReturnProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_AcceptsReturnProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty AcceptsTabProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_AcceptsTabProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty CaretBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_CaretBrushProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HorizontalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_HorizontalScrollBarVisibilityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsReadOnlyProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_IsReadOnlyProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsSelectionActiveProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_IsSelectionActiveProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectionBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionBrushProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectionOpacityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionOpacityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VerticalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_VerticalScrollBarVisibilityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool AcceptsReturn {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_AcceptsReturn_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_AcceptsReturn_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool AcceptsTab {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_AcceptsTab_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_AcceptsTab_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Brush CaretBrush {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_CaretBrush_set(swigCPtr, Brush.getCPtr(value));
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_CaretBrush_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public ScrollBarVisibility HorizontalScrollBarVisibility {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_HorizontalScrollBarVisibility_set(swigCPtr, (int)value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.TextBoxBase_HorizontalScrollBarVisibility_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsReadOnly {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_IsReadOnly_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_IsReadOnly_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsSelectionActive {
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_IsSelectionActive_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Brush SelectionBrush {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_SelectionBrush_set(swigCPtr, Brush.getCPtr(value));
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionBrush_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float SelectionOpacity {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_SelectionOpacity_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_SelectionOpacity_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ScrollBarVisibility VerticalScrollBarVisibility {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_VerticalScrollBarVisibility_set(swigCPtr, (int)value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.TextBoxBase_VerticalScrollBarVisibility_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.TextBoxBase_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_TextBoxBase(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

