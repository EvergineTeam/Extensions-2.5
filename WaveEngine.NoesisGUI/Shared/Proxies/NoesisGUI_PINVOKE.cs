//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.IO;

namespace Noesis
{

[System.Security.SuppressUnmanagedCodeSecurity]
internal class NoesisGUI_PINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    #if !__IOS__
    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);
    #endif

    [DllImport(Library.Name)]
    public static extern void SWIGRegisterExceptionCallbacks_NoesisGUI_(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport(Library.Name)]
    public static extern void SWIGRegisterExceptionArgumentCallbacks_NoesisGUI_(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);
    #if !__IOS__
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new IOException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new OverflowException(message, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new SystemException(message, SWIGPendingException.Retrieve()));
    }

    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new ArgumentNullException(paramName, message));
    }
    [MonoPInvokeCallback(typeof(ExceptionDelegate))]
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new ArgumentOutOfRangeException(paramName, message));
    }
    #endif

    public static void Init() {
    #if !__IOS__
      SWIGRegisterExceptionCallbacks_NoesisGUI_(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionArgumentCallbacks_NoesisGUI_(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    #endif
    }
  }

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(NoesisGUI_PINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(NoesisGUI_PINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport(Library.Name)]
    public static extern void SWIGRegisterStringCallback_NoesisGUI_(SWIGStringDelegate stringDelegate);

    [MonoPInvokeCallback(typeof(SWIGStringDelegate))]
    static string CreateString(string cString) {
      return cString;
    }

    public static void Init() {
      SWIGRegisterStringCallback_NoesisGUI_(stringDelegate);
    }
  }


  static NoesisGUI_PINVOKE() {
    Noesis.GUI.Init();
  }


  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BaseComponent(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendCommand(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendConverter(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendList(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendObservableList(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendDictionary(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendListIndexer(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendDictionaryIndexer(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ExtendStream(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_XamlProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextureProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_FileTextureProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_FontProvider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DependencyObject(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ButtonBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MenuBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextBoxBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Border(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_BulletDecorator(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Button(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Canvas(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_CheckBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ComboBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ComboBoxItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ContentControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ContextMenu(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Control(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DataTemplateSelector(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Decorator(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_DockPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Ellipse(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Expander(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_FrameworkElement(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Grid(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_GroupBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_HeaderedContentControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_HeaderedItemsControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Image(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ItemsControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Label(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Line(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ListBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ListBoxItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Menu(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_MenuItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Page(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Panel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_PasswordBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Path(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Popup(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ProgressBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RadioButton(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RangeBase(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Rectangle(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_RepeatButton(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ResourceDictionary(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ScrollBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ScrollViewer(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Selector(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Separator(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Shape(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Slider(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StackPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StatusBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_StatusBarItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TabControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TabItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TabPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextBlock(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TextBox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Thumb(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TickBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToggleButton(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBar(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBarOverflowPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBarPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolBarTray(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_ToolTip(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Track(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TreeView(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_TreeViewItem(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_UIElement(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_UserControl(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Viewbox(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_Visual(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern IntPtr Extend_WrapPanel(IntPtr typeName);

  [DllImport(Library.Name)]
  public static extern void BindEvent_RangeBase_ValueChanged(RangeBase.RaiseValueChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_RangeBase_ValueChanged(RangeBase.RaiseValueChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TreeView_SelectedItemChanged(TreeView.RaiseSelectedItemChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TreeView_SelectedItemChanged(TreeView.RaiseSelectedItemChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FindStringResource(HandleRef jarg1, [MarshalAs(UnmanagedType.LPStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FindTypeResource(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_TryFindStringResource(HandleRef jarg1, [MarshalAs(UnmanagedType.LPStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_TryFindTypeResource(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ButtonBase_Click(ButtonBase.RaiseClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ButtonBase_Click(ButtonBase.RaiseClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TextBoxBase_SelectionChanged(TextBoxBase.RaiseSelectionChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TextBoxBase_SelectionChanged(TextBoxBase.RaiseSelectionChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TextBoxBase_TextChanged(TextBoxBase.RaiseTextChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TextBoxBase_TextChanged(TextBoxBase.RaiseTextChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_PreviewCanExecute(CommandBinding.RaisePreviewCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_PreviewCanExecute(CommandBinding.RaisePreviewCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_CanExecute(CommandBinding.RaiseCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_CanExecute(CommandBinding.RaiseCanExecuteCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_PreviewExecuted(CommandBinding.RaisePreviewExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_PreviewExecuted(CommandBinding.RaisePreviewExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_CommandBinding_Executed(CommandBinding.RaiseExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_CommandBinding_Executed(CommandBinding.RaiseExecutedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ContextMenu_Closed(ContextMenu.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ContextMenu_Closed(ContextMenu.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ContextMenu_Opened(ContextMenu.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ContextMenu_Opened(ContextMenu.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Control_MouseDoubleClick(Control.RaiseMouseDoubleClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Control_MouseDoubleClick(Control.RaiseMouseDoubleClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Control_PreviewMouseDoubleClick(Control.RaisePreviewMouseDoubleClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Control_PreviewMouseDoubleClick(Control.RaisePreviewMouseDoubleClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Expander_Collapsed(Expander.RaiseCollapsedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Expander_Collapsed(Expander.RaiseCollapsedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Expander_Expanded(Expander.RaiseExpandedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Expander_Expanded(Expander.RaiseExpandedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_ContextMenuClosing(FrameworkElement.RaiseContextMenuClosingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_ContextMenuClosing(FrameworkElement.RaiseContextMenuClosingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_ContextMenuOpening(FrameworkElement.RaiseContextMenuOpeningCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_ContextMenuOpening(FrameworkElement.RaiseContextMenuOpeningCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_DataContextChanged(FrameworkElement.RaiseDataContextChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_DataContextChanged(FrameworkElement.RaiseDataContextChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_Initialized(FrameworkElement.RaiseInitializedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_Initialized(FrameworkElement.RaiseInitializedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_Loaded(FrameworkElement.RaiseLoadedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_Loaded(FrameworkElement.RaiseLoadedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_RequestBringIntoView(FrameworkElement.RaiseRequestBringIntoViewCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_RequestBringIntoView(FrameworkElement.RaiseRequestBringIntoViewCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_SizeChanged(FrameworkElement.RaiseSizeChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_SizeChanged(FrameworkElement.RaiseSizeChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_ToolTipClosing(FrameworkElement.RaiseToolTipClosingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_ToolTipClosing(FrameworkElement.RaiseToolTipClosingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_ToolTipOpening(FrameworkElement.RaiseToolTipOpeningCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_ToolTipOpening(FrameworkElement.RaiseToolTipOpeningCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_FrameworkElement_Unloaded(FrameworkElement.RaiseUnloadedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_FrameworkElement_Unloaded(FrameworkElement.RaiseUnloadedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Hyperlink_Click(Hyperlink.RaiseClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Hyperlink_Click(Hyperlink.RaiseClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Hyperlink_RequestNavigate(Hyperlink.RaiseRequestNavigateCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Hyperlink_RequestNavigate(Hyperlink.RaiseRequestNavigateCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ItemContainerGenerator_StatusChanged(ItemContainerGenerator.RaiseStatusChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ItemContainerGenerator_StatusChanged(ItemContainerGenerator.RaiseStatusChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ItemContainerGenerator_ItemsChanged(ItemContainerGenerator.RaiseItemsChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ItemContainerGenerator_ItemsChanged(ItemContainerGenerator.RaiseItemsChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ListBoxItem_Selected(ListBoxItem.RaiseSelectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ListBoxItem_Selected(ListBoxItem.RaiseSelectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ListBoxItem_Unselected(ListBoxItem.RaiseUnselectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ListBoxItem_Unselected(ListBoxItem.RaiseUnselectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_MenuItem_Checked(MenuItem.RaiseCheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_MenuItem_Checked(MenuItem.RaiseCheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_MenuItem_Click(MenuItem.RaiseClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_MenuItem_Click(MenuItem.RaiseClickCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_MenuItem_SubmenuClosed(MenuItem.RaiseSubmenuClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_MenuItem_SubmenuClosed(MenuItem.RaiseSubmenuClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_MenuItem_SubmenuOpened(MenuItem.RaiseSubmenuOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_MenuItem_SubmenuOpened(MenuItem.RaiseSubmenuOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_MenuItem_Unchecked(MenuItem.RaiseUncheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_MenuItem_Unchecked(MenuItem.RaiseUncheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_PasswordBox_PasswordChanged(PasswordBox.RaisePasswordChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_PasswordBox_PasswordChanged(PasswordBox.RaisePasswordChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Popup_Closed(Popup.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Popup_Closed(Popup.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Popup_Opened(Popup.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Popup_Opened(Popup.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ScrollBar_Scroll(ScrollBar.RaiseScrollCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ScrollBar_Scroll(ScrollBar.RaiseScrollCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ScrollViewer_ScrollChanged(ScrollViewer.RaiseScrollChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ScrollViewer_ScrollChanged(ScrollViewer.RaiseScrollChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Selector_SelectionChanged(Selector.RaiseSelectionChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Selector_SelectionChanged(Selector.RaiseSelectionChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Thumb_DragCompleted(Thumb.RaiseDragCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Thumb_DragCompleted(Thumb.RaiseDragCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Thumb_DragDelta(Thumb.RaiseDragDeltaCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Thumb_DragDelta(Thumb.RaiseDragDeltaCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Thumb_DragStarted(Thumb.RaiseDragStartedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Thumb_DragStarted(Thumb.RaiseDragStartedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ToggleButton_Checked(ToggleButton.RaiseCheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ToggleButton_Checked(ToggleButton.RaiseCheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ToggleButton_Indeterminate(ToggleButton.RaiseIndeterminateCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ToggleButton_Indeterminate(ToggleButton.RaiseIndeterminateCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ToggleButton_Unchecked(ToggleButton.RaiseUncheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ToggleButton_Unchecked(ToggleButton.RaiseUncheckedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ToolTip_Closed(ToolTip.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ToolTip_Closed(ToolTip.RaiseClosedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_ToolTip_Opened(ToolTip.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_ToolTip_Opened(ToolTip.RaiseOpenedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TreeViewItem_Collapsed(TreeViewItem.RaiseCollapsedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TreeViewItem_Collapsed(TreeViewItem.RaiseCollapsedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TreeViewItem_Expanded(TreeViewItem.RaiseExpandedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TreeViewItem_Expanded(TreeViewItem.RaiseExpandedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TreeViewItem_Selected(TreeViewItem.RaiseSelectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TreeViewItem_Selected(TreeViewItem.RaiseSelectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_TreeViewItem_Unselected(TreeViewItem.RaiseUnselectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_TreeViewItem_Unselected(TreeViewItem.RaiseUnselectedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_GotFocus(UIElement.RaiseGotFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_GotFocus(UIElement.RaiseGotFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_GotKeyboardFocus(UIElement.RaiseGotKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_GotKeyboardFocus(UIElement.RaiseGotKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_GotMouseCapture(UIElement.RaiseGotMouseCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_GotMouseCapture(UIElement.RaiseGotMouseCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_KeyDown(UIElement.RaiseKeyDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_KeyDown(UIElement.RaiseKeyDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_KeyUp(UIElement.RaiseKeyUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_KeyUp(UIElement.RaiseKeyUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_LostFocus(UIElement.RaiseLostFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_LostFocus(UIElement.RaiseLostFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_LostKeyboardFocus(UIElement.RaiseLostKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_LostKeyboardFocus(UIElement.RaiseLostKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_LostMouseCapture(UIElement.RaiseLostMouseCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_LostMouseCapture(UIElement.RaiseLostMouseCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseDown(UIElement.RaiseMouseDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseDown(UIElement.RaiseMouseDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseEnter(UIElement.RaiseMouseEnterCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseEnter(UIElement.RaiseMouseEnterCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseLeave(UIElement.RaiseMouseLeaveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseLeave(UIElement.RaiseMouseLeaveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseLeftButtonDown(UIElement.RaiseMouseLeftButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseLeftButtonDown(UIElement.RaiseMouseLeftButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseLeftButtonUp(UIElement.RaiseMouseLeftButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseLeftButtonUp(UIElement.RaiseMouseLeftButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseMove(UIElement.RaiseMouseMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseMove(UIElement.RaiseMouseMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseRightButtonDown(UIElement.RaiseMouseRightButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseRightButtonDown(UIElement.RaiseMouseRightButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseRightButtonUp(UIElement.RaiseMouseRightButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseRightButtonUp(UIElement.RaiseMouseRightButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseUp(UIElement.RaiseMouseUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseUp(UIElement.RaiseMouseUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_MouseWheel(UIElement.RaiseMouseWheelCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_MouseWheel(UIElement.RaiseMouseWheelCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_TouchDown(UIElement.RaiseTouchDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_TouchDown(UIElement.RaiseTouchDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_TouchMove(UIElement.RaiseTouchMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_TouchMove(UIElement.RaiseTouchMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_TouchUp(UIElement.RaiseTouchUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_TouchUp(UIElement.RaiseTouchUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_TouchEnter(UIElement.RaiseTouchEnterCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_TouchEnter(UIElement.RaiseTouchEnterCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_TouchLeave(UIElement.RaiseTouchLeaveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_TouchLeave(UIElement.RaiseTouchLeaveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_GotTouchCapture(UIElement.RaiseGotTouchCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_GotTouchCapture(UIElement.RaiseGotTouchCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_LostTouchCapture(UIElement.RaiseLostTouchCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_LostTouchCapture(UIElement.RaiseLostTouchCaptureCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewTouchDown(UIElement.RaisePreviewTouchDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewTouchDown(UIElement.RaisePreviewTouchDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewTouchMove(UIElement.RaisePreviewTouchMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewTouchMove(UIElement.RaisePreviewTouchMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewTouchUp(UIElement.RaisePreviewTouchUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewTouchUp(UIElement.RaisePreviewTouchUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_ManipulationStarting(UIElement.RaiseManipulationStartingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_ManipulationStarting(UIElement.RaiseManipulationStartingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_ManipulationStarted(UIElement.RaiseManipulationStartedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_ManipulationStarted(UIElement.RaiseManipulationStartedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_ManipulationDelta(UIElement.RaiseManipulationDeltaCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_ManipulationDelta(UIElement.RaiseManipulationDeltaCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_ManipulationInertiaStarting(UIElement.RaiseManipulationInertiaStartingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_ManipulationInertiaStarting(UIElement.RaiseManipulationInertiaStartingCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_ManipulationCompleted(UIElement.RaiseManipulationCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_ManipulationCompleted(UIElement.RaiseManipulationCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewGotKeyboardFocus(UIElement.RaisePreviewGotKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewGotKeyboardFocus(UIElement.RaisePreviewGotKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewKeyDown(UIElement.RaisePreviewKeyDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewKeyDown(UIElement.RaisePreviewKeyDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewKeyUp(UIElement.RaisePreviewKeyUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewKeyUp(UIElement.RaisePreviewKeyUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewLostKeyboardFocus(UIElement.RaisePreviewLostKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewLostKeyboardFocus(UIElement.RaisePreviewLostKeyboardFocusCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseDown(UIElement.RaisePreviewMouseDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseDown(UIElement.RaisePreviewMouseDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseLeftButtonDown(UIElement.RaisePreviewMouseLeftButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseLeftButtonDown(UIElement.RaisePreviewMouseLeftButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseLeftButtonUp(UIElement.RaisePreviewMouseLeftButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseLeftButtonUp(UIElement.RaisePreviewMouseLeftButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseMove(UIElement.RaisePreviewMouseMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseMove(UIElement.RaisePreviewMouseMoveCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseRightButtonDown(UIElement.RaisePreviewMouseRightButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseRightButtonDown(UIElement.RaisePreviewMouseRightButtonDownCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseRightButtonUp(UIElement.RaisePreviewMouseRightButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseRightButtonUp(UIElement.RaisePreviewMouseRightButtonUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseUp(UIElement.RaisePreviewMouseUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseUp(UIElement.RaisePreviewMouseUpCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewMouseWheel(UIElement.RaisePreviewMouseWheelCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewMouseWheel(UIElement.RaisePreviewMouseWheelCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_PreviewTextInput(UIElement.RaisePreviewTextInputCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_PreviewTextInput(UIElement.RaisePreviewTextInputCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_QueryCursor(UIElement.RaiseQueryCursorCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_QueryCursor(UIElement.RaiseQueryCursorCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_TextInput(UIElement.RaiseTextInputCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_TextInput(UIElement.RaiseTextInputCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_FocusableChanged(UIElement.RaiseFocusableChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_FocusableChanged(UIElement.RaiseFocusableChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsEnabledChanged(UIElement.RaiseIsEnabledChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsEnabledChanged(UIElement.RaiseIsEnabledChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsHitTestVisibleChanged(UIElement.RaiseIsHitTestVisibleChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsHitTestVisibleChanged(UIElement.RaiseIsHitTestVisibleChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsVisibleChanged(UIElement.RaiseIsVisibleChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsVisibleChanged(UIElement.RaiseIsVisibleChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsMouseCapturedChanged(UIElement.RaiseIsMouseCapturedChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsMouseCapturedChanged(UIElement.RaiseIsMouseCapturedChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsMouseCaptureWithinChanged(UIElement.RaiseIsMouseCaptureWithinChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsMouseCaptureWithinChanged(UIElement.RaiseIsMouseCaptureWithinChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsMouseDirectlyOverChanged(UIElement.RaiseIsMouseDirectlyOverChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsMouseDirectlyOverChanged(UIElement.RaiseIsMouseDirectlyOverChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsKeyboardFocusedChanged(UIElement.RaiseIsKeyboardFocusedChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsKeyboardFocusedChanged(UIElement.RaiseIsKeyboardFocusedChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_UIElement_IsKeyboardFocusWithinChanged(UIElement.RaiseIsKeyboardFocusWithinChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_UIElement_IsKeyboardFocusWithinChanged(UIElement.RaiseIsKeyboardFocusWithinChangedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Clock_Completed(Clock.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Clock_Completed(Clock.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void BindEvent_Timeline_Completed(Timeline.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void UnbindEvent_Timeline_Completed(Timeline.RaiseCompletedCallback callback, IntPtr instance);

  [DllImport(Library.Name)]
  public static extern void FreeString(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseComponent_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr BaseComponent_GetDynamicType(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern void BaseComponent_AddReference(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern void BaseComponent_Release(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Bool_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Float_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Double_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Int_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr UInt_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Short_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr UShort_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr String_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Bool_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Float_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Double_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Int_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_UInt_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Short_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_UShort_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_String_GetStaticType();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Unbox_Bool(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern float Unbox_Float(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern double Unbox_Double(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern int Unbox_Int(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern uint Unbox_UInt(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern short Unbox_Short(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern ushort Unbox_UShort(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_String(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Bool(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Float(float jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Double(double jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Int(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_UInt(uint jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Short(short jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_UShort(ushort jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_String([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Size_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Size_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Size(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Size(ref Size jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Size_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Size jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Sizei_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Sizei_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Sizei(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Sizei(ref Sizei jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Sizei_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Sizei jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Point_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Point_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Point(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Point(ref Point jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Point_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Pointi_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Pointi_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Pointi(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Pointi(ref Pointi jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Pointi_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Pointi jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Rect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Rect(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Rect(ref Rect jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Rect_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Recti_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Recti_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Recti(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Recti(ref Recti jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Recti_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Recti jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Thickness_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Thickness_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Thickness(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Thickness(ref Thickness jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Thickness_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CornerRadius_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_CornerRadius_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_CornerRadius(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_CornerRadius(ref CornerRadius jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CornerRadius_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out CornerRadius jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Color_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Color_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Color(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Color(ref Color jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Vector3_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Vector3_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Vector3(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Vector3(ref Vector3 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Vector4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Vector4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Vector4(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Vector4(ref Vector4 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix2_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Matrix2_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Matrix2(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Matrix2(ref Matrix2 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Transform2_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Transform2_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Transform2(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Transform2(ref Transform2 jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Transform2_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Transform2 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix3_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Matrix3_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Matrix3(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Matrix3(ref Matrix3 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Transform3_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Transform3_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Transform3(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Transform3(ref Transform3 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Matrix4_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Matrix4(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Matrix4(ref Matrix4 jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr NullableBool_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableInt16_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableUInt16_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableInt32_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableUInt32_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableFloat_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableDouble_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableColor_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullablePoint_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableRect_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableSize_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableThickness_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableCornerRadius_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableTimeSpan_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableDuration_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr NullableKeyTime_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetValidateValueCallback(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetValueManager(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_FindTypeProperty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DependencyProperty_SetValidateValueCallback(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_UnsetValue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DependencyProperty_ReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetOwnerTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetPropertyTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyProperty_GetMetadataHelper(HandleRef jarg1, IntPtr jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DispatcherObject_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void DependencyObject_ClearValue(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_SetAnimation(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_ClearAnimation(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_CoerceValue(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DependencyObject_IsCached(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyObject_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyObject_ReadLocalValueHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_SetCurrentValue(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_InitObject(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DependencyObject_InvalidatePropertyHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyPropertyChangedEventArgs_GetNewValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyPropertyChangedEventArgs_GetOldValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DependencyPropertyChangedEventArgs_GetPropertyHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_DependencyPropertyChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Freezable_Freeze(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_Changed(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_CanSeal(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_IsSealed(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Freezable_Seal(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_CanFreeze_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Freezable_IsFrozen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_CloneHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_CloneCurrentValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_GetAsFrozenHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Freezable_GetCurrentValueAsFrozenHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Expression_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyMetadata_GetDefaultValueObject(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyMetadata_GetValueManager(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PropertyMetadata_HasDefaultValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyMetadata_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyMetadata_GetDefaultValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIPropertyMetadata_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr UpdateSourceTrigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_UpdateSourceTrigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_UpdateSourceTrigger(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_UpdateSourceTrigger(int jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsMeasure_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsArrange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsParentMeasure_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsParentArrange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_AffectsRender_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_Inherits_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_OverridesInheritanceBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_IsNotDataBindable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_BindsTwoWayByDefault_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int FrameworkPropertyMetadata_DefaultUpdateSourceTrigger_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkPropertyMetadata_SubPropertiesDoNotAffectRender_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkPropertyMetadata_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr AlignmentX_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_AlignmentX_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_AlignmentX(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_AlignmentX(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr AlignmentY_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_AlignmentY_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_AlignmentY(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_AlignmentY(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr AutoToolTipPlacement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_AutoToolTipPlacement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_AutoToolTipPlacement(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_AutoToolTipPlacement(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_BindingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_BindingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_BindingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapScalingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_BitmapScalingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_BitmapScalingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_BitmapScalingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BrushMappingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_BrushMappingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_BrushMappingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_BrushMappingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CharacterCasing_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_CharacterCasing_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_CharacterCasing(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_CharacterCasing(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ClickMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ClickMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ClickMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ClickMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorInterpolationMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ColorInterpolationMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ColorInterpolationMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ColorInterpolationMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Cursor_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Cursor_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_Cursor(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Cursor(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Dock_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Dock_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_Dock(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Dock(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ExpandDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ExpandDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ExpandDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ExpandDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FillRule_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_FillRule_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_FillRule(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FillRule(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FlowDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_FlowDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_FlowDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FlowDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontStretch_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_FontStretch_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_FontStretch(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FontStretch(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontStyle_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_FontStyle_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_FontStyle(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FontStyle(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontWeight_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_FontWeight_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_FontWeight(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FontWeight(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryCombineMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_GeometryCombineMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_GeometryCombineMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GeometryCombineMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientSpreadMethod_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_GradientSpreadMethod_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_GradientSpreadMethod(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GradientSpreadMethod(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HorizontalAlignment_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_HorizontalAlignment_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_HorizontalAlignment(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_HorizontalAlignment(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigationMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_KeyboardNavigationMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_KeyboardNavigationMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_KeyboardNavigationMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LineStackingStrategy_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_LineStackingStrategy_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_LineStackingStrategy(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_LineStackingStrategy(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListSortDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ListSortDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ListSortDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ListSortDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItemRole_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_MenuItemRole_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_MenuItemRole(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_MenuItemRole(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Orientation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Orientation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_Orientation(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Orientation(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr OverflowMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_OverflowMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_OverflowMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_OverflowMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PenLineCap_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_PenLineCap_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_PenLineCap(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PenLineCap(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PenLineJoin_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_PenLineJoin_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_PenLineJoin(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PenLineJoin(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlacementMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_PlacementMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_PlacementMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PlacementMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PopupAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_PopupAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_PopupAnimation(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PopupAnimation(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSourceMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_RelativeSourceMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_RelativeSourceMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_RelativeSourceMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SelectionMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_SelectionMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_SelectionMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_SelectionMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBarVisibility_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ScrollBarVisibility_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ScrollBarVisibility(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ScrollBarVisibility(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Stretch_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Stretch_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_Stretch(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Stretch(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StretchDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_StretchDirection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_StretchDirection(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_StretchDirection(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextDecorations_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TextDecorations_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TextDecorations(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextDecorations(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextAlignment_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TextAlignment_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TextAlignment(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextAlignment(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextTrimming_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TextTrimming_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TextTrimming(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextTrimming(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextWrapping_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TextWrapping_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TextWrapping(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TextWrapping(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBarPlacement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TickBarPlacement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TickBarPlacement(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TickBarPlacement(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickPlacement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TickPlacement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TickPlacement(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TickPlacement(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TileMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_TileMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TileMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VerticalAlignment_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_VerticalAlignment_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_VerticalAlignment(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VerticalAlignment(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Visibility_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Visibility_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_Visibility(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Visibility(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr XamlProvider_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void Texture_SetPrivateData(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Texture_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TextureProvider_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr FileTextureProvider_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void FontProvider_RegisterFontHelper(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr FontProvider_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResourceKeyType();

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceKeyType_GetTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceKeyType_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Collection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Collection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Collection_Get(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void Collection_Set(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int Collection_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Collection_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Collection_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int Collection_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Collection_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void Collection_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Collection_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Collection_CollectionChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Collection_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Collection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FreezableCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FreezableCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FreezableCollection_Get(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern void FreezableCollection_Set(HandleRef jarg1, uint jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern uint FreezableCollection_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void FreezableCollection_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FreezableCollection_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int FreezableCollection_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void FreezableCollection_Insert(HandleRef jarg1, uint jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FreezableCollection_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void FreezableCollection_RemoveAt(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FreezableCollection_CollectionChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint FreezableCollection_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FreezableCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Animatable_GetStaticType();

  [DllImport(Library.Name)]
  public static extern float ImageSource_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ImageSource_Height_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageSource_GetStaticType();

  [DllImport(Library.Name)]
  public static extern float BitmapSource_DpiX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float BitmapSource_DpiY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BitmapSource_PixelWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int BitmapSource_PixelHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapSource_CreateHelper(int jarg1, int jarg2, float jarg3, float jarg4, byte[] jarg5, int jarg6, uint jarg7);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapSource_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BitmapImage();

  [DllImport(Library.Name)]
  public static extern void BitmapImage_UriSource_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapImage_UriSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BitmapImage_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextureSource__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextureSource__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int TextureSource_PixelWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int TextureSource_PixelHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextureSource_Texture_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextureSource_Texture_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextureSource_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void Brush_OpacityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_OpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern void Brush_RelativeTransformProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_RelativeTransformProperty_get();

  [DllImport(Library.Name)]
  public static extern void Brush_TransformProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_TransformProperty_get();

  [DllImport(Library.Name)]
  public static extern void Brush_Opacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Brush_Opacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Brush_RelativeTransform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_RelativeTransform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Brush_Transform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_Transform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Brush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_AliceBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_AntiqueWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Aqua_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Aquamarine_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Azure_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Beige_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Bisque_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Black_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_BlanchedAlmond_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Blue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_BlueViolet_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Brown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_BurlyWood_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_CadetBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Chartreuse_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Chocolate_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Coral_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_CornflowerBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Cornsilk_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Crimson_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Cyan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkCyan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkGoldenrod_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkKhaki_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkMagenta_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkOliveGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkOrange_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkOrchid_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSalmon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSlateBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkSlateGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkTurquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DarkViolet_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DeepPink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DeepSkyBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DimGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_DodgerBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Firebrick_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_FloralWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_ForestGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Fuchsia_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Gainsboro_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_GhostWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Gold_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Goldenrod_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Gray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Green_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_GreenYellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Honeydew_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_HotPink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_IndianRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Indigo_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Ivory_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Khaki_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Lavender_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LavenderBlush_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LawnGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LemonChiffon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightCoral_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightCyan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightGoldenrodYellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightPink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSalmon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSkyBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSlateGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightSteelBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LightYellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Lime_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_LimeGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Linen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Magenta_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Maroon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumAquamarine_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumOrchid_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumPurple_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumSeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumSlateBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumSpringGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumTurquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MediumVioletRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MidnightBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MintCream_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_MistyRose_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Moccasin_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_NavajoWhite_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Navy_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_OldLace_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Olive_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_OliveDrab_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Orange_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_OrangeRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Orchid_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleGoldenrod_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleTurquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PaleVioletRed_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PapayaWhip_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PeachPuff_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Peru_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Pink_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Plum_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_PowderBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Purple_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Red_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_RosyBrown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_RoyalBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SaddleBrown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Salmon_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SandyBrown_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SeaGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SeaShell_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Sienna_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Silver_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SkyBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SlateBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SlateGray_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Snow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SpringGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_SteelBlue_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Tan_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Teal_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Thistle_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Tomato_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Transparent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Turquoise_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Violet_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Wheat_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_White_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_WhiteSmoke_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_Yellow_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Brushes_YellowGreen_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SolidColorBrush__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SolidColorBrush__SWIG_1(ref Color jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_ToString(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SolidColorBrush_ColorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_ColorProperty_get();

  [DllImport(Library.Name)]
  public static extern void SolidColorBrush_Color_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_Color_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SolidColorBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GradientStop();

  [DllImport(Library.Name)]
  public static extern void GradientStop_ColorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_ColorProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientStop_OffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_OffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientStop_Color_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_Color_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientStop_Offset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GradientStop_Offset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStop_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GradientStopCollection();

  [DllImport(Library.Name)]
  public static extern IntPtr GradientStopCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void GradientBrush_ColorInterpolationModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_ColorInterpolationModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientBrush_GradientStopsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_GradientStopsProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientBrush_MappingModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_MappingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientBrush_SpreadMethodProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_SpreadMethodProperty_get();

  [DllImport(Library.Name)]
  public static extern void GradientBrush_ColorInterpolationMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GradientBrush_ColorInterpolationMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientBrush_GradientStops_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_GradientStops_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientBrush_MappingMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GradientBrush_MappingMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GradientBrush_SpreadMethod_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GradientBrush_SpreadMethod_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GradientBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearGradientBrush();

  [DllImport(Library.Name)]
  public static extern void LinearGradientBrush_EndPointProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_EndPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LinearGradientBrush_StartPointProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_StartPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LinearGradientBrush_StartPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_StartPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void LinearGradientBrush_EndPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_EndPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LinearGradientBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RadialGradientBrush();

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_CenterProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_CenterProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_GradientOriginProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_GradientOriginProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_RadiusXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_RadiusYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_Center_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_Center_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_GradientOrigin_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_GradientOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RadialGradientBrush_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RadialGradientBrush_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RadialGradientBrush_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadialGradientBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void TileBrush_AlignmentXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_AlignmentXProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_AlignmentYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_AlignmentYProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_StretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_TileModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_TileModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewboxProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewboxProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewboxUnitsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewboxUnitsProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewportProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewportProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewportUnitsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_ViewportUnitsProperty_get();

  [DllImport(Library.Name)]
  public static extern void TileBrush_AlignmentX_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_AlignmentX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_AlignmentY_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_AlignmentY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_TileMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_TileMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_Viewbox_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_Viewbox_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewboxUnits_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_ViewboxUnits_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_Viewport_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_Viewport_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TileBrush_ViewportUnits_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TileBrush_ViewportUnits_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TileBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ImageBrush__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ImageBrush__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ImageBrush_ImageSourceProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_ImageSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern void ImageBrush_ImageSource_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_ImageSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ImageBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Pen();

  [DllImport(Library.Name)]
  public static extern void Pen_BrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_BrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_DashCapProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_DashCapProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_DashStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_DashStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_EndLineCapProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_EndLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_LineJoinProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_LineJoinProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_MiterLimitProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_MiterLimitProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_StartLineCapProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_StartLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_ThicknessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_ThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void Pen_Brush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_Brush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_DashCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_DashCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_DashStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_DashStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_EndLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_EndLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_LineJoin_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_LineJoin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_MiterLimit_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Pen_MiterLimit_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_StartLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Pen_StartLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Pen_Thickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Pen_Thickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Pen_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Transform_Identity_get();

  [DllImport(Library.Name)]
  public static extern void Transform_GetTransformValue(HandleRef jarg1, out Transform2 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Transform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TransformCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TranslateTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TranslateTransform__SWIG_1(float jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void TranslateTransform_XProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TranslateTransform_XProperty_get();

  [DllImport(Library.Name)]
  public static extern void TranslateTransform_YProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TranslateTransform_YProperty_get();

  [DllImport(Library.Name)]
  public static extern void TranslateTransform_X_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TranslateTransform_X_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TranslateTransform_Y_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TranslateTransform_Y_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TranslateTransform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScaleTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScaleTransform__SWIG_1(float jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_CenterXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_CenterYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_ScaleXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_ScaleXProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_ScaleYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_ScaleYProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_ScaleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_ScaleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_ScaleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_ScaleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScaleTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScaleTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScaleTransform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SkewTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SkewTransform__SWIG_1(float jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_AngleXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_AngleXProperty_get();

  [DllImport(Library.Name)]
  public static extern void SkewTransform_AngleYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_AngleYProperty_get();

  [DllImport(Library.Name)]
  public static extern void SkewTransform_CenterXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern void SkewTransform_CenterYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern void SkewTransform_AngleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_AngleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_AngleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_AngleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SkewTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float SkewTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SkewTransform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RotateTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RotateTransform__SWIG_1(float jarg1);

  [DllImport(Library.Name)]
  public static extern void RotateTransform_AngleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_AngleProperty_get();

  [DllImport(Library.Name)]
  public static extern void RotateTransform_CenterXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern void RotateTransform_CenterYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern void RotateTransform_Angle_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RotateTransform_Angle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RotateTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RotateTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RotateTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RotateTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RotateTransform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CompositeTransform();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_CenterXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_CenterXProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_CenterYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_CenterYProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_RotationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_RotationProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_ScaleXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_ScaleXProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_ScaleYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_ScaleYProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_SkewXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_SkewXProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_SkewYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_SkewYProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_TranslateXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_TranslateXProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_TranslateYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_TranslateYProperty_get();

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_CenterX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_CenterX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_CenterY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_CenterY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_Rotation_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_Rotation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_ScaleX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_ScaleX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_ScaleY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_ScaleY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_SkewX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_SkewX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_SkewY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_SkewY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_TranslateX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_TranslateX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CompositeTransform_TranslateY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float CompositeTransform_TranslateY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CompositeTransform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixTransform__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MatrixTransform__SWIG_1(ref Transform2 jarg1);

  [DllImport(Library.Name)]
  public static extern void MatrixTransform_MatrixProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform_MatrixProperty_get();

  [DllImport(Library.Name)]
  public static extern void MatrixTransform_Matrix_set(HandleRef jarg1, ref Transform2 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform_Matrix_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MatrixTransform_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TransformGroup();

  [DllImport(Library.Name)]
  public static extern void TransformGroup_ChildrenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TransformGroup_ChildrenProperty_get();

  [DllImport(Library.Name)]
  public static extern void TransformGroup_Children_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TransformGroup_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TransformGroup_GetStaticType();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Projection_IsIdentity(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Projection_GetProjection(HandleRef jarg1, ref Size jarg2, ref Size jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr Projection_Identity_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Projection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PlaneProjection();

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_ConstructProjectionMatrix(ref Size jarg1, ref Size jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool PlaneProjection_IsIdentity(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_GetProjection(HandleRef jarg1, ref Size jarg2, ref Size jarg3);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_CenterOfRotationXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_CenterOfRotationXProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_CenterOfRotationYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_CenterOfRotationYProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_CenterOfRotationZProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_CenterOfRotationZProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_GlobalOffsetXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_GlobalOffsetXProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_GlobalOffsetYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_GlobalOffsetYProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_GlobalOffsetZProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_GlobalOffsetZProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_LocalOffsetXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_LocalOffsetXProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_LocalOffsetYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_LocalOffsetYProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_LocalOffsetZProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_LocalOffsetZProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_ProjectionMatrixProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_ProjectionMatrixProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_RotationXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_RotationXProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_RotationYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_RotationYProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_RotationZProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_RotationZProperty_get();

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_CenterOfRotationX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_CenterOfRotationX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_CenterOfRotationY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_CenterOfRotationY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_CenterOfRotationZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_CenterOfRotationZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_GlobalOffsetX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_GlobalOffsetX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_GlobalOffsetY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_GlobalOffsetY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_GlobalOffsetZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_GlobalOffsetZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_LocalOffsetX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_LocalOffsetX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_LocalOffsetY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_LocalOffsetY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_LocalOffsetZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_LocalOffsetZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_ProjectionMatrix_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_RotationX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_RotationX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_RotationY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_RotationY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PlaneProjection_RotationZ_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PlaneProjection_RotationZ_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PlaneProjection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Matrix3DProjection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Matrix3DProjection__SWIG_1(ref Matrix4 jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Matrix3DProjection_IsIdentity(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix3DProjection_GetProjection(HandleRef jarg1, ref Size jarg2, ref Size jarg3);

  [DllImport(Library.Name)]
  public static extern void Matrix3DProjection_ProjectionMatrixProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix3DProjection_ProjectionMatrixProperty_get();

  [DllImport(Library.Name)]
  public static extern void Matrix3DProjection_ProjectionMatrix_set(HandleRef jarg1, ref Matrix4 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix3DProjection_ProjectionMatrix_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Matrix3DProjection_GetStaticType();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Geometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_GetRenderBounds(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Geometry_FillContains(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Geometry_StrokeContains(HandleRef jarg1, HandleRef jarg2, ref Point jarg3);

  [DllImport(Library.Name)]
  public static extern void Geometry_TransformProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_TransformProperty_get();

  [DllImport(Library.Name)]
  public static extern void Geometry_Transform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_Transform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Geometry_GetGeometryBounds(HandleRef jarg1, out Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Geometry_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_1(ref Rect jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_2(ref Rect jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectangleGeometry__SWIG_3(ref Rect jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RectangleGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RadiusXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RadiusYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RectProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_RectProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RectangleGeometry_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RectangleGeometry_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectangleGeometry_Rect_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_Rect_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectangleGeometry_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EllipseGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EllipseGeometry__SWIG_1(ref Point jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool EllipseGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_CenterProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_CenterProperty_get();

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_RadiusXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_RadiusYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_Center_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_Center_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float EllipseGeometry_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EllipseGeometry_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float EllipseGeometry_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EllipseGeometry_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineGeometry__SWIG_1(ref Point jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool LineGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void LineGeometry_EndPointProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_EndPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LineGeometry_StartPointProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_StartPointProperty_get();

  [DllImport(Library.Name)]
  public static extern void LineGeometry_StartPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_StartPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void LineGeometry_EndPoint_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_EndPoint_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LineGeometry_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CombinedGeometry__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CombinedGeometry__SWIG_1(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CombinedGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_Geometry1Property_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry1Property_get();

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_Geometry2Property_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry2Property_get();

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_GeometryCombineModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_GeometryCombineModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_Geometry1_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_Geometry2_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_Geometry2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CombinedGeometry_GeometryCombineMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int CombinedGeometry_GeometryCombineMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CombinedGeometry_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void delete_StreamGeometryContext(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_BeginFigure(HandleRef jarg1, ref Point jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_LineTo(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_CubicTo(HandleRef jarg1, ref Point jarg2, ref Point jarg3, ref Point jarg4);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_QuadraticTo(HandleRef jarg1, ref Point jarg2, ref Point jarg3);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_SmoothCubicTo(HandleRef jarg1, ref Point jarg2, ref Point jarg3);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_SmoothQuadraticTo(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_ArcTo(HandleRef jarg1, ref Point jarg2, ref Size jarg3, float jarg4, bool jarg5, int jarg6);

  [DllImport(Library.Name)]
  public static extern void StreamGeometryContext_Close(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StreamGeometry__SWIG_0([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_StreamGeometry__SWIG_1();

  [DllImport(Library.Name)]
  public static extern void StreamGeometry_SetData(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_Open(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool StreamGeometry_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StreamGeometry_FillRuleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_FillRuleProperty_get();

  [DllImport(Library.Name)]
  public static extern void StreamGeometry_FillRule_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int StreamGeometry_FillRule_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StreamGeometry_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GeometryGroup();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GeometryGroup_IsEmpty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GeometryGroup_ChildrenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_ChildrenProperty_get();

  [DllImport(Library.Name)]
  public static extern void GeometryGroup_FillRuleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_FillRuleProperty_get();

  [DllImport(Library.Name)]
  public static extern void GeometryGroup_Children_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GeometryGroup_FillRule_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int GeometryGroup_FillRule_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GeometryGroup_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FontFamily__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FontFamily__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_FontFamily__SWIG_2([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_BaseUri_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FontFamily_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr RootVisual_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_HitTestResult();

  [DllImport(Library.Name)]
  public static extern IntPtr HitTestResult_GetVisualHit(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_HitTestResult(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsAncestorOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsDescendantOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_FindCommonVisualAncestor(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_PointFromScreen(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_PointToScreen(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_TransformToAncestor(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_TransformToDescendant(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_TransformToVisual(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsInvalidated(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsConnectedToView(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Visual_DisconnectFromView(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Visual_IsInRenderTree(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint Visual_GetRenderTreeId(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Visual_SetVisualBrushFlag(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Visual_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetRoot(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetParent(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int VisualTreeHelper_GetChildrenCount(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetChild(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetContentBounds(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetDescendantBounds(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetSize(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_GetClip(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_HitTest__SWIG_0(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTreeHelper_HitTest__SWIG_1(HandleRef jarg1, ref Point jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void MouseState_position_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MouseState_position_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MouseState_leftButton_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseState_leftButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MouseState_rightButton_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseState_rightButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MouseState_middleButton_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseState_middleButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MouseState_xButton1Button_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseState_xButton1Button_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MouseState_xButton2Button_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseState_xButton2Button_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseState__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseState__SWIG_1(ref Point jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [DllImport(Library.Name)]
  public static extern void delete_MouseState(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EventArgs_Empty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EventArgs();

  [DllImport(Library.Name)]
  public static extern void delete_EventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedEvent__SWIG_0([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedEvent__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEvent_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RoutedEvent_RoutingStrategy_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RoutedEvent_RoutingStrategy_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEvent_GetOwnerTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEvent_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEventArgs_GetSourceHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedEventArgs_GetRoutedEventHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RoutedEventArgs_GetHandledHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RoutedEventArgs_SetHandledHelper(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_RoutedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr MouseEventArgs_GetPosition(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_GetLeftButtonStateHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_GetMiddleButtonStateHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_GetRightButtonStateHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_GetXButton1StateHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseEventArgs_GetXButton2StateHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_MouseEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseButtonEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, int jarg4, int jarg5, uint jarg6);

  [DllImport(Library.Name)]
  public static extern int MouseButtonEventArgs_GetButtonStateHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseButtonEventArgs_GetChangedButtonHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MouseButtonEventArgs_GetClickCountHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_MouseButtonEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_MouseWheelEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern int MouseWheelEventArgs_GetDeltaHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_MouseWheelEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TouchEventArgs(HandleRef jarg1, HandleRef jarg2, ref Point jarg3, ulong jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr TouchEventArgs_GetTouchPoint(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern ulong TouchEventArgs_GetTouchDeviceHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_TouchEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationStartingEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationStartingEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartingEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationStartingEventArgs_SetManipulationContainerHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int ManipulationStartingEventArgs_GetModeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationStartingEventArgs_SetModeHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationStartingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationStartedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationStartedEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationStartedEventArgs_Complete(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartedEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationStartedEventArgs_GetManipulationOriginHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationStartedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDelta_GetExpansionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationDelta_SetExpansionHelper(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern float ManipulationDelta_GetRotationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationDelta_SetRotationHelper(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ManipulationDelta_GetScaleHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationDelta_SetScaleHelper(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDelta_GetTranslationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationDelta_SetTranslationHelper(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationDelta();

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationDelta(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ManipulationVelocities_GetAngularVelocityHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationVelocities_SetAngularVelocityHelper(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationVelocities_GetExpansionVelocityHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationVelocities_SetExpansionVelocityHelper(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationVelocities_GetLinearVelocityHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationVelocities_SetLinearVelocityHelper(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationVelocities();

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationVelocities(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationDeltaEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, HandleRef jarg5, HandleRef jarg6, HandleRef jarg7, bool jarg8);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationDeltaEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationDeltaEventArgs_Complete(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_GetManipulationOriginHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_GetCumulativeManipulationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_GetDeltaManipulationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationDeltaEventArgs_GetVelocitiesHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationDeltaEventArgs_GetIsInertialHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationDeltaEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float InertiaExpansionBehavior_GetDesiredDecelerationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaExpansionBehavior_SetDesiredDecelerationHelper(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InertiaExpansionBehavior();

  [DllImport(Library.Name)]
  public static extern void delete_InertiaExpansionBehavior(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float InertiaRotationBehavior_GetDesiredDecelerationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaRotationBehavior_SetDesiredDecelerationHelper(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InertiaRotationBehavior();

  [DllImport(Library.Name)]
  public static extern void delete_InertiaRotationBehavior(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float InertiaTranslationBehavior_GetDesiredDecelerationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InertiaTranslationBehavior_SetDesiredDecelerationHelper(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_InertiaTranslationBehavior();

  [DllImport(Library.Name)]
  public static extern void delete_InertiaTranslationBehavior(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationInertiaStartingEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, HandleRef jarg5);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationInertiaStartingEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetManipulationOriginHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_SetManipulationOriginHelper(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetInitialVelocitiesHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetExpansionBehaviorHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_SetExpansionBehaviorHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetTranslationBehaviorHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_SetTranslationBehaviorHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationInertiaStartingEventArgs_GetRotationBehaviorHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ManipulationInertiaStartingEventArgs_SetRotationBehaviorHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationInertiaStartingEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ManipulationCompletedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, ref Point jarg4, HandleRef jarg5, HandleRef jarg6, bool jarg7);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationCompletedEventArgs_Cancel(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_GetManipulationContainerHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_GetManipulationOriginHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_GetFinalVelocitiesHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ManipulationCompletedEventArgs_GetTotalManipulationHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ManipulationCompletedEventArgs_GetIsInertialHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ManipulationCompletedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardFocusChangedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardFocusChangedEventArgs_GetNewFocusHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardFocusChangedEventArgs_GetOldFocusHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_KeyboardFocusChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyEventArgs(HandleRef jarg1, HandleRef jarg2, int jarg3, uint jarg4);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_GetIsDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_GetIsRepeat(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_GetIsToggled(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyEventArgs_GetIsUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyEventArgs_GetKeyHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyEventArgs_GetOriginalKeyHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint KeyEventArgs_GetKeyStatesHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_KeyEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextCompositionEventArgs(HandleRef jarg1, HandleRef jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern uint TextCompositionEventArgs_GetTextHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_TextCompositionEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_TraversalRequest(int jarg1);

  [DllImport(Library.Name)]
  public static extern int TraversalRequest_GetFocusNavigationDirectionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TraversalRequest_GetWrappedHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TraversalRequest_SetWrappedHelper(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_TraversalRequest(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void QueryCursorEventArgs_Cursor_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int QueryCursorEventArgs_Cursor_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_QueryCursorEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_QueryCursorEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenuEventArgs__SWIG_0(HandleRef jarg1, HandleRef jarg2, float jarg3, float jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenuEventArgs__SWIG_1(HandleRef jarg1, HandleRef jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenuEventArgs__SWIG_2(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenuEventArgs_GetCursorLeftHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ContextMenuEventArgs_GetCursorTopHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ContextMenuEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolTipEventArgs(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_ToolTipEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RequestBringIntoViewEventArgs(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestBringIntoViewEventArgs_GetTargetObjectHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestBringIntoViewEventArgs_GetTargetRectHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_RequestBringIntoViewEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeChangedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedEventArgs_GetNewSizeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeChangedEventArgs_GetOldSizeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SizeChangedEventArgs_GetWidthChangedHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SizeChangedEventArgs_GetHeightChangedHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_SizeChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Mouse(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_GetPosition(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Mouse_GetButtonState(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Mouse_Capture__SWIG_0(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Mouse_Capture__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_DirectlyOverChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Mouse_Captured_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Mouse_GetPositionValue(HandleRef jarg1, out Pointi jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Keyboard(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Keyboard_ResetState(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint Keyboard_GetModifiers(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint Keyboard_GetKeyStates(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsKeyDown(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsKeyUp(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Keyboard_IsKeyToggled(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_GetFocused(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_Focus(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Keyboard_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_UIElement();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_CaptureMouse(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_ReleaseMouseCapture(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_CaptureTouch(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_ReleaseTouchCapture(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_ReleaseAllTouchCaptures(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_Focus(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_InvalidateMeasure(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMeasureValid(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Measure(HandleRef jarg1, ref Size jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_InvalidateArrange(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsArrangeValid(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Arrange(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_InvalidateVisual(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_UpdateLayout(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_MoveFocus(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_PredictFocus(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_RaiseEvent(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void UIElement_AllowDropProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_AllowDropProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_ClipProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ClipProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_ClipToBoundsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ClipToBoundsProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_FocusableProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_FocusableProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsFocusedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsFocusedProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsHitTestVisibleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsHitTestVisibleProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsKeyboardFocusedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsKeyboardFocusedProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsKeyboardFocusWithinProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsKeyboardFocusWithinProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsMouseCapturedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseCapturedProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsMouseCaptureWithinProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseCaptureWithinProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsMouseDirectlyOverProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseDirectlyOverProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsMouseOverProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsMouseOverProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsManipulationEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsManipulationEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_IsVisibleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_IsVisibleProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_OpacityMaskProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_OpacityMaskProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_OpacityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_OpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_ProjectionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_ProjectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_RenderTransformOriginProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransformOriginProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_RenderTransformProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransformProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_VisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_VisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void UIElement_AllowDrop_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_AllowDrop_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Clip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Clip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_ClipToBounds_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_ClipToBounds_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Focusable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_Focusable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsFocused_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsHitTestVisible_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsHitTestVisible_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsKeyboardFocused_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsKeyboardFocusWithin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseCaptured_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseCaptureWithin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseDirectlyOver_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsMouseOver_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_IsManipulationEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsManipulationEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool UIElement_IsVisible_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_OpacityMask_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_OpacityMask_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Opacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float UIElement_Opacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Projection_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Projection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_RenderTransformOrigin_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransformOrigin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_RenderTransform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderTransform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UIElement_Visibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int UIElement_Visibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_CommandBindings_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_InputBindings_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_DesiredSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_RenderSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Mouse_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_Keyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_UIElementCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_UIElementCollection__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr UIElementCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr RenderOptions_BitmapScalingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern int RenderOptions_GetBitmapScalingMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RenderOptions_SetBitmapScalingMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SetterBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SetterBaseCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SetterBaseCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SetterBaseCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResourceDictionary();

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_FindName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_MergedDictionaries_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ResourceDictionary_Source_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint ResourceDictionary_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ResourceDictionary_IsReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionary_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResourceDictionaryCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResourceDictionaryCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ResourceDictionaryCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Style();

  [DllImport(Library.Name)]
  public static extern void Style_Seal(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Style_TargetType_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_TargetType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Style_BasedOn_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_BasedOn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Style_Resources_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_Resources_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Style_CanSeal_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Style_IsSealed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Style_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_1(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_2(int jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RelativeSource__SWIG_3(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_Self_get();

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_TemplatedParent_get();

  [DllImport(Library.Name)]
  public static extern void RelativeSource_Mode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RelativeSource_Mode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RelativeSource_AncestorType_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_AncestorType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RelativeSource_AncestorLevel_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RelativeSource_AncestorLevel_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RelativeSource_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void BindingBase_FallbackValue_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingBase_FallbackValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingBase_StringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingBase_StringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void BindingExpressionBase_UpdateTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingExpressionBase_UpdateSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_Target_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_TargetProperty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_ParentBindingBase_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpressionBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void BindingExpression_UpdateTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingExpression_UpdateSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpression_ParentBinding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingExpression_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TemplateBindingExtension__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TemplateBindingExtension__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TemplateBindingExtension_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExtension_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExtension_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExtension_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExpression_TemplateBindingExtension_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TemplateBindingExpression_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FrameworkElement();

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_GetBindingExpression(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_SetBinding__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_SetBinding__SWIG_1(HandleRef jarg1, HandleRef jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_BringIntoView__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_BringIntoView__SWIG_1(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_GetTemplateChild(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FindName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_MoveFocus(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_PredictFocus(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ActualHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ActualHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ActualWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ActualWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ContextMenuProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_CursorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_CursorProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_DataContextProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DataContextProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_DefaultStyleKeyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DefaultStyleKeyProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_FocusVisualStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FocusVisualStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ForceCursorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ForceCursorProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_HeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_HeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_HorizontalAlignmentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_HorizontalAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_LayoutTransformProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_LayoutTransformProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MarginProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MarginProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MaxHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MaxHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MaxWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MaxWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MinHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MinHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MinWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_MinWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_NameProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_NameProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_OverridesDefaultStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_OverridesDefaultStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_StyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_StyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_TagProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_TagProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ToolTipProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UseLayoutRoundingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_UseLayoutRoundingProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_VerticalAlignmentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_VerticalAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_WidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_WidthProperty_get();

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_ActualHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_ActualWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ContextMenu_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ContextMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Cursor_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_Cursor_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_DataContext_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DataContext_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_DefaultStyleKey_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_DefaultStyleKey_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_FocusVisualStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_FocusVisualStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ForceCursor_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_ForceCursor_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Height_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_Height_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_HorizontalAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_HorizontalAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_IsInitialized_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_IsLoaded_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_LayoutTransform_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_LayoutTransform_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Margin_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Margin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MaxHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MaxHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MaxWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MaxWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MinHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MinHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_MinWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_MinWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_OverridesDefaultStyle_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_OverridesDefaultStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Style_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Style_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Tag_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Tag_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_ToolTip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_ToolTip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_UseLayoutRounding_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkElement_UseLayoutRounding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_VerticalAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int FrameworkElement_VerticalAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Width_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float FrameworkElement_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Parent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_TemplatedParent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkElement_Resources_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_Resources_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkElement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetBackground(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetBackground(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetFontFamily(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontFamily(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_GetFontSize(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontSize(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_GetFontStretch(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontStretch(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_GetFontStyle(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontStyle(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_GetFontWeight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetFontWeight(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetForeground(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetForeground(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetStroke(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetStroke(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_GetStrokeThickness(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_SetStrokeThickness(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void TextElement_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_FontFamilyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontFamilyProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_FontSizeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_FontStretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontStretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_FontStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_FontWeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontWeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_ForegroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_ForegroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_StrokeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_StrokeProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_StrokeThicknessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_StrokeThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextElement_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontFamily_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_FontFamily_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_FontSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontStretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_FontStretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontStyle_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_FontStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_FontWeight_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextElement_FontWeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_Foreground_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_Foreground_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_Stroke_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_Stroke_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextElement_StrokeThickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextElement_StrokeThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextElement_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextElement();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Inline();

  [DllImport(Library.Name)]
  public static extern void Inline_TextDecorationsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_TextDecorationsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_SiblingInlines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_PreviousInline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_NextInline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Inline_TextDecorations_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Inline_TextDecorations_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Inline_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InlineCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InlineCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr InlineCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr LineBreak_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LineBreak();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Run__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Run__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern void Run_TextProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Run_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern void Run_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Run_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Run_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Span__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Span__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Span_Inlines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Span_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Bold__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Bold__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Bold_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Italic__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Italic__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Italic_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Underline__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Underline__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Underline_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr RequestNavigateEventArgs_Uri_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RequestNavigateEventArgs_TargetName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_RequestNavigateEventArgs(HandleRef jarg1, HandleRef jarg2, [MarshalAs(UnmanagedType.LPWStr)]string jarg3, [MarshalAs(UnmanagedType.LPWStr)]string jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_RequestNavigateEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Hyperlink__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Hyperlink__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_GetCommand(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_SetCommand(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandParameterProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Hyperlink_NavigateUriProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_NavigateUriProperty_get();

  [DllImport(Library.Name)]
  public static extern void Hyperlink_TargetNameProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_TargetNameProperty_get();

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_NavigateUri_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_NavigateUri_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_TargetName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_TargetName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Hyperlink_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Hyperlink_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr LogicalTreeHelper_GetParent(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint LogicalTreeHelper_GetChildrenCount(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr LogicalTreeHelper_GetChild(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr LogicalTreeHelper_FindLogicalNode(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_FindName__SWIG_0(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_FindName__SWIG_1(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_Seal(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_Resources_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_Resources_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void FrameworkTemplate_VisualTree_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_VisualTree_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkTemplate_CanSeal_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool FrameworkTemplate_IsSealed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr FrameworkTemplate_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ControlTemplate();

  [DllImport(Library.Name)]
  public static extern void ControlTemplate_TargetType_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ControlTemplate_TargetType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ControlTemplate_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ControlTemplate_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr DataTemplateSelector_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DataTemplate();

  [DllImport(Library.Name)]
  public static extern void DataTemplate_DataType_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTemplate_DataType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTemplate_Triggers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTemplate_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_HierarchicalDataTemplate();

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemsSource_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemsSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HierarchicalDataTemplate_ItemTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_ItemTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HierarchicalDataTemplate_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Control();

  [DllImport(Library.Name)]
  public static extern void Control_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_BorderBrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_BorderThicknessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_FontFamilyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontFamilyProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_FontSizeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_FontStretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontStretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_FontStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_FontWeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontWeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_ForegroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_ForegroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_HorizontalContentAlignmentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_HorizontalContentAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_IsTabStopProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_IsTabStopProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_PaddingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_PaddingProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_TabIndexProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_TabIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_TemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_TemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_VerticalContentAlignmentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_VerticalContentAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_IsFocusEngagedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_IsFocusEngagedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_IsFocusEngagementEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_IsFocusEngagementEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void Control_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_BorderBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_BorderThickness_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_BorderThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontFamily_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_FontFamily_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Control_FontSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontStretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_FontStretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontStyle_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_FontStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_FontWeight_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_FontWeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_Foreground_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Foreground_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_HorizontalContentAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_HorizontalContentAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_IsTabStop_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Control_IsTabStop_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_Padding_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Padding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_TabIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_TabIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_Template_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_Template_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_VerticalContentAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Control_VerticalContentAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_IsFocusEngaged_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Control_IsFocusEngaged_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Control_IsFocusEngagementEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Control_IsFocusEngagementEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Control_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContentControl();

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentControl_HasContentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_HasContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentControl_Content_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_Content_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentControl_ContentTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContentControl_HasContent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentControl_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr UserControl_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_UserControl();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Decorator__SWIG_0(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Decorator__SWIG_1();

  [DllImport(Library.Name)]
  public static extern void Decorator_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Decorator_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Decorator_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Panel_GetZIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Panel_SetZIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void Panel_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void Panel_IsItemsHostProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_IsItemsHostProperty_get();

  [DllImport(Library.Name)]
  public static extern void Panel_ZIndexProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_ZIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern void Panel_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Panel_IsItemsHost_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Panel_IsItemsHost_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Panel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentTo(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToFirst(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToLast(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToNext(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToPosition(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_MoveCurrentToPrevious(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Refresh(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_CurrentChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_Get(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Set(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Clear(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Insert(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_Remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemCollection_RemoveAt(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_CollectionChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_CanFilter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_CanGroup_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_CanSort_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_CurrentItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_CurrentPosition_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_IsCurrentAfterLast_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_IsCurrentBeforeFirst_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemCollection_IsEmpty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemCollection_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemsPanelTemplate();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsPanelTemplate_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemsPresenter();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsPresenter_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr GeneratorPosition_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_GeneratorPosition_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_GeneratorPosition(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GeneratorPosition(ref GeneratorPosition jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemsChangedEventArgs_GetActionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsChangedEventArgs_GetPositionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsChangedEventArgs_GetOldPositionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemsChangedEventArgs_GetItemCountHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ItemsChangedEventArgs_GetItemUICountHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ItemsChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_ContainerFromIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_ContainerFromItem(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int ItemContainerGenerator_IndexFromContainer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_ItemFromContainer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int ItemContainerGenerator_Status_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GetItemContainerGeneratorForPanelHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_GeneratorPositionFromIndexHelper(HandleRef jarg1, int jarg2, ref GeneratorPosition jarg3);

  [DllImport(Library.Name)]
  public static extern int ItemContainerGenerator_IndexFromGeneratorPositionHelper(HandleRef jarg1, ref GeneratorPosition jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_StartAtHelper(HandleRef jarg1, ref GeneratorPosition jarg2, int jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GenerateNextHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GenerateNextRealizedHelper(HandleRef jarg1, ref bool jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_StopHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_PrepareItemContainerHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_RemoveAllHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_RemoveHelper(HandleRef jarg1, ref GeneratorPosition jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void ItemContainerGenerator_RecycleHelper(HandleRef jarg1, ref GeneratorPosition jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemContainerGenerator_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ItemsControl();

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsControlFromItemContainer(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ContainerFromElement__SWIG_0(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_GetItemsOwner(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemsControl_IsItemItsOwnContainer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_DisplayMemberPathProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_DisplayMemberPathProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_HasItemsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_HasItemsProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemContainerStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemsPanelProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsPanelProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemsSourceProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ItemsControl_DisplayMemberPath_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_DisplayMemberPath_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ItemsControl_HasItems_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemContainerGenerator_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemsPanel_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemsPanel_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_ItemTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_ItemTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_Items_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_Get_ContainerFromElement(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_Get_ItemsSource(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ItemsControl_Set_ItemsSource(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ItemsControl_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SelectionChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool SelectionChangedEventArgs_ContainsListHelper(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern int SelectionChangedEventArgs_IndexOfListHelper(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr SelectionChangedEventArgs_GetItemListHelper(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern int SelectionChangedEventArgs_CountListHelper(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void delete_SelectionChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Selector_GetIsSelected(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SetIsSelected(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Selector_GetIsSelectionActive(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_IsSelectedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_IsSelectionActiveProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSelectionActiveProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_IsSynchronizedWithCurrentItemProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSynchronizedWithCurrentItemProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedIndexProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedItemProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedItemProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedValuePathProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValuePathProperty_get();

  [DllImport(Library.Name)]
  public static extern void Selector_IsSynchronizedWithCurrentItem_set(HandleRef jarg1, ref NullableBool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_IsSynchronizedWithCurrentItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Selector_SelectedIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedItem_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedValue_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValue_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Selector_SelectedValuePath_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_SelectedValuePath_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Selector_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_AdornerDecorator__SWIG_0(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_AdornerDecorator__SWIG_1();

  [DllImport(Library.Name)]
  public static extern void AdornerDecorator_AddLayer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void AdornerDecorator_RemoveLayer(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr AdornerDecorator_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_CancelPrintCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CancelPrintCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_CloseCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CloseCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_ContextMenuCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_ContextMenuCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_CopyCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CopyCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_CorrectionListCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CorrectionListCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_CutCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_CutCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_DeleteCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_DeleteCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_FindCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_FindCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_HelpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_HelpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_NewCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_NewCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_OpenCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_OpenCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_PasteCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_PasteCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_PrintCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_PrintCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_PrintPreviewCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_PrintPreviewCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_PropertiesCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_PropertiesCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_RedoCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_RedoCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_ReplaceCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_ReplaceCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_SaveCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_SaveCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_SaveAsCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_SaveAsCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_SelectAllCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_SelectAllCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_StopCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_StopCommand_get();

  [DllImport(Library.Name)]
  public static extern void ApplicationCommands_UndoCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ApplicationCommands_UndoCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ExtendSelectionDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ExtendSelectionLeftCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ExtendSelectionRightCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionRightCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ExtendSelectionUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ExtendSelectionUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveFocusBackCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusBackCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveFocusDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveFocusForwardCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusForwardCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveFocusPageDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusPageDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveFocusPageUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusPageUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveFocusUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveFocusUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveLeftCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveRightCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveRightCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveToEndCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToEndCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveToHomeCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToHomeCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveToPageDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToPageDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveToPageUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveToPageUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_MoveUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_MoveUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ScrollByLineCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollByLineCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ScrollPageDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ScrollPageLeftCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ScrollPageRightCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageRightCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_ScrollPageUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_ScrollPageUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_SelectToEndCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToEndCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_SelectToHomeCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToHomeCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_SelectToPageDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToPageDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ComponentCommands_SelectToPageUp_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComponentCommands_SelectToPageUp_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_ClickModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_ClickModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandParameterProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_IsPressedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_IsPressedProperty_get();

  [DllImport(Library.Name)]
  public static extern void ButtonBase_ClickMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ButtonBase_ClickMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ButtonBase_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ButtonBase_IsPressed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ButtonBase_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ButtonBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToggleButton();

  [DllImport(Library.Name)]
  public static extern void ToggleButton_IsCheckedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IsCheckedProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToggleButton_IsThreeStateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IsThreeStateProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToggleButton_IsChecked_set(HandleRef jarg1, ref NullableBool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_IsChecked_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToggleButton_IsThreeState_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToggleButton_IsThreeState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToggleButton_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_AcceptsReturnProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_AcceptsReturnProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_AcceptsTabProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_AcceptsTabProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_CaretBrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_CaretBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_HorizontalScrollBarVisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_HorizontalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_IsReadOnlyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_IsReadOnlyProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_IsSelectionActiveProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_IsSelectionActiveProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_SelectionBrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_SelectionOpacityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionOpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_VerticalScrollBarVisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_VerticalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_AcceptsReturn_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_AcceptsReturn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_AcceptsTab_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_AcceptsTab_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_CaretBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_CaretBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_HorizontalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBoxBase_HorizontalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_IsReadOnly_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_IsReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TextBoxBase_IsSelectionActive_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_SelectionBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_SelectionBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_SelectionOpacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBoxBase_SelectionOpacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBoxBase_VerticalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBoxBase_VerticalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerAction_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TriggerActionCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TriggerActionCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerActionCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerBase_EnterActions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerBase_ExitActions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TriggerCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TriggerCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TriggerCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Trigger();

  [DllImport(Library.Name)]
  public static extern void Trigger_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Trigger_SourceName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_SourceName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Trigger_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Trigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MultiTrigger();

  [DllImport(Library.Name)]
  public static extern IntPtr MultiTrigger_Conditions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiTrigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiTrigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DataTrigger();

  [DllImport(Library.Name)]
  public static extern void DataTrigger_Binding_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_Binding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DataTrigger_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DataTrigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MultiDataTrigger();

  [DllImport(Library.Name)]
  public static extern IntPtr MultiDataTrigger_Conditions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiDataTrigger_Setters_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MultiDataTrigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EventTrigger();

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_Actions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EventTrigger_RoutedEvent_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_RoutedEvent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void EventTrigger_SourceName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_SourceName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EventTrigger_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_2(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_3([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_4(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_5([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_6(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_7([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Binding__SWIG_8(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_GetDoNothing();

  [DllImport(Library.Name)]
  public static extern void Binding_ElementName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_ElementName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_RelativeSource_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_RelativeSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_Path_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_Path_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_Mode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Binding_Mode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_ConverterParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_ConverterParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_UpdateSourceTrigger_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Binding_UpdateSourceTrigger_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_ProvideValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_GetConverterHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Binding_SetConverterHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Binding_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void BindingOperations_ClearAllBindings(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BindingOperations_ClearBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBindingBase(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBindingExpressionBase(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_GetBindingExpression(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BindingOperations_IsDataBound(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BindingOperations_SetBinding(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Border__SWIG_0(bool jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Border__SWIG_1();

  [DllImport(Library.Name)]
  public static extern void Border_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void Border_BorderBrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void Border_BorderThicknessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void Border_CornerRadiusProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_CornerRadiusProperty_get();

  [DllImport(Library.Name)]
  public static extern void Border_PaddingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_PaddingProperty_get();

  [DllImport(Library.Name)]
  public static extern void Border_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_BorderBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_BorderThickness_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_BorderThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_CornerRadius_set(HandleRef jarg1, ref CornerRadius jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_CornerRadius_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Border_Padding_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_Padding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Border_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BulletDecorator();

  [DllImport(Library.Name)]
  public static extern void BulletDecorator_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void BulletDecorator_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BulletDecorator_Bullet_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_Bullet_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BulletDecorator_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Button();

  [DllImport(Library.Name)]
  public static extern void Button_IsCancelProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Button_IsCancelProperty_get();

  [DllImport(Library.Name)]
  public static extern void Button_IsDefaultProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Button_IsDefaultProperty_get();

  [DllImport(Library.Name)]
  public static extern void Button_IsDefaultedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Button_IsDefaultedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Button_IsCancel_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Button_IsCancel_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Button_IsDefault_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Button_IsDefault_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Button_IsDefaulted_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Button_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Canvas();

  [DllImport(Library.Name)]
  public static extern float Canvas_GetLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetLeft(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Canvas_GetTop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetTop(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Canvas_GetRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetRight(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Canvas_GetBottom(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Canvas_SetBottom(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void Canvas_BottomProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_BottomProperty_get();

  [DllImport(Library.Name)]
  public static extern void Canvas_LeftProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_LeftProperty_get();

  [DllImport(Library.Name)]
  public static extern void Canvas_RightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_RightProperty_get();

  [DllImport(Library.Name)]
  public static extern void Canvas_TopProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_TopProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Canvas_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CheckBox();

  [DllImport(Library.Name)]
  public static extern IntPtr CheckBox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CollectionView();

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_GetItemAt(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern int CollectionView_IndexOf(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_Contains(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentTo(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToFirst(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToLast(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToNext(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToPosition(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_MoveCurrentToPrevious(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CollectionView_Refresh(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_CurrentChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_CollectionChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern uint CollectionView_Count_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_CanFilter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_CanGroup_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_CanSort_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_CurrentItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int CollectionView_CurrentPosition_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_IsCurrentAfterLast_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_IsCurrentBeforeFirst_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CollectionView_IsEmpty_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_CreateCollectionView(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_GetSourceCollectionHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionView_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CollectionViewSource();

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_CollectionViewTypeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_CollectionViewTypeProperty_get();

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_SourceProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_SourceProperty_get();

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_ViewProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_ViewProperty_get();

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_CollectionViewType_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_CollectionViewType_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CollectionViewSource_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_View_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CollectionViewSource_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListBoxItem();

  [DllImport(Library.Name)]
  public static extern void ListBoxItem_IsSelectedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBoxItem_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern void ListBoxItem_IsSelected_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ListBoxItem_IsSelected_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBoxItem_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ComboBoxItem();

  [DllImport(Library.Name)]
  public static extern void ComboBoxItem_IsHighlightedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBoxItem_IsHighlightedProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBoxItem_IsHighlighted_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBoxItem_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ComboBox();

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsDropDownOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_IsDropDownOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsEditableProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_IsEditableProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsReadOnlyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_IsReadOnlyProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_MaxDropDownHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_MaxDropDownHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_SelectionBoxItemProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItemProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_SelectionBoxItemTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItemTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_StaysOpenOnEditProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_StaysOpenOnEditProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_TextProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsDropDownOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_IsDropDownOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsEditable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_IsEditable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_IsReadOnly_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_IsReadOnly_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_MaxDropDownHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ComboBox_MaxDropDownHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_SelectionBoxItemTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_StaysOpenOnEdit_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ComboBox_StaysOpenOnEdit_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ComboBox_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ComboBox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void CanExecuteRoutedEventArgs_command_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CanExecuteRoutedEventArgs_command_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CanExecuteRoutedEventArgs_parameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CanExecuteRoutedEventArgs_parameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CanExecuteRoutedEventArgs_canExecute_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CanExecuteRoutedEventArgs_canExecute_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CanExecuteRoutedEventArgs_continueRouting_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool CanExecuteRoutedEventArgs_continueRouting_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CanExecuteRoutedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_CanExecuteRoutedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ExecutedRoutedEventArgs_command_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ExecutedRoutedEventArgs_command_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ExecutedRoutedEventArgs_parameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ExecutedRoutedEventArgs_parameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ExecutedRoutedEventArgs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_ExecutedRoutedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_2(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_3(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBinding__SWIG_4(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr CommandBinding_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void CommandBinding_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr CommandBinding_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBindingCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CommandBindingCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr CommandBindingCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Condition();

  [DllImport(Library.Name)]
  public static extern void Condition_Binding_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_Binding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Condition_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Condition_SourceName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_SourceName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Condition_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Condition_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ConditionCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ConditionCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ConditionCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContentPresenter();

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentSourceProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentSourceProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_Content_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_Content_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentSource_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentSource_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContentPresenter_ContentTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_ContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContentPresenter_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ContextMenu();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_HasDropShadowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_IsOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementRectangleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_StaysOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_StaysOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenu_HasDropShadow_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenu_HasDropShadow_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_HorizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenu_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_IsOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenu_IsOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ContextMenu_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementRectangle_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementRectangle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_PlacementTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_PlacementTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_StaysOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenu_StaysOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenu_VerticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenu_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenu_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_ContextMenuProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_HasDropShadowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_IsEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_IsEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_PlacementRectangleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_PlacementTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_ShowOnDisabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ShowOnDisabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_ContextMenuClosingEvent_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ContextMenuClosingEvent_get();

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_ContextMenuOpeningEvent_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_ContextMenuOpeningEvent_get();

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_GetContextMenu(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetContextMenu(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenuService_GetHasDropShadow(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetHasDropShadow(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenuService_GetHorizontalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenuService_GetIsEnabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetIsEnabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ContextMenuService_GetPlacement(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetPlacement(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_GetPlacementRectangle(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetPlacementRectangle(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ContextMenuService_GetPlacementTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetPlacementTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ContextMenuService_GetShowOnDisabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetShowOnDisabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern float ContextMenuService_GetVerticalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ContextMenuService_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DashStyle();

  [DllImport(Library.Name)]
  public static extern void DashStyle_DashesProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_DashesProperty_get();

  [DllImport(Library.Name)]
  public static extern void DashStyle_OffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_OffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void DashStyle_Dashes_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_Dashes_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DashStyle_Offset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DashStyle_Offset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DashStyle_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DockPanel();

  [DllImport(Library.Name)]
  public static extern int DockPanel_GetDock(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DockPanel_SetDock(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void DockPanel_DockProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DockPanel_DockProperty_get();

  [DllImport(Library.Name)]
  public static extern void DockPanel_LastChildFillProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DockPanel_LastChildFillProperty_get();

  [DllImport(Library.Name)]
  public static extern void DockPanel_LastChildFill_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DockPanel_LastChildFill_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DockPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void Shape_FillProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_FillProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashArrayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashArrayProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashCapProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashCapProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeEndLineCapProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeEndLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeLineJoinProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeLineJoinProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeMiterLimitProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeMiterLimitProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeStartLineCapProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeStartLineCapProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeThicknessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void Shape_Fill_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_Fill_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_Stroke_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_Stroke_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashArray_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_StrokeDashArray_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeDashCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeDashOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_StrokeDashOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeEndLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeEndLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeLineJoin_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeLineJoin_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeMiterLimit_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_StrokeMiterLimit_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeStartLineCap_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Shape_StrokeStartLineCap_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Shape_StrokeThickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Shape_StrokeThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Shape_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Rectangle();

  [DllImport(Library.Name)]
  public static extern void Rectangle_RadiusXProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Rectangle_RadiusXProperty_get();

  [DllImport(Library.Name)]
  public static extern void Rectangle_RadiusYProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Rectangle_RadiusYProperty_get();

  [DllImport(Library.Name)]
  public static extern void Rectangle_RadiusX_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Rectangle_RadiusX_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Rectangle_RadiusY_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Rectangle_RadiusY_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Rectangle_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Ellipse();

  [DllImport(Library.Name)]
  public static extern IntPtr Ellipse_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Line();

  [DllImport(Library.Name)]
  public static extern void Line_X1Property_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Line_X1Property_get();

  [DllImport(Library.Name)]
  public static extern void Line_Y1Property_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Line_Y1Property_get();

  [DllImport(Library.Name)]
  public static extern void Line_X2Property_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Line_X2Property_get();

  [DllImport(Library.Name)]
  public static extern void Line_Y2Property_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Line_Y2Property_get();

  [DllImport(Library.Name)]
  public static extern void Line_X1_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_X1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Line_Y1_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_Y1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Line_X2_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_X2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Line_Y2_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Line_Y2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Line_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Path();

  [DllImport(Library.Name)]
  public static extern void Path_DataProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Path_DataProperty_get();

  [DllImport(Library.Name)]
  public static extern void Path_Data_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Path_Data_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Path_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_HeaderedContentControl();

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HasHeaderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HasHeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool HeaderedContentControl_HasHeader_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_Header_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_Header_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedContentControl_HeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_HeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedContentControl_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Expander();

  [DllImport(Library.Name)]
  public static extern void Expander_ExpandDirectionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_ExpandDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Expander_IsExpandedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_IsExpandedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Expander_ExpandDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Expander_ExpandDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Expander_IsExpanded_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Expander_IsExpanded_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Expander_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_FormattedText();

  [DllImport(Library.Name)]
  public static extern IntPtr FormattedText_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr GridLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_GridLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_GridLength(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GridLength(ref GridLength jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridLength_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out GridLength jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DefinitionBase();

  [DllImport(Library.Name)]
  public static extern void DefinitionBase_SharedSizeGroupProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DefinitionBase_SharedSizeGroupProperty_get();

  [DllImport(Library.Name)]
  public static extern void DefinitionBase_SharedSizeGroup_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DefinitionBase_SharedSizeGroup_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DefinitionBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColumnDefinition();

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_WidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_WidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_MinWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_MinWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_MaxWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_MaxWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_Width_set(HandleRef jarg1, ref GridLength jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_MinWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ColumnDefinition_MinWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColumnDefinition_MaxWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ColumnDefinition_MaxWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinition_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColumnDefinitionCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColumnDefinitionCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColumnDefinitionCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RowDefinition();

  [DllImport(Library.Name)]
  public static extern void RowDefinition_HeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_HeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void RowDefinition_MinHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_MinHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void RowDefinition_MaxHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_MaxHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void RowDefinition_Height_set(HandleRef jarg1, ref GridLength jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_Height_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RowDefinition_MaxHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RowDefinition_MaxHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RowDefinition_MinHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RowDefinition_MinHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinition_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RowDefinitionCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RowDefinitionCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RowDefinitionCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Grid();

  [DllImport(Library.Name)]
  public static extern uint Grid_GetColumn(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetColumn(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern uint Grid_GetColumnSpan(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetColumnSpan(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Grid_GetIsSharedSizeScope(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetIsSharedSizeScope(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern uint Grid_GetRow(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetRow(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern uint Grid_GetRowSpan(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Grid_SetRowSpan(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern void Grid_ColumnProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_ColumnProperty_get();

  [DllImport(Library.Name)]
  public static extern void Grid_ColumnSpanProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_ColumnSpanProperty_get();

  [DllImport(Library.Name)]
  public static extern void Grid_IsSharedSizeScopeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_IsSharedSizeScopeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Grid_RowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_RowProperty_get();

  [DllImport(Library.Name)]
  public static extern void Grid_RowSpanProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_RowSpanProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_ColumnDefinitions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_RowDefinitions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Grid_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_UniformGrid();

  [DllImport(Library.Name)]
  public static extern void UniformGrid_FirstColumnProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_FirstColumnProperty_get();

  [DllImport(Library.Name)]
  public static extern void UniformGrid_ColumnsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_ColumnsProperty_get();

  [DllImport(Library.Name)]
  public static extern void UniformGrid_RowsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_RowsProperty_get();

  [DllImport(Library.Name)]
  public static extern void UniformGrid_FirstColumn_set(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern uint UniformGrid_FirstColumn_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UniformGrid_Columns_set(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern uint UniformGrid_Columns_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void UniformGrid_Rows_set(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern uint UniformGrid_Rows_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr UniformGrid_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GroupBox();

  [DllImport(Library.Name)]
  public static extern IntPtr GroupBox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_HeaderedItemsControl();

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HasHeaderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HasHeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderStringFormatProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool HeaderedItemsControl_HasHeader_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_Header_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_Header_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void HeaderedItemsControl_HeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_HeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr HeaderedItemsControl_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Image();

  [DllImport(Library.Name)]
  public static extern void Image_SourceProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Image_SourceProperty_get();

  [DllImport(Library.Name)]
  public static extern void Image_StretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Image_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void Image_StretchDirectionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Image_StretchDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Image_Source_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Image_Source_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Image_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Image_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Image_StretchDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Image_StretchDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Image_GetStaticType();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool InputGesture_Matches(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr InputGesture_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputGestureCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputGestureCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr InputGestureCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyGesture__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyGesture__SWIG_1(int jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyGesture__SWIG_2(int jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyGesture_Key_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int KeyGesture_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyGesture_DisplayString_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyGesture_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBinding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBinding__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void InputBinding_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InputBinding_CommandTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CommandTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InputBinding_Gesture_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_Gesture_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_CreateInputBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void InputBinding_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBinding_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBindingCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_InputBindingCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr InputBindingCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyBinding__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyBinding__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyBinding__SWIG_2(HandleRef jarg1, int jarg2, uint jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_KeyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_ModifiersProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyBinding_Key_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyBinding_Key_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyBinding_Modifiers_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyBinding_Modifiers_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_CreateKeyBinding(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyBinding_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardNavigation__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeyboardNavigation__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetTabNavigation(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetTabNavigation(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetControlTabNavigation(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetControlTabNavigation(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetDirectionalNavigation(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetDirectionalNavigation(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyboardNavigation_GetAcceptsReturn(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetAcceptsReturn(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyboardNavigation_GetIsTabStop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetIsTabStop(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int KeyboardNavigation_GetTabIndex(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_SetTabIndex(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyboardNavigation_MoveFocus(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_PredictFocus(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_AcceptsReturnProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_AcceptsReturnProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_ControlTabNavigationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_ControlTabNavigationProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_DirectionalNavigationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_DirectionalNavigationProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_IsTabStopProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_IsTabStopProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_TabIndexProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_TabIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern void KeyboardNavigation_TabNavigationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_TabNavigationProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr KeyboardNavigation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Label_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Label();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListBox();

  [DllImport(Library.Name)]
  public static extern void ListBox_SelectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ListBox_UnselectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ListBox_ScrollIntoView(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ListBox_SelectedItemsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_SelectedItemsProperty_get();

  [DllImport(Library.Name)]
  public static extern void ListBox_SelectionModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_SelectionModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ListBox_SelectionMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ListBox_SelectionMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_GetSelectedItemsHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListBox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Menu();

  [DllImport(Library.Name)]
  public static extern void Menu_IsMainMenuProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Menu_IsMainMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern void Menu_IsMainMenu_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Menu_IsMainMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Menu_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_MenuItem();

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_GetCommandTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_SetCommandTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void MenuItem_CommandParameterProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandParameterProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_CommandProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_CommandTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_IconProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IconProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_InputGestureTextProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_InputGestureTextProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsCheckableProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsCheckableProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsCheckedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsCheckedProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsHighlightedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsHighlightedProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsPressedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsPressedProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsSubmenuOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_IsSubmenuOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_RoleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_RoleProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_StaysOpenOnClickProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_StaysOpenOnClickProperty_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_SeparatorStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_SeparatorStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void MenuItem_CommandParameter_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_CommandParameter_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_Icon_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_Icon_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_InputGestureText_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_InputGestureText_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsCheckable_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsCheckable_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsChecked_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsChecked_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsHighlighted_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsPressed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_IsSubmenuOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_IsSubmenuOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int MenuItem_Role_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_StaysOpenOnClick_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool MenuItem_StaysOpenOnClick_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_GetCommandHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void MenuItem_SetCommandHelper(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr MenuItem_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_NameScope();

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_GetNameScope(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void NameScope_SetNameScope(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_FindName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void NameScope_RegisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void NameScope_UnregisterName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern void NameScope_UpdateName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void NameScope_NameScopeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_NameScopeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr NameScope_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Page();

  [DllImport(Library.Name)]
  public static extern void Page_Title_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Page_Title_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Page_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PasswordBox();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_CaretBrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_CaretBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_MaxLengthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_MaxLengthProperty_get();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_PasswordCharProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_PasswordCharProperty_get();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectionBrushProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_SelectionBrushProperty_get();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectionOpacityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_SelectionOpacityProperty_get();

  [DllImport(Library.Name)]
  public static extern void PasswordBox_CaretBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_CaretBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_MaxLength_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int PasswordBox_MaxLength_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_PasswordChar_set(HandleRef jarg1, char jarg2);

  [DllImport(Library.Name)]
  public static extern char PasswordBox_PasswordChar_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_Password_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_Password_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectionBrush_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_SelectionBrush_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PasswordBox_SelectionOpacity_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PasswordBox_SelectionOpacity_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PasswordBox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Popup();

  [DllImport(Library.Name)]
  public static extern void Popup_AllowsTransparencyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_AllowsTransparencyProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_ChildProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_ChildProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_HasDropShadowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_IsOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_PlacementRectangleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_PlacementTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_PopupAnimationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PopupAnimationProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_StaysOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_StaysOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Popup_AllowsTransparency_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_AllowsTransparency_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_HasDropShadow_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_HasDropShadow_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_HorizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Popup_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_IsOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_IsOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Popup_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_PlacementRectangle_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_PlacementRectangle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_PopupAnimation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Popup_PopupAnimation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_StaysOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Popup_StaysOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Popup_VerticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Popup_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Popup_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void RangeBase_LargeChangeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_LargeChangeProperty_get();

  [DllImport(Library.Name)]
  public static extern void RangeBase_MaximumProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_MaximumProperty_get();

  [DllImport(Library.Name)]
  public static extern void RangeBase_MinimumProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_MinimumProperty_get();

  [DllImport(Library.Name)]
  public static extern void RangeBase_SmallChangeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_SmallChangeProperty_get();

  [DllImport(Library.Name)]
  public static extern void RangeBase_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void RangeBase_LargeChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_LargeChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_Maximum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_Maximum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_Minimum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_Minimum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_SmallChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_SmallChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RangeBase_Value_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float RangeBase_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RangeBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ProgressBar();

  [DllImport(Library.Name)]
  public static extern void ProgressBar_IsIndeterminateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ProgressBar_IsIndeterminateProperty_get();

  [DllImport(Library.Name)]
  public static extern void ProgressBar_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ProgressBar_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ProgressBar_IsIndeterminate_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ProgressBar_IsIndeterminate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ProgressBar_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ProgressBar_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ProgressBar_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PropertyPath__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PropertyPath__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_PropertyPath__SWIG_2(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PropertyPath_Path_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyPath_Path_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PropertyPath_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollEventArgs(HandleRef jarg1, float jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern float ScrollEventArgs_GetNewValueHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ScrollEventArgs_GetScrollEventTypeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ScrollEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollBar();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ViewportSizeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ViewportSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_DeferScrollToHorizontalOffsetCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_DeferScrollToHorizontalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_DeferScrollToVerticalOffsetCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_DeferScrollToVerticalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_LineDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_LineLeftCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_LineRightCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineRightCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_LineUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_LineUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_PageDownCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageDownCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_PageLeftCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageLeftCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_PageRightCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageRightCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_PageUpCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_PageUpCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollHereCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollHereCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToBottomCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToBottomCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToEndCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToEndCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToHomeCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToHomeCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToHorizontalOffsetCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToHorizontalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToLeftEndCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToLeftEndCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToRightEndCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToRightEndCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToTopCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToTopCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ScrollToVerticalOffsetCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_ScrollToVerticalOffsetCommand_get();

  [DllImport(Library.Name)]
  public static extern void ScrollBar_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollBar_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollBar_ViewportSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollBar_ViewportSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_Track_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollBar_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollContentPresenter();

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelLeft__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelLeft__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelRight__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelRight__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelUp__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelUp__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelDown__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_MouseWheelDown__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_MakeVisible(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanContentScrollProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_CanContentScrollProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanContentScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollContentPresenter_CanContentScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanHorizontallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollContentPresenter_CanHorizontallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_CanVerticallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollContentPresenter_CanVerticallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollContentPresenter_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollContentPresenter_ScrollOwner_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_ScrollOwner_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollContentPresenter_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr PanningMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_PanningMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_PanningMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_PanningMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetExtentHeightHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetExtentHeightChangeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetExtentWidthHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetExtentWidthChangeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetHorizontalChangeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetHorizontalOffsetHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetVerticalChangeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetVerticalOffsetHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetViewportHeightHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetViewportHeightChangeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetViewportWidthHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollChangedEventArgs_GetViewportWidthChangeHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void delete_ScrollChangedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ScrollViewer();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_GetCanContentScroll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetCanContentScroll(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_GetHorizontalScrollBarVisibility(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetHorizontalScrollBarVisibility(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_GetVerticalScrollBarVisibility(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetVerticalScrollBarVisibility(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_GetIsDeferredScrollingEnabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetIsDeferredScrollingEnabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_GetPanningMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetPanningMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_GetPanningDeceleration(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetPanningDeceleration(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_GetPanningRatio(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_SetPanningRatio(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToLeftEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToRightEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToTop(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToBottom(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToHome(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToEnd(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollToVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_InvalidateScrollInfo(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_CanContentScrollProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_CanContentScrollProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ComputedHorizontalScrollBarVisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ComputedHorizontalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ComputedVerticalScrollBarVisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ComputedVerticalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ExtentHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ExtentHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ExtentWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ExtentWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_HorizontalScrollBarVisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_HorizontalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_IsDeferredScrollingEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_IsDeferredScrollingEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollableHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ScrollableHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ScrollableWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ScrollableWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_VerticalScrollBarVisibilityProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_VerticalScrollBarVisibilityProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ViewportHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ViewportHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_ViewportWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_ViewportWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_PanningModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningDecelerationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_PanningDecelerationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningRatioProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_PanningRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_CanContentScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_CanContentScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_HorizontalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_HorizontalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_VerticalScrollBarVisibility_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_VerticalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_IsDeferredScrollingEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ScrollViewer_IsDeferredScrollingEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_PanningMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningDeceleration_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_PanningDeceleration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ScrollViewer_PanningRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_PanningRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_ComputedHorizontalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ScrollViewer_ComputedVerticalScrollBarVisibility_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ScrollableWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ScrollableHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float ScrollViewer_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollViewer_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Separator_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Separator();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Setter();

  [DllImport(Library.Name)]
  public static extern void Setter_TargetName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_TargetName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Setter_Property_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_Property_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Setter_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Setter_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Slider();

  [DllImport(Library.Name)]
  public static extern void Slider_DelayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_DelayProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IntervalProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IntervalProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IsDirectionReversedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsDirectionReversedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IsMoveToPointEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsMoveToPointEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IsSelectionRangeEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsSelectionRangeEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IsSnapToTickEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IsSnapToTickEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_SelectionEndProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_SelectionEndProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_SelectionStartProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_SelectionStartProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_TickFrequencyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_TickFrequencyProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_TickPlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_TickPlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_TicksProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_TicksProperty_get();

  [DllImport(Library.Name)]
  public static extern void Slider_DecreaseLargeCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_DecreaseLargeCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_DecreaseSmallCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_DecreaseSmallCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IncreaseLargeCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IncreaseLargeCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_IncreaseSmallCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_IncreaseSmallCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_MaximizeValueCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_MaximizeValueCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_MinimizeValueCommand_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_MinimizeValueCommand_get();

  [DllImport(Library.Name)]
  public static extern void Slider_Delay_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_Delay_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_Interval_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_Interval_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsDirectionReversed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsDirectionReversed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsMoveToPointEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsMoveToPointEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsSelectionRangeEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsSelectionRangeEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_IsSnapToTickEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Slider_IsSnapToTickEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_SelectionStart_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Slider_SelectionStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_SelectionEnd_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Slider_SelectionEnd_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_TickFrequency_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Slider_TickFrequency_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_TickPlacement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Slider_TickPlacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Slider_Ticks_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_Ticks_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Slider_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StackPanel();

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelLeft__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelLeft__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelRight__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelRight__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelUp__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelUp__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelDown__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_MouseWheelDown__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void StackPanel_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_MakeVisible(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern void StackPanel_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void StackPanel_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int StackPanel_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_CanHorizontallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool StackPanel_CanHorizontallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_CanVerticallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool StackPanel_CanVerticallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float StackPanel_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StackPanel_ScrollOwner_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_ScrollOwner_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StackPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizationCacheLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_VirtualizationCacheLength_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_VirtualizationCacheLength(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VirtualizationCacheLength(ref VirtualizationCacheLength jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizationCacheLengthUnit_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_VirtualizationCacheLengthUnit_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_VirtualizationCacheLengthUnit(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VirtualizationCacheLengthUnit(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizationMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_VirtualizationMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_VirtualizationMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_VirtualizationMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ScrollUnit_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ScrollUnit_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ScrollUnit(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ScrollUnit(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_GetCacheLength(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetCacheLength(HandleRef jarg1, ref VirtualizationCacheLength jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingPanel_GetCacheLengthUnit(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetCacheLengthUnit(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingPanel_GetIsContainerVirtualizable(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetIsContainerVirtualizable(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingPanel_GetIsVirtualizing(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetIsVirtualizing(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingPanel_GetScrollUnit(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetScrollUnit(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingPanel_GetVirtualizationMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_SetVirtualizationMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_BringIndexIntoView(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_CacheLengthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_CacheLengthProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_CacheLengthUnitProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_CacheLengthUnitProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_IsContainerVirtualizableProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_IsContainerVirtualizableProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_IsVirtualizingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_IsVirtualizingProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_ScrollUnitProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_ScrollUnitProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingPanel_VirtualizationModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_VirtualizationModeProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_GetGeneratorHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VirtualizingStackPanel();

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_LineDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageLeft(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageRight(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageUp(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_PageDown(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelLeft__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelLeft__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelRight__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelRight__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelUp__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelUp__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelDown__SWIG_0(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_MouseWheelDown__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_MakeVisible(HandleRef jarg1, HandleRef jarg2, ref Rect jarg3);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int VirtualizingStackPanel_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_CanHorizontallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingStackPanel_CanHorizontallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_CanVerticallyScroll_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VirtualizingStackPanel_CanVerticallyScroll_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ExtentWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ExtentHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ViewportWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_ViewportHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float VirtualizingStackPanel_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VirtualizingStackPanel_ScrollOwner_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_ScrollOwner_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VirtualizingStackPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StatusBar();

  [DllImport(Library.Name)]
  public static extern void StatusBar_SeparatorStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StatusBar_SeparatorStyleKey_get();

  [DllImport(Library.Name)]
  public static extern IntPtr StatusBar_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr StatusBarItem_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StatusBarItem();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TabControl();

  [DllImport(Library.Name)]
  public static extern void TabControl_ContentTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_ContentTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_SelectedContentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_SelectedContentTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_SelectedContentTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_TabStripPlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_TabStripPlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabControl_ContentTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TabControl_ContentTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_ContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_SelectedContentTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TabControl_TabStripPlacement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TabControl_TabStripPlacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabControl_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TabItem();

  [DllImport(Library.Name)]
  public static extern void TabItem_IsSelectedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabItem_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabItem_TabStripPlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabItem_TabStripPlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void TabItem_IsSelected_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TabItem_IsSelected_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int TabItem_TabStripPlacement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TabItem_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TabPanel();

  [DllImport(Library.Name)]
  public static extern IntPtr TabPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RadioButton();

  [DllImport(Library.Name)]
  public static extern void RadioButton_GroupNameProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadioButton_GroupNameProperty_get();

  [DllImport(Library.Name)]
  public static extern void RadioButton_GroupName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RadioButton_GroupName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RadioButton_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RepeatButton();

  [DllImport(Library.Name)]
  public static extern void RepeatButton_DelayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatButton_DelayProperty_get();

  [DllImport(Library.Name)]
  public static extern void RepeatButton_IntervalProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatButton_IntervalProperty_get();

  [DllImport(Library.Name)]
  public static extern void RepeatButton_Delay_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RepeatButton_Delay_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RepeatButton_Interval_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int RepeatButton_Interval_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatButton_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedCommand([MarshalAs(UnmanagedType.LPWStr)]string jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RoutedCommand_CanExecute__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void RoutedCommand_Execute__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_GetName(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_GetOwnerType(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_CanExecuteChanged(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RoutedCommand_CanExecute__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void RoutedCommand_Execute__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_InputGestures_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedCommand_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RoutedUICommand([MarshalAs(UnmanagedType.LPWStr)]string jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void RoutedUICommand_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedUICommand_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RoutedUICommand_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextBlock__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextBlock__SWIG_1([MarshalAs(UnmanagedType.LPWStr)]string jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontFamilyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontFamilyProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontSizeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontStretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontStretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontWeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontWeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_ForegroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_ForegroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_LineHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_LineHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_PaddingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_PaddingProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_StrokeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_StrokeProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_StrokeThicknessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_StrokeThicknessProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextAlignmentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextDecorationsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextDecorationsProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextTrimmingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextTrimmingProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextWrappingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_TextWrappingProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBlock_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontFamily_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_FontFamily_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBlock_FontSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontStretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_FontStretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontStyle_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_FontStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_FontWeight_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_FontWeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Foreground_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Foreground_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Inlines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_LineHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBlock_LineHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Padding_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Padding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Stroke_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Stroke_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_StrokeThickness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TextBlock_StrokeThickness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextDecorations_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextDecorations_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextTrimming_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextTrimming_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBlock_TextWrapping_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBlock_TextWrapping_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_ToStringHelper(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBlock_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TextBoxView_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TextBox();

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectAll(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_GetCompositionUnderline(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  public static extern void TextBox_AddCompositionUnderline(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void TextBox_MaxLengthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_MaxLengthProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_MaxLinesProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_MaxLinesProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_MinLinesProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_MinLinesProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_TextAlignmentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextAlignmentProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_TextProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_TextWrappingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_TextWrappingProperty_get();

  [DllImport(Library.Name)]
  public static extern void TextBox_CaretIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_CaretIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_MaxLength_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_MaxLength_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_MaxLines_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_MaxLines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_MinLines_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_MinLines_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectedText_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_SelectedText_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectionLength_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_SelectionLength_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectionStart_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_SelectionStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_TextAlignment_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_TextAlignment_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_Text_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_Text_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_TextWrapping_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TextBox_TextWrapping_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TextBox_SelectHelper(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr TextBox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void DragCompletedEventArgs_canceled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool DragCompletedEventArgs_canceled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragCompletedEventArgs_horizontalChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DragCompletedEventArgs_horizontalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragCompletedEventArgs_verticalChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DragCompletedEventArgs_verticalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DragCompletedEventArgs(HandleRef jarg1, bool jarg2, float jarg3, float jarg4);

  [DllImport(Library.Name)]
  public static extern void delete_DragCompletedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragStartedEventArgs_horizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DragStartedEventArgs_horizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragStartedEventArgs_verticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DragStartedEventArgs_verticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DragStartedEventArgs(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_DragStartedEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragDeltaEventArgs_horizontalChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DragDeltaEventArgs_horizontalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DragDeltaEventArgs_verticalChange_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DragDeltaEventArgs_verticalChange_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_DragDeltaEventArgs(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern void delete_DragDeltaEventArgs(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Thumb();

  [DllImport(Library.Name)]
  public static extern void Thumb_CancelDrag(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Thumb_IsDraggingProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Thumb_IsDraggingProperty_get();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Thumb_IsDragging_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Thumb_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TickBar();

  [DllImport(Library.Name)]
  public static extern void TickBar_FillProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_FillProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_IsDirectionReversedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_IsDirectionReversedProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_IsSelectionRangeEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_IsSelectionRangeEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_MaximumProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_MaximumProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_MinimumProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_MinimumProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_ReservedSpaceProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_ReservedSpaceProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_SelectionEndProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_SelectionEndProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_SelectionStartProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_SelectionStartProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_TickFrequencyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_TickFrequencyProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_TicksProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_TicksProperty_get();

  [DllImport(Library.Name)]
  public static extern void TickBar_Fill_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_Fill_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_IsDirectionReversed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TickBar_IsDirectionReversed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_IsSelectionRangeEnabled_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TickBar_IsSelectionRangeEnabled_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Maximum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_Maximum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Minimum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_Minimum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int TickBar_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_ReservedSpace_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_ReservedSpace_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_SelectionEnd_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_SelectionEnd_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_SelectionStart_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_SelectionStart_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_TickFrequency_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float TickBar_TickFrequency_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TickBar_Ticks_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_Ticks_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TickBar_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBar();

  [DllImport(Library.Name)]
  public static extern int ToolBar_GetOverflowMode(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_SetOverflowMode(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBar_GetIsOverflowItem(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_BandIndexProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_BandIndexProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_BandProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_BandProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_HasOverflowItemsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_HasOverflowItemsProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_IsOverflowItemProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_IsOverflowItemProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_IsOverflowOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_IsOverflowOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_OverflowModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_OverflowModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_ButtonStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_ButtonStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_ToggleButtonStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_ToggleButtonStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_CheckBoxStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_CheckBoxStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_RadioButtonStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_RadioButtonStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_TextBoxStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_TextBoxStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_ComboBoxStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_ComboBoxStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_SeparatorStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_SeparatorStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_MenuStyleKey_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_MenuStyleKey_get();

  [DllImport(Library.Name)]
  public static extern void ToolBar_Band_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolBar_Band_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_BandIndex_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolBar_BandIndex_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBar_HasOverflowItems_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBar_IsOverflowOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBar_IsOverflowOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int ToolBar_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBar_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBarOverflowPanel();

  [DllImport(Library.Name)]
  public static extern void ToolBarOverflowPanel_WrapWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarOverflowPanel_WrapWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBarOverflowPanel_WrapWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolBarOverflowPanel_WrapWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarOverflowPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBarPanel();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolBarTray();

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolBarTray_GetIsLocked(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_SetIsLocked(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_BackgroundProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_BackgroundProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_IsLockedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_IsLockedProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_Background_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_Background_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolBarTray_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolBarTray_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolBarTray_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ToolTip();

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_GetPopup(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_HasDropShadowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_IsOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementRectangleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_StaysOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_StaysOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTip_HasDropShadow_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTip_HasDropShadow_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_HorizontalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTip_HorizontalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_IsOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTip_IsOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_Placement_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTip_Placement_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementRectangle_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementRectangle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_PlacementTarget_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_PlacementTarget_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_StaysOpen_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTip_StaysOpen_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTip_VerticalOffset_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTip_VerticalOffset_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTip_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_BetweenShowDelayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_BetweenShowDelayProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_HasDropShadowProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_HasDropShadowProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_HorizontalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_HorizontalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_InitialShowDelayProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_InitialShowDelayProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_IsEnabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_IsEnabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_IsOpenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_IsOpenProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_PlacementProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_PlacementProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_PlacementRectangleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_PlacementRectangleProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_PlacementTargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_PlacementTargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ShowDurationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ShowDurationProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ShowOnDisabledProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ShowOnDisabledProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ToolTipProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_VerticalOffsetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_VerticalOffsetProperty_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ToolTipClosingEvent_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ToolTipClosingEvent_get();

  [DllImport(Library.Name)]
  public static extern void ToolTipService_ToolTipOpeningEvent_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_ToolTipOpeningEvent_get();

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetBetweenShowDelay(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetBetweenShowDelay(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetHasDropShadow(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetHasDropShadow(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTipService_GetHorizontalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetHorizontalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetInitialShowDelay(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetInitialShowDelay(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetIsEnabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetIsEnabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetIsOpen(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetIsOpen(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetPlacement(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetPlacement(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_GetPlacementRectangle(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetPlacementRectangle(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_GetPlacementTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetPlacementTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern int ToolTipService_GetShowDuration(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetShowDuration(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ToolTipService_GetShowOnDisabled(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetShowOnDisabled(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ToolTipService_GetToolTip(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetToolTip(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern float ToolTipService_GetVerticalOffset(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ToolTipService_SetVerticalOffset(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_Track();

  [DllImport(Library.Name)]
  public static extern float Track_ValueFromDistance(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport(Library.Name)]
  public static extern float Track_ValueFromPoint(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern void Track_IsDirectionReversedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_IsDirectionReversedProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_MaximumProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_MaximumProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_MinimumProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_MinimumProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_ViewportSizeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_ViewportSizeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Track_DecreaseRepeatButton_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_DecreaseRepeatButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_IncreaseRepeatButton_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_IncreaseRepeatButton_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_IsDirectionReversed_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Track_IsDirectionReversed_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Maximum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_Maximum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Minimum_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_Minimum_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Track_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Thumb_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_Thumb_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_Value_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Track_ViewportSize_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Track_ViewportSize_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Track_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TreeView();

  [DllImport(Library.Name)]
  public static extern void TreeView_SelectedItemProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TreeView_SelectedItemProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr TreeView_SelectedItem_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TreeView_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_TreeViewItem();

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsExpandedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_IsExpandedProperty_get();

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsSelectedProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_IsSelectedProperty_get();

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsSelectionActiveProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_IsSelectionActiveProperty_get();

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsExpanded_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TreeViewItem_IsExpanded_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsSelected_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TreeViewItem_IsSelected_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void TreeViewItem_IsSelectionActive_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool TreeViewItem_IsSelectionActive_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TreeViewItem_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Viewbox();

  [DllImport(Library.Name)]
  public static extern void Viewbox_StretchDirectionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_StretchDirectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void Viewbox_StretchProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_StretchProperty_get();

  [DllImport(Library.Name)]
  public static extern void Viewbox_StretchDirection_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Viewbox_StretchDirection_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Viewbox_Stretch_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Viewbox_Stretch_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Viewbox_Child_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_Child_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Viewbox_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualBrush();

  [DllImport(Library.Name)]
  public static extern void VisualBrush_VisualProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualBrush_VisualProperty_get();

  [DllImport(Library.Name)]
  public static extern void VisualBrush_Visual_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualBrush_Visual_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualBrush_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_WrapPanel();

  [DllImport(Library.Name)]
  public static extern void WrapPanel_ItemWidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_ItemWidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void WrapPanel_ItemHeightProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_ItemHeightProperty_get();

  [DllImport(Library.Name)]
  public static extern void WrapPanel_OrientationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_OrientationProperty_get();

  [DllImport(Library.Name)]
  public static extern void WrapPanel_ItemWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float WrapPanel_ItemWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void WrapPanel_ItemHeight_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float WrapPanel_ItemHeight_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void WrapPanel_Orientation_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int WrapPanel_Orientation_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr WrapPanel_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr HandoffBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_HandoffBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_HandoffBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_HandoffBehavior(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TimeSpan_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_TimeSpan_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_TimeSpan(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_TimeSpan(ref TimeSpanStruct jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Duration_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_Duration_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_Duration(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_Duration(ref Duration jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Duration_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out Duration jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeyTime_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_KeyTime_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_KeyTime(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_KeyTime(ref KeyTime jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool KeyTime_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RepeatBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_RepeatBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Unbox_RepeatBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_RepeatBehavior(ref RepeatBehavior jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool RepeatBehavior_TryParse([MarshalAs(UnmanagedType.LPWStr)]string jarg1, out RepeatBehavior jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ClockState_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_ClockState_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_ClockState(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_ClockState(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Clock_CurrentIteration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float Clock_CurrentProgress_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern double Clock_CurrentTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int Clock_CurrentState_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Clock_HasControllableRoot_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Clock_Parent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Clock_Timeline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Clock_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_AnimationClock(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void AnimationClock_Start__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, int jarg5);

  [DllImport(Library.Name)]
  public static extern void AnimationClock_Start__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationClock_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ClockGroup(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  public static extern void ClockGroup_Add(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ClockGroup_GetChild(HandleRef jarg1, uint jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool ClockGroup_Tick(HandleRef jarg1, double jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern uint ClockGroup_ChildrenCount_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ClockGroup_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr FillBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_FillBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_FillBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_FillBehavior(int jarg1);

  [DllImport(Library.Name)]
  public static extern int Timeline_GetDesiredFrameRate(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_SetDesiredFrameRate(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void Timeline_AccelerationRatioProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_AccelerationRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_AutoReverseProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_AutoReverseProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_BeginTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_BeginTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_DecelerationRatioProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_DecelerationRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_DesiredFrameRateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_DesiredFrameRateProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_DurationProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_DurationProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_FillBehaviorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_FillBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_NameProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_NameProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_RepeatBehaviorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_RepeatBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_SpeedRatioProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_SpeedRatioProperty_get();

  [DllImport(Library.Name)]
  public static extern void Timeline_AccelerationRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Timeline_AccelerationRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_AutoReverse_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Timeline_AutoReverse_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_BeginTime_set(HandleRef jarg1, ref NullableTimeSpan jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_BeginTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_DecelerationRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Timeline_DecelerationRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_Duration_set(HandleRef jarg1, ref Duration jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_Duration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_FillBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Timeline_FillBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_RepeatBehavior_set(HandleRef jarg1, ref RepeatBehavior jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_RepeatBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Timeline_SpeedRatio_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float Timeline_SpeedRatio_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Timeline_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void TimelineGroup_ChildrenProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineGroup_ChildrenProperty_get();

  [DllImport(Library.Name)]
  public static extern void TimelineGroup_Children_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineGroup_Children_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr TimelineGroup_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr SlipBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_SlipBehavior_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_SlipBehavior(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_SlipBehavior(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_ParallelTimeline();

  [DllImport(Library.Name)]
  public static extern void ParallelTimeline_SlipBehaviorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ParallelTimeline_SlipBehaviorProperty_get();

  [DllImport(Library.Name)]
  public static extern void ParallelTimeline_SlipBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ParallelTimeline_SlipBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ParallelTimeline_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Storyboard();

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetTargetName(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_SetTargetName(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetTargetProperty(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_SetTargetProperty(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetTarget(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_SetTarget(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_2(HandleRef jarg1, HandleRef jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_3(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_4(HandleRef jarg1, HandleRef jarg2, int jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_5(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_6(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, bool jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_7(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, int jarg4);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Begin__SWIG_8(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, int jarg4, bool jarg5);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Pause__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Pause__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Resume__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Resume__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Stop__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Stop__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Remove__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Storyboard_Remove__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPlaying__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPlaying__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPaused__SWIG_0(HandleRef jarg1);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool Storyboard_IsPaused__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void Storyboard_TargetNameProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_TargetNameProperty_get();

  [DllImport(Library.Name)]
  public static extern void Storyboard_TargetProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_TargetProperty_get();

  [DllImport(Library.Name)]
  public static extern void Storyboard_TargetPropertyProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_TargetPropertyProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr Storyboard_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_Start__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, int jarg5);

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_Start__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_IsAdditiveProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationTimeline_IsAdditiveProperty_get();

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_IsCumulativeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationTimeline_IsCumulativeProperty_get();

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_IsAdditive_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool AnimationTimeline_IsAdditive_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void AnimationTimeline_IsCumulative_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool AnimationTimeline_IsCumulative_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationTimeline_GetCurrentValueHelper(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern IntPtr AnimationTimeline_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void BaseAnimation_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseAnimation_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void BaseAnimation_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseAnimation_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BaseAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int16Animation();

  [DllImport(Library.Name)]
  public static extern void Int16Animation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16Animation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16Animation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16Animation_From_set(HandleRef jarg1, ref NullableInt16 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16Animation_To_set(HandleRef jarg1, ref NullableInt16 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16Animation_By_set(HandleRef jarg1, ref NullableInt16 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16Animation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int32Animation();

  [DllImport(Library.Name)]
  public static extern void Int32Animation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32Animation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32Animation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32Animation_From_set(HandleRef jarg1, ref NullableInt32 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32Animation_To_set(HandleRef jarg1, ref NullableInt32 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32Animation_By_set(HandleRef jarg1, ref NullableInt32 jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32Animation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DoubleAnimation();

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_From_set(HandleRef jarg1, ref NullableFloat jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_To_set(HandleRef jarg1, ref NullableFloat jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleAnimation_By_set(HandleRef jarg1, ref NullableFloat jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColorAnimation();

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_From_set(HandleRef jarg1, ref NullableColor jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_To_set(HandleRef jarg1, ref NullableColor jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorAnimation_By_set(HandleRef jarg1, ref NullableColor jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PointAnimation();

  [DllImport(Library.Name)]
  public static extern void PointAnimation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointAnimation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointAnimation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointAnimation_From_set(HandleRef jarg1, ref NullablePoint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointAnimation_To_set(HandleRef jarg1, ref NullablePoint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointAnimation_By_set(HandleRef jarg1, ref NullablePoint jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectAnimation();

  [DllImport(Library.Name)]
  public static extern void RectAnimation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectAnimation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectAnimation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectAnimation_From_set(HandleRef jarg1, ref NullableRect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectAnimation_To_set(HandleRef jarg1, ref NullableRect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectAnimation_By_set(HandleRef jarg1, ref NullableRect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeAnimation();

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_From_set(HandleRef jarg1, ref NullableSize jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_To_set(HandleRef jarg1, ref NullableSize jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeAnimation_By_set(HandleRef jarg1, ref NullableSize jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ThicknessAnimation();

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_ByProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_ByProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_FromProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_FromProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_ToProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_ToProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_From_set(HandleRef jarg1, ref NullableThickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_To_set(HandleRef jarg1, ref NullableThickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessAnimation_By_set(HandleRef jarg1, ref NullableThickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_By_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimation_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeySpline__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeySpline__SWIG_1(ref Point jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr new_KeySpline__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4);

  [DllImport(Library.Name)]
  public static extern float KeySpline_GetSplineProgress(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void KeySpline_ControlPoint1_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeySpline_ControlPoint1_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void KeySpline_ControlPoint2_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr KeySpline_ControlPoint2_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr KeySpline_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void BooleanKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void BooleanKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void BooleanKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BooleanKeyFrame_Value_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool BooleanKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void Int16KeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16KeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int16KeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int16KeyFrame_Value_set(HandleRef jarg1, short jarg2);

  [DllImport(Library.Name)]
  public static extern short Int16KeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void Int32KeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32KeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void Int32KeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void Int32KeyFrame_Value_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int Int32KeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void DoubleKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void DoubleKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void DoubleKeyFrame_Value_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float DoubleKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ColorKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void ColorKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ColorKeyFrame_Value_set(HandleRef jarg1, ref Color jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void PointKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void PointKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void PointKeyFrame_Value_set(HandleRef jarg1, ref Point jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void RectKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void RectKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void RectKeyFrame_Value_set(HandleRef jarg1, ref Rect jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void SizeKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void SizeKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void SizeKeyFrame_Value_set(HandleRef jarg1, ref Size jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ThicknessKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void ThicknessKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ThicknessKeyFrame_Value_set(HandleRef jarg1, ref Thickness jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ObjectKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void ObjectKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void ObjectKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ObjectKeyFrame_Value_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void StringKeyFrame_KeyTimeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_KeyTimeProperty_get();

  [DllImport(Library.Name)]
  public static extern void StringKeyFrame_ValueProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_ValueProperty_get();

  [DllImport(Library.Name)]
  public static extern void StringKeyFrame_KeyTime_set(HandleRef jarg1, ref KeyTime jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_KeyTime_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void StringKeyFrame_Value_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_Value_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16KeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32KeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr PointKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr RectKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr StringKeyFrameCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteBooleanKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteBooleanKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteInt16KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteInt32KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteDoubleKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteColorKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscretePointKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscretePointKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteRectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteSizeKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteThicknessKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteObjectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteObjectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DiscreteStringKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr DiscreteStringKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearInt16KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearInt32KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearDoubleKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearColorKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearPointKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearPointKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearRectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearSizeKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_LinearThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern IntPtr LinearThicknessKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineInt16KeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt16KeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineInt16KeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt16KeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt16KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineInt32KeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt32KeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineInt32KeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt32KeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineInt32KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineDoubleKeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineDoubleKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineDoubleKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineDoubleKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineDoubleKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineColorKeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineColorKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineColorKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineColorKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineColorKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplinePointKeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplinePointKeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplinePointKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplinePointKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplinePointKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplinePointKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineRectKeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineRectKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineRectKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineRectKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineRectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineSizeKeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineSizeKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineSizeKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineSizeKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineSizeKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SplineThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern void SplineThicknessKeyFrame_KeySplineProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineThicknessKeyFrame_KeySplineProperty_get();

  [DllImport(Library.Name)]
  public static extern void SplineThicknessKeyFrame_KeySpline_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineThicknessKeyFrame_KeySpline_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SplineThicknessKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingInt16KeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingInt16KeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt16KeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingInt16KeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt16KeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt16KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingInt32KeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingInt32KeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt32KeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingInt32KeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt32KeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingInt32KeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingDoubleKeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingDoubleKeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingDoubleKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingDoubleKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingDoubleKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingDoubleKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingColorKeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingColorKeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingColorKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingColorKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingColorKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingColorKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingPointKeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingPointKeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingPointKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingPointKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingPointKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingPointKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingRectKeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingRectKeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingRectKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingRectKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingRectKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingRectKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingSizeKeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingSizeKeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingSizeKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingSizeKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingSizeKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingSizeKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_EasingThicknessKeyFrame();

  [DllImport(Library.Name)]
  public static extern void EasingThicknessKeyFrame_EasingFunctionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingThicknessKeyFrame_EasingFunctionProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingThicknessKeyFrame_EasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingThicknessKeyFrame_EasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingThicknessKeyFrame_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BooleanAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BooleanAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int16AnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr Int16AnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int16AnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_Int32AnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr Int32AnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Int32AnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_DoubleAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr DoubleAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ColorAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ColorAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PointAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PointAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_RectAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr RectAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SizeAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr SizeAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ThicknessAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ThicknessAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ObjectAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ObjectAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StringAnimationUsingKeyFrames();

  [DllImport(Library.Name)]
  public static extern IntPtr StringAnimationUsingKeyFrames_KeyFrames_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr StringAnimationUsingKeyFrames_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr EasingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_EasingMode_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_EasingMode(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_EasingMode(int jarg1);

  [DllImport(Library.Name)]
  public static extern float EasingFunctionBase_Ease(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern void EasingFunctionBase_EasingModeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingFunctionBase_EasingModeProperty_get();

  [DllImport(Library.Name)]
  public static extern void EasingFunctionBase_EasingMode_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int EasingFunctionBase_EasingMode_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr EasingFunctionBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BackEase();

  [DllImport(Library.Name)]
  public static extern void BackEase_AmplitudeProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BackEase_AmplitudeProperty_get();

  [DllImport(Library.Name)]
  public static extern void BackEase_Amplitude_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float BackEase_Amplitude_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BackEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BounceEase();

  [DllImport(Library.Name)]
  public static extern void BounceEase_BouncesProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BounceEase_BouncesProperty_get();

  [DllImport(Library.Name)]
  public static extern void BounceEase_BouncinessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BounceEase_BouncinessProperty_get();

  [DllImport(Library.Name)]
  public static extern void BounceEase_Bounces_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int BounceEase_Bounces_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BounceEase_Bounciness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float BounceEase_Bounciness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BounceEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CircleEase();

  [DllImport(Library.Name)]
  public static extern IntPtr CircleEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuadraticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr QuadraticEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_CubicEase();

  [DllImport(Library.Name)]
  public static extern IntPtr CubicEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuarticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr QuarticEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_QuinticEase();

  [DllImport(Library.Name)]
  public static extern IntPtr QuinticEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_SineEase();

  [DllImport(Library.Name)]
  public static extern IntPtr SineEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PowerEase();

  [DllImport(Library.Name)]
  public static extern void PowerEase_PowerProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PowerEase_PowerProperty_get();

  [DllImport(Library.Name)]
  public static extern void PowerEase_Power_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float PowerEase_Power_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr PowerEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ExponentialEase();

  [DllImport(Library.Name)]
  public static extern void ExponentialEase_ExponentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ExponentialEase_ExponentProperty_get();

  [DllImport(Library.Name)]
  public static extern void ExponentialEase_Exponent_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ExponentialEase_Exponent_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ExponentialEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ElasticEase();

  [DllImport(Library.Name)]
  public static extern void ElasticEase_OscillationsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ElasticEase_OscillationsProperty_get();

  [DllImport(Library.Name)]
  public static extern void ElasticEase_SpringinessProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ElasticEase_SpringinessProperty_get();

  [DllImport(Library.Name)]
  public static extern void ElasticEase_Oscillations_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int ElasticEase_Oscillations_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void ElasticEase_Springiness_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float ElasticEase_Springiness_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ElasticEase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern void ControllableStoryboardAction_BeginStoryboardName_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ControllableStoryboardAction_BeginStoryboardName_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ControllableStoryboardAction_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_BeginStoryboard();

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_StoryboardProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_StoryboardProperty_get();

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_HandoffBehavior_set(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern int BeginStoryboard_HandoffBehavior_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void BeginStoryboard_Storyboard_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_Storyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr BeginStoryboard_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr PauseStoryboard_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_PauseStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr ResumeStoryboard_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ResumeStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr StopStoryboard_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_StopStoryboard();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualState();

  [DllImport(Library.Name)]
  public static extern void VisualState_Name_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualState_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualState_Storyboard_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualState_Storyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualState_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateGroup();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_GetCurrentState(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void VisualStateGroup_SetCurrentState(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_FindState(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_FindTransition(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern void VisualStateGroup_UpdateAnimations__SWIG_0(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport(Library.Name)]
  public static extern void VisualStateGroup_UpdateAnimations__SWIG_1(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_Name_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_States_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_Transitions_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroup_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateGroupCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateGroupCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateGroupCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualTransition();

  [DllImport(Library.Name)]
  public static extern void VisualTransition_From_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_From_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_To_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_To_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_GeneratedDuration_set(HandleRef jarg1, ref Duration jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_GeneratedDuration_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_GeneratedEasingFunction_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_GeneratedEasingFunction_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualTransition_Storyboard_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_Storyboard_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransition_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualTransitionCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualTransitionCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualTransitionCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_VisualStateManager();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_GetCustomVisualStateManager(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualStateManager_SetCustomVisualStateManager(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_GetVisualStateGroups(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void VisualStateManager_SetVisualStateGroups(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VisualStateManager_GoToState(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, bool jarg3);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool VisualStateManager_GoToElementState(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2, bool jarg3);

  [DllImport(Library.Name)]
  public static extern void VisualStateManager_CustomVisualStateManagerProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_CustomVisualStateManagerProperty_get();

  [DllImport(Library.Name)]
  public static extern void VisualStateManager_VisualStateGroupsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_VisualStateGroupsProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr VisualStateManager_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumn();

  [DllImport(Library.Name)]
  public static extern float GridViewColumn_GetDesiredWidth(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern float GridViewColumn_EnsureWidth(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern int GridViewColumn_GetMeasureState(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_SetMeasureState(HandleRef jarg1, int jarg2);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_CellTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_CellTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderContainerStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderStringFormatProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_WidthProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_WidthProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_ActualWidth_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GridViewColumn_ActualWidth_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_CellTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_CellTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_CellTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_DisplayMemberBinding_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_DisplayMemberBinding_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_Header_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_Header_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_HeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_HeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewColumn_Width_set(HandleRef jarg1, float jarg2);

  [DllImport(Library.Name)]
  public static extern float GridViewColumn_Width_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumn_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumnCollection__SWIG_0();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumnCollection__SWIG_1(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnCollection_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeaderRole_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr Boxed_GridViewColumnHeaderRole_GetStaticType();

  [DllImport(Library.Name)]
  public static extern int Unbox_GridViewColumnHeaderRole(IntPtr jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr Box_GridViewColumnHeaderRole(int jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewColumnHeader();

  [DllImport(Library.Name)]
  public static extern void GridViewColumnHeader_ColumnProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeader_ColumnProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewColumnHeader_RoleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeader_RoleProperty_get();

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeader_Column_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern int GridViewColumnHeader_Role_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewColumnHeader_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ViewBase();

  [DllImport(Library.Name)]
  public static extern void ViewBase_ClearItem(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern void ViewBase_PrepareItem(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ViewBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridView();

  [DllImport(Library.Name)]
  public static extern void GridView_AllowsColumnReorderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_AllowsColumnReorderProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderContainerStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderContextMenuProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderStringFormatProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderToolTipProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnCollectionProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnCollectionProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridView_AllowsColumnReorder_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridView_AllowsColumnReorder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderContextMenu_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderContextMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridView_ColumnHeaderToolTip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_ColumnHeaderToolTip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_Columns_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridView_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewRowPresenterBase();

  [DllImport(Library.Name)]
  public static extern void GridViewRowPresenterBase_ColumnsProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenterBase_ColumnsProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewRowPresenterBase_Columns_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenterBase_Columns_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenterBase_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewRowPresenter();

  [DllImport(Library.Name)]
  public static extern void GridViewRowPresenter_ContentProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenter_ContentProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewRowPresenter_Content_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenter_Content_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewRowPresenter_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_GridViewHeaderRowPresenter();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_AllowsColumnReorderProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_AllowsColumnReorderProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderContainerStyleProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContainerStyleProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderContextMenuProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContextMenuProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderStringFormatProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderStringFormatProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderTemplateProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplateProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderTemplateSelectorProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplateSelectorProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderToolTipProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderToolTipProperty_get();

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_AllowsColumnReorder_set(HandleRef jarg1, bool jarg2);

  [DllImport(Library.Name)]
  [return: MarshalAs(UnmanagedType.U1)]
  public static extern bool GridViewHeaderRowPresenter_AllowsColumnReorder_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderContainerStyle_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContainerStyle_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderContextMenu_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderContextMenu_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderStringFormat_set(HandleRef jarg1, [MarshalAs(UnmanagedType.LPWStr)]string jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderStringFormat_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderTemplate_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplate_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderTemplateSelector_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderTemplateSelector_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern void GridViewHeaderRowPresenter_ColumnHeaderToolTip_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_ColumnHeaderToolTip_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr GridViewHeaderRowPresenter_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListView();

  [DllImport(Library.Name)]
  public static extern void ListView_ViewProperty_set(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListView_ViewProperty_get();

  [DllImport(Library.Name)]
  public static extern void ListView_View_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport(Library.Name)]
  public static extern IntPtr ListView_View_get(HandleRef jarg1);

  [DllImport(Library.Name)]
  public static extern IntPtr ListView_GetStaticType();

  [DllImport(Library.Name)]
  public static extern IntPtr new_ListViewItem();

  [DllImport(Library.Name)]
  public static extern IntPtr ListViewItem_GetStaticType();


  public static void Init() {
    SWIGExceptionHelper.Init();
    SWIGStringHelper.Init();
  }

}

}

