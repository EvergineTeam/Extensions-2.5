//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public static class VisualTreeHelper {
  public static Visual GetRoot(Visual visual) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetRoot(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (Visual)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static Visual GetParent(Visual visual) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetParent(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (Visual)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static int GetChildrenCount(Visual visual) {
    int ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetChildrenCount(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Visual GetChild(Visual visual, int childIndex) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetChild(Visual.getCPtr(visual), childIndex);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (Visual)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static Rect GetContentBounds(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetContentBounds(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Rect>(ret);
    }
    else {
      return new Rect();
    }
  }

  public static Rect GetDescendantBounds(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetDescendantBounds(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Rect>(ret);
    }
    else {
      return new Rect();
    }
  }

  public static Point GetOffset(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetOffset(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Point>(ret);
    }
    else {
      return new Point();
    }
  }

  public static Size GetSize(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetSize(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Size>(ret);
    }
    else {
      return new Size();
    }
  }

  public static Geometry GetClip(Visual visual) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetClip(Visual.getCPtr(visual));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (Geometry)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static HitTestResult HitTest(Visual visual, Point point) {
    HitTestResult ret = new HitTestResult(NoesisGUI_PINVOKE.VisualTreeHelper_HitTest__SWIG_0(Visual.getCPtr(visual), ref point), true);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

