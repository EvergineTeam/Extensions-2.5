//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct VirtualizationCacheLength {

  [MarshalAs(UnmanagedType.R4)]
  private float _beforeViewport;
  [MarshalAs(UnmanagedType.R4)]
  private float _afterViewport;

  public VirtualizationCacheLength(float cacheBeforeAndAfterViewport) :
    this(cacheBeforeAndAfterViewport, cacheBeforeAndAfterViewport) {
  }

  public VirtualizationCacheLength(float cacheBeforeViewport, float cacheAfterViewport) {
    if (Single.IsNaN(cacheBeforeViewport)) {
      throw new ArgumentException("Invalid NaN value for cacheBeforeViewport");
    }

    if (Single.IsNaN(cacheAfterViewport)) {
      throw new ArgumentException("Invalid NaN value for cacheAfterViewport");
    }

    _beforeViewport = cacheBeforeViewport;
    _afterViewport = cacheAfterViewport;
  }

  public float CacheBeforeViewport { get { return _beforeViewport; } }

  public float CacheAfterViewport { get { return _afterViewport; } }

  public static bool operator==(VirtualizationCacheLength l1, VirtualizationCacheLength l2) {
    return (l1.CacheBeforeViewport == l2.CacheBeforeViewport && l1.CacheAfterViewport == l2.CacheAfterViewport);
  }

  public static bool operator !=(VirtualizationCacheLength l1, VirtualizationCacheLength l2) {
    return !(l1 == l2);
  }

  override public bool Equals(object other) {
    if (other is VirtualizationCacheLength) {
      return (this == (VirtualizationCacheLength)other);
    }
    else {
      return false;
    }
  }

  public bool Equals(VirtualizationCacheLength other) {
    return (this == other);
  }

  public override int GetHashCode() {
    return ((int)_beforeViewport + (int)_afterViewport);
  }

  public override string ToString() {
    return string.Format("{0},{1}", CacheBeforeViewport, CacheAfterViewport);
  }


}

}

