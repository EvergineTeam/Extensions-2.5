//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class RangeBase : Control {
  internal new static RangeBase CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new RangeBase(cPtr, cMemoryOwn);
  }

  internal RangeBase(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(RangeBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events

  #region ValueChanged
  public delegate void ValueChangedHandler(float oldValue, float newValue);
  public event ValueChangedHandler ValueChanged {
    add {
      if (!_ValueChanged.ContainsKey(swigCPtr.Handle)) {
        _ValueChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_RangeBase_ValueChanged(_raiseValueChanged, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _ValueChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_ValueChanged.ContainsKey(swigCPtr.Handle)) {

        _ValueChanged[swigCPtr.Handle] -= value;

        if (_ValueChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_RangeBase_ValueChanged(_raiseValueChanged, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          _ValueChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseValueChangedCallback(IntPtr cPtr, float oldValue, float newValue);
  private static RaiseValueChangedCallback _raiseValueChanged = RaiseValueChanged;

  [MonoPInvokeCallback(typeof(RaiseValueChangedCallback))]
  private static void RaiseValueChanged(IntPtr cPtr, float oldValue, float newValue) {
    try {
      if (!_ValueChanged.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for ValueChanged event");
      }
      if (oldValue == -1234.5678f && newValue == -1234.5678f) {
        _ValueChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        ValueChangedHandler handler = _ValueChanged[cPtr];
        if (handler != null) {
          handler(oldValue, newValue);
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, ValueChangedHandler> _ValueChanged =
      new Dictionary<IntPtr, ValueChangedHandler>();
  #endregion

  #endregion

  protected RangeBase() {
  }

  public static DependencyProperty LargeChangeProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RangeBase_LargeChangeProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MaximumProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RangeBase_MaximumProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MinimumProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RangeBase_MinimumProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SmallChangeProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RangeBase_SmallChangeProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ValueProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.RangeBase_ValueProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float LargeChange {
    set {
      NoesisGUI_PINVOKE.RangeBase_LargeChange_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.RangeBase_LargeChange_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float Maximum {
    set {
      NoesisGUI_PINVOKE.RangeBase_Maximum_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.RangeBase_Maximum_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float Minimum {
    set {
      NoesisGUI_PINVOKE.RangeBase_Minimum_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.RangeBase_Minimum_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float SmallChange {
    set {
      NoesisGUI_PINVOKE.RangeBase_SmallChange_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.RangeBase_SmallChange_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float Value {
    set {
      NoesisGUI_PINVOKE.RangeBase_Value_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.RangeBase_Value_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.RangeBase_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_RangeBase(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

