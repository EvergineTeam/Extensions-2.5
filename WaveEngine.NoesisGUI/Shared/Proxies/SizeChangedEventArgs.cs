//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class SizeChangedEventArgs : RoutedEventArgs {
  private HandleRef swigCPtr;

  internal SizeChangedEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SizeChangedEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SizeChangedEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_SizeChangedEventArgs(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Noesis.Size NewSize {
    get {
      return GetNewSizeHelper();
    }
  }

  public Noesis.Size OldSize {
    get {
      return GetOldSizeHelper();
    }
  }

  public bool WidthChanged {
    get {
      return GetWidthChangedHelper();
    }
  }

  public bool HeightChanged {
    get {
      return GetHeightChangedHelper();
    }
  }

  private Size GetNewSizeHelper() {
    IntPtr ret = NoesisGUI_PINVOKE.SizeChangedEventArgs_GetNewSizeHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Size>(ret);
    }
    else {
      return new Size();
    }
  }

  private Size GetOldSizeHelper() {
    IntPtr ret = NoesisGUI_PINVOKE.SizeChangedEventArgs_GetOldSizeHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Size>(ret);
    }
    else {
      return new Size();
    }
  }

  private bool GetWidthChangedHelper() {
    bool ret = NoesisGUI_PINVOKE.SizeChangedEventArgs_GetWidthChangedHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool GetHeightChangedHelper() {
    bool ret = NoesisGUI_PINVOKE.SizeChangedEventArgs_GetHeightChangedHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

