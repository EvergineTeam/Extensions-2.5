//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class MouseEventArgs : RoutedEventArgs {
  private HandleRef swigCPtr;

  internal MouseEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MouseEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MouseEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_MouseEventArgs(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Noesis.MouseButtonState LeftButton {
    get {
      return GetLeftButtonStateHelper();
    }
  }

  public Noesis.MouseButtonState MiddleButton {
    get {
      return GetMiddleButtonStateHelper();
    }
  }

  public Noesis.MouseButtonState RightButton {
    get {
      return GetRightButtonStateHelper();
    }
  }

  public Noesis.MouseButtonState XButton1 {
    get {
      return GetXButton1StateHelper();
    }
  }

  public Noesis.MouseButtonState XButton2 {
    get {
      return GetXButton2StateHelper();
    }
  }

  public MouseEventArgs(object s, RoutedEvent e, MouseState mouseState) : this(NoesisGUI_PINVOKE.new_MouseEventArgs(Noesis.Extend.GetInstanceHandle(s), RoutedEvent.getCPtr(e), MouseState.getCPtr(mouseState)), true) {
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public Point GetPosition(UIElement relativeTo) {
    IntPtr ret = NoesisGUI_PINVOKE.MouseEventArgs_GetPosition(swigCPtr, UIElement.getCPtr(relativeTo));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Point>(ret);
    }
    else {
      return new Point();
    }
  }

  private MouseButtonState GetLeftButtonStateHelper() {
    MouseButtonState ret = (MouseButtonState)NoesisGUI_PINVOKE.MouseEventArgs_GetLeftButtonStateHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private MouseButtonState GetMiddleButtonStateHelper() {
    MouseButtonState ret = (MouseButtonState)NoesisGUI_PINVOKE.MouseEventArgs_GetMiddleButtonStateHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private MouseButtonState GetRightButtonStateHelper() {
    MouseButtonState ret = (MouseButtonState)NoesisGUI_PINVOKE.MouseEventArgs_GetRightButtonStateHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private MouseButtonState GetXButton1StateHelper() {
    MouseButtonState ret = (MouseButtonState)NoesisGUI_PINVOKE.MouseEventArgs_GetXButton1StateHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private MouseButtonState GetXButton2StateHelper() {
    MouseButtonState ret = (MouseButtonState)NoesisGUI_PINVOKE.MouseEventArgs_GetXButton2StateHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

