//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct RepeatBehavior {

  private enum RepeatBehaviorType {
    IterationCount,
    RepeatDuration,
    Forever
  }

  [MarshalAs(UnmanagedType.I4)]
  private RepeatBehaviorType _repeatBehaviorType;
  [MarshalAs(UnmanagedType.R4)]
  private float _iterationCount;
  private TimeSpanStruct _repeatDuration;

  public bool HasCount {
    get {
      return this._repeatBehaviorType == RepeatBehavior.RepeatBehaviorType.IterationCount;
    }
  }

  public float Count {
    get {
      if (!HasCount) {
        throw new InvalidOperationException("RepeatBehavior does not have an iteration count");
      }
      return this._iterationCount;
    }
  }

  public bool HasDuration {
    get {
      return this._repeatBehaviorType == RepeatBehavior.RepeatBehaviorType.RepeatDuration;
    }
  }

  public TimeSpan Duration {
    get {
      if (!HasDuration) {
        throw new InvalidOperationException("RepeatBehavior does not have a repeat duration");
      }
      return this._repeatDuration;
    }
  }

  public static RepeatBehavior Forever {
    get {
      return new RepeatBehavior { _repeatBehaviorType = RepeatBehavior.RepeatBehaviorType.Forever };
    }
  }

  public RepeatBehavior(float count) {
    if (float.IsInfinity(count) || float.IsNaN(count) || count < 0.0f) {
      throw new ArgumentOutOfRangeException("Invalid iteration count");
    }
    this._repeatBehaviorType = RepeatBehavior.RepeatBehaviorType.IterationCount;
    this._iterationCount = count;
    this._repeatDuration = new TimeSpanStruct(0L);
  }

  public RepeatBehavior(TimeSpan duration) {
    if (duration < TimeSpan.Zero) {
      throw new ArgumentOutOfRangeException("Repeat duration cannot be negative");
    }
    this._repeatBehaviorType = RepeatBehavior.RepeatBehaviorType.RepeatDuration;
    this._iterationCount = 0.0f;
    this._repeatDuration = duration;
  }

  public static bool operator==(RepeatBehavior r0, RepeatBehavior r1) {
    if (r0.HasCount && r1.HasCount) {
      return r0._iterationCount == r1._iterationCount;
    }
    if (r0.HasDuration && r1.HasDuration) {
      return r0._repeatDuration == r1._repeatDuration;
    }
    return r0._repeatBehaviorType == r1._repeatBehaviorType;
  }

  public static bool operator!=(RepeatBehavior r0, RepeatBehavior r1) {
    return !(r0 == r1);
  }

  public override bool Equals(Object obj) {
    return obj is RepeatBehavior && this == (RepeatBehavior)obj;
  }

  public bool Equals(RepeatBehavior v) {
    return this == v;
  }

  public override int GetHashCode() {
    if (HasCount) {
      return this._iterationCount.GetHashCode();
    }
    if (HasDuration) {
      return this._repeatDuration.GetHashCode();
    }
    return this._repeatBehaviorType.GetHashCode();
  }

  public override string ToString() {
    switch (this._repeatBehaviorType) {
      default:
      case RepeatBehavior.RepeatBehaviorType.IterationCount: {
         return this._iterationCount.ToString() + "x";
      }
      case RepeatBehavior.RepeatBehaviorType.RepeatDuration: {
        return ((TimeSpan)this._repeatDuration).ToString();
      }
      case RepeatBehavior.RepeatBehaviorType.Forever: {
        return "Forever";
      }
    }
  }

  public static RepeatBehavior Parse(string str) {
    RepeatBehavior repeatBehavior;
    if (RepeatBehavior.TryParse(str, out repeatBehavior)) {
      return repeatBehavior;
    }
    throw new ArgumentException("Cannot create RepeatBehavior from '" + str + "'");
  }

  public static bool TryParse(string str, out RepeatBehavior result) {
    bool ret = NoesisGUI_PINVOKE.RepeatBehavior_TryParse(str != null ? str : string.Empty, out result);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

