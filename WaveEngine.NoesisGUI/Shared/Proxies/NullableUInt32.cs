//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
internal struct NullableUInt32 {

  [MarshalAs(UnmanagedType.U1)]
  private bool _hasValue;
  [MarshalAs(UnmanagedType.U4)]
  private uint _value;

  public bool HasValue { get { return this._hasValue; } }

  public uint Value {
    get {
      if (!HasValue) {
        throw new InvalidOperationException("Nullable does not have a value");
      }
      return this._value;
    }
  }

  public NullableUInt32(uint v) {
    this._hasValue = true;
    this._value = v;
  }

  public static explicit operator uint(NullableUInt32 n) {
    if (!n.HasValue) {
      throw new InvalidOperationException("Nullable does not have a value");
    }
    return n.Value;
  }

  public static implicit operator NullableUInt32(uint v) {
    return new NullableUInt32(v);
  }

  public static implicit operator Nullable<uint>(NullableUInt32 n) {
    return n.HasValue ? new Nullable<uint>(n.Value) : new Nullable<uint>();
  }

  public static implicit operator NullableUInt32(Nullable<uint> n) {
    return n.HasValue ? new NullableUInt32(n.Value) : new NullableUInt32();
  }

  public static bool operator==(NullableUInt32 n, uint v) {
    return n.HasValue && n.Value == v;
  }

  public static bool operator!=(NullableUInt32 n, uint v) {
    return !(n == v);
  }

  public static bool operator==(uint v, NullableUInt32 n) {
    return n == v;
  }
  
  public static bool operator!=(uint v, NullableUInt32 n) {
    return n != v;
  }

  public static bool operator==(NullableUInt32 n0, NullableUInt32 n1) {
    return n0.HasValue && n1.HasValue ? n0.Value == n1.Value : n0.HasValue == n1.HasValue;
  }

  public static bool operator!=(NullableUInt32 n0, NullableUInt32 n1) {
    return !(n0 == n1);
  }

  public override bool Equals(System.Object obj) {
    return obj is NullableUInt32 && this == (NullableUInt32)obj;
  }

  public bool Equals(NullableUInt32 n) {
    return this == n;
  }

  public override int GetHashCode() {
    return HasValue ? Value.GetHashCode() : 0;
  }

}

}

