//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct Matrix4 {

  private Vector4 _r0;
  private Vector4 _r1;
  private Vector4 _r2;
  private Vector4 _r3;

  public Vector4 this[uint i] {
    get {
      switch (i) {
        case 0: return this._r0;
        case 1: return this._r1;
        case 2: return this._r2;
        case 3: return this._r3;
        default: throw new IndexOutOfRangeException();
      }
    }
    set {
      switch (i) {
        case 0: this._r0 = value; break;
        case 1: this._r1 = value; break;
        case 2: this._r2 = value; break;
        case 3: this._r3 = value; break;
        default: throw new IndexOutOfRangeException();
      }
    }
  }

  public static Matrix4 Identity {
    get {
      return new Matrix4(
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f);
    }
  }

  public Matrix4(
    float m00, float m01, float m02, float m03,
    float m10, float m11, float m12, float m13,
    float m20, float m21, float m22, float m23,
    float m30, float m31, float m32, float m33) : this(
    new Vector4(m00, m01, m02, m03),
    new Vector4(m10, m11, m12, m13),
    new Vector4(m20, m21, m22, m23),
    new Vector4(m30, m31, m32, m33))
  {
  }

  public Matrix4(Vector4 v0, Vector4 v1, Vector4 v2, Vector4 v3) {
    this._r0 = v0;
    this._r1 = v1;
    this._r2 = v2;
    this._r3 = v3;
  }

  public Matrix4(Transform3 m) : this(
    new Vector4(m[0], 0.0f),
    new Vector4(m[1], 0.0f),
    new Vector4(m[2], 0.0f),
    new Vector4(m[3], 1.0f))
  {
  }

  public static Matrix4 operator*(Matrix4 m, float f) {
    return new Matrix4(m[0] * f, m[1] * f, m[2] * f, m[3] * f);
  }

  public static Matrix4 operator*(float f, Matrix4 m) {
    return m * f;
  }

  public static Matrix4 operator/(Matrix4 m, float f) {
    if (f == 0.0f) { throw new DivideByZeroException(); }
    return new Matrix4(m[0] / f, m[1] / f, m[2] / f, m[3] / f);
  }

  public static Vector4 operator*(Vector4 v, Matrix4 m) {
    return new Vector4(
      v[0] * m[0][0] + v[1] * m[1][0] + v[2] * m[2][0] + v[3] * m[3][0],
      v[0] * m[0][1] + v[1] * m[1][1] + v[2] * m[2][1] + v[3] * m[3][1],
      v[0] * m[0][2] + v[1] * m[1][2] + v[2] * m[2][2] + v[3] * m[3][2],
      v[0] * m[0][3] + v[1] * m[1][3] + v[2] * m[2][3] + v[3] * m[3][3]);
  }

  public static Matrix4 operator*(Matrix4 m0, Matrix4 m1) {
    return new Matrix4(
      new Vector4(
        m0[0][0] * m1[0][0] + m0[0][1] * m1[1][0] + m0[0][2] * m1[2][0] + m0[0][3] * m1[3][0],
        m0[0][0] * m1[0][1] + m0[0][1] * m1[1][1] + m0[0][2] * m1[2][1] + m0[0][3] * m1[3][1],
        m0[0][0] * m1[0][2] + m0[0][1] * m1[1][2] + m0[0][2] * m1[2][2] + m0[0][3] * m1[3][2],
        m0[0][0] * m1[0][3] + m0[0][1] * m1[1][3] + m0[0][2] * m1[2][3] + m0[0][3] * m1[3][3]),
      new Vector4(
        m0[1][0] * m1[0][0] + m0[1][1] * m1[1][0] + m0[1][2] * m1[2][0] + m0[1][3] * m1[3][0],
        m0[1][0] * m1[0][1] + m0[1][1] * m1[1][1] + m0[1][2] * m1[2][1] + m0[1][3] * m1[3][1],
        m0[1][0] * m1[0][2] + m0[1][1] * m1[1][2] + m0[1][2] * m1[2][2] + m0[1][3] * m1[3][2],
        m0[1][0] * m1[0][3] + m0[1][1] * m1[1][3] + m0[1][2] * m1[2][3] + m0[1][3] * m1[3][3]),
      new Vector4(
        m0[2][0] * m1[0][0] + m0[2][1] * m1[1][0] + m0[2][2] * m1[2][0] + m0[2][3] * m1[3][0],
        m0[2][0] * m1[0][1] + m0[2][1] * m1[1][1] + m0[2][2] * m1[2][1] + m0[2][3] * m1[3][1],
        m0[2][0] * m1[0][2] + m0[2][1] * m1[1][2] + m0[2][2] * m1[2][2] + m0[2][3] * m1[3][2],
        m0[2][0] * m1[0][3] + m0[2][1] * m1[1][3] + m0[2][2] * m1[2][3] + m0[2][3] * m1[3][3]),
      new Vector4(
        m0[3][0] * m1[0][0] + m0[3][1] * m1[1][0] + m0[3][2] * m1[2][0] + m0[3][3] * m1[3][0],
        m0[3][0] * m1[0][1] + m0[3][1] * m1[1][1] + m0[3][2] * m1[2][1] + m0[3][3] * m1[3][1],
        m0[3][0] * m1[0][2] + m0[3][1] * m1[1][2] + m0[3][2] * m1[2][2] + m0[3][3] * m1[3][2],
        m0[3][0] * m1[0][3] + m0[3][1] * m1[1][3] + m0[3][2] * m1[2][3] + m0[3][3] * m1[3][3])
    );
  }

  public static Matrix4 operator*(Transform3 m0, Matrix4 m1) {
    return new Matrix4(
      new Vector4(
        m0[0][0] * m1[0][0] + m0[0][1] * m1[1][0] + m0[0][2] * m1[2][0],
        m0[0][0] * m1[0][1] + m0[0][1] * m1[1][1] + m0[0][2] * m1[2][1],
        m0[0][0] * m1[0][2] + m0[0][1] * m1[1][2] + m0[0][2] * m1[2][2],
        m0[0][0] * m1[0][3] + m0[0][1] * m1[1][3] + m0[0][2] * m1[2][3]),
      new Vector4(
        m0[1][0] * m1[0][0] + m0[1][1] * m1[1][0] + m0[1][2] * m1[2][0],
        m0[1][0] * m1[0][1] + m0[1][1] * m1[1][1] + m0[1][2] * m1[2][1],
        m0[1][0] * m1[0][2] + m0[1][1] * m1[1][2] + m0[1][2] * m1[2][2],
        m0[1][0] * m1[0][3] + m0[1][1] * m1[1][3] + m0[1][2] * m1[2][3]),
      new Vector4(
        m0[2][0] * m1[0][0] + m0[2][1] * m1[1][0] + m0[2][2] * m1[2][0],
        m0[2][0] * m1[0][1] + m0[2][1] * m1[1][1] + m0[2][2] * m1[2][1],
        m0[2][0] * m1[0][2] + m0[2][1] * m1[1][2] + m0[2][2] * m1[2][2],
        m0[2][0] * m1[0][3] + m0[2][1] * m1[1][3] + m0[2][2] * m1[2][3]),
      new Vector4(
        m0[3][0] * m1[0][0] + m0[3][1] * m1[1][0] + m0[3][2] * m1[2][0] + m1[3][0],
        m0[3][0] * m1[0][1] + m0[3][1] * m1[1][1] + m0[3][2] * m1[2][1] + m1[3][1],
        m0[3][0] * m1[0][2] + m0[3][1] * m1[1][2] + m0[3][2] * m1[2][2] + m1[3][2],
        m0[3][0] * m1[0][3] + m0[3][1] * m1[1][3] + m0[3][2] * m1[2][3] + m1[3][3])
    );
  }

  public static Matrix4 operator*(Matrix4 m0, Transform3 m1) {
    return new Matrix4(
      new Vector4(
        m0[0][0] * m1[0][0] + m0[0][1] * m1[1][0] + m0[0][2] * m1[2][0] + m0[0][3] * m1[3][0],
        m0[0][0] * m1[0][1] + m0[0][1] * m1[1][1] + m0[0][2] * m1[2][1] + m0[0][3] * m1[3][1],
        m0[0][0] * m1[0][2] + m0[0][1] * m1[1][2] + m0[0][2] * m1[2][2] + m0[0][3] * m1[3][2],
                                                                          m0[0][3]),
      new Vector4(
        m0[1][0] * m1[0][0] + m0[1][1] * m1[1][0] + m0[1][2] * m1[2][0] + m0[1][3] * m1[3][0],
        m0[1][0] * m1[0][1] + m0[1][1] * m1[1][1] + m0[1][2] * m1[2][1] + m0[1][3] * m1[3][1],
        m0[1][0] * m1[0][2] + m0[1][1] * m1[1][2] + m0[1][2] * m1[2][2] + m0[1][3] * m1[3][2],
                                                                          m0[1][3]),
      new Vector4(
        m0[2][0] * m1[0][0] + m0[2][1] * m1[1][0] + m0[2][2] * m1[2][0] + m0[2][3] * m1[3][0],
        m0[2][0] * m1[0][1] + m0[2][1] * m1[1][1] + m0[2][2] * m1[2][1] + m0[2][3] * m1[3][1],
        m0[2][0] * m1[0][2] + m0[2][1] * m1[1][2] + m0[2][2] * m1[2][2] + m0[2][3] * m1[3][2],
                                                                          m0[2][3]),
      new Vector4(
        m0[3][0] * m1[0][0] + m0[3][1] * m1[1][0] + m0[3][2] * m1[2][0] + m0[3][3] * m1[3][0],
        m0[3][0] * m1[0][1] + m0[3][1] * m1[1][1] + m0[3][2] * m1[2][1] + m0[3][3] * m1[3][1],
        m0[3][0] * m1[0][2] + m0[3][1] * m1[1][2] + m0[3][2] * m1[2][2] + m0[3][3] * m1[3][2],
                                                                          m0[3][3])
    );
  }

  public static bool operator==(Matrix4 m0, Matrix4 m1) {
    return m0[0] == m1[0] && m0[1] == m1[1] && m0[2] == m1[2] && m0[3] == m1[3];
  }

  public static bool operator!=(Matrix4 m0, Matrix4 m1) {
    return !(m0 == m1);
  }

  public override bool Equals(System.Object obj) {
    return obj is Matrix4 && this == (Matrix4)obj;
  }

  public bool Equals(Matrix4 m) {
    return this == m;
  }

  public override int GetHashCode() {
    return ((this[0].GetHashCode() ^ this[1].GetHashCode()) ^ this[2].GetHashCode()) ^ this[3].GetHashCode();
  }

  public static Matrix4 Scale(float scaleX, float scaleY, float scaleZ) {
    return new Matrix4(
        scaleX, 0.0f, 0.0f, 0.0f,
        0.0f, scaleY, 0.0f, 0.0f,
        0.0f, 0.0f, scaleZ, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f);
  }

  public static Matrix4 RotX(float radians) {
    float cs = (float)Math.Cos(radians);
    float sn = (float)Math.Sin(radians);
    return new Matrix4(
      1.0f, 0.0f, 0.0f, 0.0f,
      0.0f,   cs,   sn, 0.0f,
      0.0f,  -sn,   cs, 0.0f,
      0.0f, 0.0f, 0.0f, 1.0f);
  }

  public static Matrix4 RotY(float radians) {
    float cs = (float)Math.Cos(radians);
    float sn = (float)Math.Sin(radians);
    return new Matrix4(
        cs, 0.0f,   sn, 0.0f,
      0.0f, 1.0f, 0.0f, 0.0f,
       -sn, 0.0f,   cs, 0.0f,
      0.0f, 0.0f, 0.0f, 1.0f);
  }

  public static Matrix4 RotZ(float radians) {
    float cs = (float)Math.Cos(radians);
    float sn = (float)Math.Sin(radians);
    return new Matrix4(
        cs,   sn, 0.0f, 0.0f,
       -sn,   cs, 0.0f, 0.0f,
      0.0f, 0.0f, 1.0f, 0.0f,
      0.0f, 0.0f, 0.0f, 1.0f);
  }

  public static Matrix4 Ortho(float width, float height, float zNear, float zFar) {
    float d = zFar - zNear;
    return new Matrix4(
      2.0f / width,          0.0f,             0.0f, 0.0f,
              0.0f, 2.0f / height,             0.0f, 0.0f,
              0.0f,          0.0f,   1.0f / d, 0.0f,
              0.0f,          0.0f, -zNear / d, 1.0f);
  }

  public static Matrix4 Ortho(float left, float right, float bottom, float top, float zNear, float zFar) {
    float xScale = 2.0f / (right - left);
    float yScale = 2.0f / (top - bottom);
    float f0 = -(right + left) / (right - left);
    float f1 = -(top + bottom) / (top - bottom);
    float d = zFar - zNear;
    return new Matrix4(
      xScale,   0.0f,       0.0f, 0.0f,
        0.0f, yScale,       0.0f, 0.0f,
        0.0f,   0.0f,   1.0f / d, 0.0f,
          f0,     f1, -zNear / d, 1.0f);
  }

  public static Matrix4 Perspective(float width, float height, float zNear, float zFar) {
    float d = zFar - zNear;
    return new Matrix4(
      2.0f * zNear / width,                  0.0f,              0.0f, 0.0f,
                      0.0f, 2.0f * zNear / height,              0.0f, 0.0f,
                      0.0f,                  0.0f,          zFar / d, 1.0f,
                      0.0f,                  0.0f, -zNear * zFar / d, 0.0f);
  }

  public static Matrix4 Perspective(float left, float right, float bottom, float top, float zNear, float zFar) {
    float xScale = 2.0f / (right - left);
    float yScale = 2.0f / (top - bottom);
    float xShear = (right + left) / (right - left);
    float yShear = (top + bottom) / (top - bottom);
    float d = zFar - zNear;
    return new Matrix4(
      zNear * xScale,           0.0f,              0.0f, 0.0f,
                0.0f, zNear * yScale,              0.0f, 0.0f,
              xShear,         yShear,          zFar / d, 1.0f,
                0.0f,           0.0f, -zNear * zFar / d, 0.0f);
  }

  public static Matrix4 PerspectiveFov(float fovY, float aspect, float zNear, float zFar) {
    float yScale = (float)(1.0f / Math.Tan(fovY * 0.5));
    float d = zFar - zNear;
    return new Matrix4(
      yScale / aspect,   0.0f,              0.0f, 0.0f,
                 0.0f, yScale,              0.0f, 0.0f,
                 0.0f,   0.0f,          zFar / d, 1.0f,
                 0.0f,   0.0f, -zNear * zFar / d, 0.0f);
  }

  public static Matrix4 Viewport(float width, float height) {
    float w2 = width * 0.5f;
    float h2 = height * 0.5f;
    return new Matrix4(
        w2, 0.0f, 0.0f, 0.0f,
      0.0f,   h2, 0.0f, 0.0f,
      0.0f, 0.0f, 1.0f, 0.0f,
        w2,   h2, 0.0f, 1.0f);
  }

  public static Matrix4 Transpose(Matrix4 m) {
    return new Matrix4(
      m[0][0], m[1][0], m[2][0], m[3][0],
      m[0][1], m[1][1], m[2][1], m[3][1],
      m[0][2], m[1][2], m[2][2], m[3][2],
      m[0][3], m[1][3], m[2][3], m[3][3]);
  }

  public static bool IsAffine(Matrix4 m) {
    Vector4 v0 = new Vector4(m[0][3], m[1][3], m[2][3], m[3][3]);
    Vector4 v1 = new Vector4(0.0f, 0.0f, 0.0f, 1.0f);
    return Math.Abs(Vector4.LengthSquared(v0 - v1)) < 0.00001f;
  }

  public static float Determinant(Matrix4 m) {
    float v0 = m[2][0] * m[3][1] - m[2][1] * m[3][0];
    float v1 = m[2][0] * m[3][2] - m[2][2] * m[3][0];
    float v2 = m[2][0] * m[3][3] - m[2][3] * m[3][0];
    float v3 = m[2][1] * m[3][2] - m[2][2] * m[3][1];
    float v4 = m[2][1] * m[3][3] - m[2][3] * m[3][1];
    float v5 = m[2][2] * m[3][3] - m[2][3] * m[3][2];

    float t00 =   v5 * m[1][1] - v4 * m[1][2] + v3 * m[1][3];
    float t10 = -(v5 * m[1][0] - v2 * m[1][2] + v1 * m[1][3]);
    float t20 =   v4 * m[1][0] - v2 * m[1][1] + v0 * m[1][3];
    float t30 = -(v3 * m[1][0] - v1 * m[1][1] + v0 * m[1][2]);

    return t00 * m[0][0] + t10 * m[0][1] + t20 * m[0][2] + t30 * m[0][3];
  }

  public static Matrix4 Inverse(Matrix4 m) {
    return Inverse(m, Determinant(m));
  }

  public static Matrix4 Inverse(Matrix4 m, float determinant) {
    float invDet = 1.0f / determinant;

    float v0 = m[2][0] * m[3][1] - m[2][1] * m[3][0];
    float v1 = m[2][0] * m[3][2] - m[2][2] * m[3][0];
    float v2 = m[2][0] * m[3][3] - m[2][3] * m[3][0];
    float v3 = m[2][1] * m[3][2] - m[2][2] * m[3][1];
    float v4 = m[2][1] * m[3][3] - m[2][3] * m[3][1];
    float v5 = m[2][2] * m[3][3] - m[2][3] * m[3][2];

    float t00 = v5 * m[1][1] - v4 * m[1][2] + v3 * m[1][3];
    float t10 = -(v5 * m[1][0] - v2 * m[1][2] + v1 * m[1][3]);
    float t20 = v4 * m[1][0] - v2 * m[1][1] + v0 * m[1][3];
    float t30 = -(v3 * m[1][0] - v1 * m[1][1] + v0 * m[1][2]);

    float d00 = t00 * invDet;
    float d10 = t10 * invDet;
    float d20 = t20 * invDet;
    float d30 = t30 * invDet;

    float d01 = -(v5 * m[0][1] - v4 * m[0][2] + v3 * m[0][3]) * invDet;
    float d11 = (v5 * m[0][0] - v2 * m[0][2] + v1 * m[0][3]) * invDet;
    float d21 = -(v4 * m[0][0] - v2 * m[0][1] + v0 * m[0][3]) * invDet;
    float d31 = (v3 * m[0][0] - v1 * m[0][1] + v0 * m[0][2]) * invDet;

    v0 = m[1][0] * m[3][1] - m[1][1] * m[3][0];
    v1 = m[1][0] * m[3][2] - m[1][2] * m[3][0];
    v2 = m[1][0] * m[3][3] - m[1][3] * m[3][0];
    v3 = m[1][1] * m[3][2] - m[1][2] * m[3][1];
    v4 = m[1][1] * m[3][3] - m[1][3] * m[3][1];
    v5 = m[1][2] * m[3][3] - m[1][3] * m[3][2];

    float d02 = (v5 * m[0][1] - v4 * m[0][2] + v3 * m[0][3]) * invDet;
    float d12 = -(v5 * m[0][0] - v2 * m[0][2] + v1 * m[0][3]) * invDet;
    float d22 = (v4 * m[0][0] - v2 * m[0][1] + v0 * m[0][3]) * invDet;
    float d32 = -(v3 * m[0][0] - v1 * m[0][1] + v0 * m[0][2]) * invDet;

    v0 = m[2][1] * m[1][0] - m[2][0] * m[1][1];
    v1 = m[2][2] * m[1][0] - m[2][0] * m[1][2];
    v2 = m[2][3] * m[1][0] - m[2][0] * m[1][3];
    v3 = m[2][2] * m[1][1] - m[2][1] * m[1][2];
    v4 = m[2][3] * m[1][1] - m[2][1] * m[1][3];
    v5 = m[2][3] * m[1][2] - m[2][2] * m[1][3];

    float d03 = -(v5 * m[0][1] - v4 * m[0][2] + v3 * m[0][3]) * invDet;
    float d13 = (v5 * m[0][0] - v2 * m[0][2] + v1 * m[0][3]) * invDet;
    float d23 = -(v4 * m[0][0] - v2 * m[0][1] + v0 * m[0][3]) * invDet;
    float d33 = (v3 * m[0][0] - v1 * m[0][1] + v0 * m[0][2]) * invDet;

    return new Matrix4(
      d00, d01, d02, d03,
      d10, d11, d12, d13,
      d20, d21, d22, d23,
      d30, d31, d32, d33);
  }

}

}

