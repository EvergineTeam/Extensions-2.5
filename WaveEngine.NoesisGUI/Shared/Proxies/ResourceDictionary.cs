//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ResourceDictionary : BaseDictionary {
  internal new static ResourceDictionary CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ResourceDictionary(cPtr, cMemoryOwn);
  }

  internal ResourceDictionary(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ResourceDictionary obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public object this[string key] {
    get {
      if (key == null) {
        throw new ArgumentNullException("key");
      }
      return FindName(key);
    }
    set {
      if (key == null) {
        throw new ArgumentNullException("key");
      }
      if (value == null) {
        throw new ArgumentNullException("value");
      }
      UpdateName(key, value);
    }
  }

  public ResourceDictionary() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(ResourceDictionary).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_ResourceDictionary();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public object FindName(string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ResourceDictionary_FindName(swigCPtr, name != null ? name : string.Empty);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  public void RegisterName(string name, object arg1) {
    NoesisGUI_PINVOKE.ResourceDictionary_RegisterName(swigCPtr, name != null ? name : string.Empty, Noesis.Extend.GetInstanceHandle(arg1));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void UnregisterName(string name) {
    NoesisGUI_PINVOKE.ResourceDictionary_UnregisterName(swigCPtr, name != null ? name : string.Empty);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateName(string name, object arg1) {
    NoesisGUI_PINVOKE.ResourceDictionary_UpdateName(swigCPtr, name != null ? name : string.Empty, Noesis.Extend.GetInstanceHandle(arg1));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public ResourceDictionaryCollection MergedDictionaries {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ResourceDictionary_MergedDictionaries_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (ResourceDictionaryCollection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public string Source {
    set {
      NoesisGUI_PINVOKE.ResourceDictionary_Source_set(swigCPtr, value != null ? value : string.Empty);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.ResourceDictionary_Source_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public uint Count {
    get {
      uint ret = NoesisGUI_PINVOKE.ResourceDictionary_Count_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsReadOnly {
    get {
      bool ret = NoesisGUI_PINVOKE.ResourceDictionary_IsReadOnly_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ResourceDictionary_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_ResourceDictionary(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

