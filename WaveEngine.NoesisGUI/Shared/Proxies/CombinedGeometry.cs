//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class CombinedGeometry : Geometry {
  internal new static CombinedGeometry CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new CombinedGeometry(cPtr, cMemoryOwn);
  }

  internal CombinedGeometry(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(CombinedGeometry obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public CombinedGeometry() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    registerExtend = false;
    return NoesisGUI_PINVOKE.new_CombinedGeometry__SWIG_0();
  }

  public CombinedGeometry(Geometry geometry1, Geometry geometry2, GeometryCombineMode mode) : this(NoesisGUI_PINVOKE.new_CombinedGeometry__SWIG_1(Geometry.getCPtr(geometry1), Geometry.getCPtr(geometry2), (int)mode), true) {
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool IsEmpty() {
    bool ret = NoesisGUI_PINVOKE.CombinedGeometry_IsEmpty(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DependencyProperty Geometry1Property {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CombinedGeometry_Geometry1Property_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty Geometry2Property {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CombinedGeometry_Geometry2Property_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty GeometryCombineModeProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CombinedGeometry_GeometryCombineModeProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Geometry Geometry1 {
    set {
      NoesisGUI_PINVOKE.CombinedGeometry_Geometry1_set(swigCPtr, Geometry.getCPtr(value));
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CombinedGeometry_Geometry1_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Geometry)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Geometry Geometry2 {
    set {
      NoesisGUI_PINVOKE.CombinedGeometry_Geometry2_set(swigCPtr, Geometry.getCPtr(value));
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CombinedGeometry_Geometry2_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Geometry)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public GeometryCombineMode GeometryCombineMode {
    set {
      NoesisGUI_PINVOKE.CombinedGeometry_GeometryCombineMode_set(swigCPtr, (int)value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      GeometryCombineMode ret = (GeometryCombineMode)NoesisGUI_PINVOKE.CombinedGeometry_GeometryCombineMode_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.CombinedGeometry_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

