//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections;

namespace Noesis
{

public class SelectionChangedEventArgs : RoutedEventArgs {
  private HandleRef swigCPtr;

  internal SelectionChangedEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SelectionChangedEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SelectionChangedEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_SelectionChangedEventArgs(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public IList AddedItems {
    get {
      return new ListWrapper(this, 0);
    }
  }

  public IList RemovedItems {
    get {
      return new ListWrapper(this, 1);
    }
  }

  private struct ListWrapper : IList {
    private SelectionChangedEventArgs _e;
    private int _listId;
    public ListWrapper(SelectionChangedEventArgs e, int listId) {
      _e = e;
      _listId = listId;
    }
    // IList Members 
    public int Add(object value) {
      throw new InvalidOperationException("Can't add an item on a read only list");
    }
    public void Clear() {
      throw new InvalidOperationException("Can't clear a read only list");
    }
    public bool Contains(object value) {
      return _e.ContainsListHelper(_listId, value);
    }
    public int IndexOf(object value) {
      return _e.IndexOfListHelper(_listId, value);
    }
    public void Insert(int index, object value) {
      throw new InvalidOperationException("Can't insert an item on a read only list");
    }
    public bool IsFixedSize { get { return true; } }
    public bool IsReadOnly { get { return true; } }
    public void Remove(object value) {
      throw new InvalidOperationException("Can't remove an item on a read only list");
    }
    public void RemoveAt(int index) {
      throw new InvalidOperationException("Can't remove an item on a read only list");
    }
    public object this[int index] {
      get {
        return _e.GetItemListHelper(_listId, index);
      }
      set {
        throw new InvalidOperationException("Can't set an item on a read only list");
      }
    }
    // ICollection Members 
    public void CopyTo(Array array, int index) {
      int j = index;
      int count = Count;
      for (int i = 0; i < count; i++) {
        array.SetValue(_e.GetItemListHelper(_listId, i), j);
        j++;
      }
    }
    public int Count { get { return _e.CountListHelper(_listId); } }
    public bool IsSynchronized { get { return false; } }
    public object SyncRoot { get { return this; } }
    // IEnumerable Members
    public IEnumerator GetEnumerator() {
      return new ListWrapperEnumerator(this);
    }
    private struct ListWrapperEnumerator : IEnumerator {
      private ListWrapper _list;
      private int _index;
      object IEnumerator.Current {
        get { return Current; }
      }
      public object Current {
        get { return this._list[this._index]; }
      }
      public bool MoveNext() {
        if (++this._index >= (int)this._list.Count) {
          return false;
        }
        return true;
      }
      public void Reset() {
        this._index = -1;
      }
      public ListWrapperEnumerator(ListWrapper l) {
        this._list = l;
        this._index = -1;
      }
    }
  }

  public SelectionChangedEventArgs(object s) : this(NoesisGUI_PINVOKE.new_SelectionChangedEventArgs(Noesis.Extend.GetInstanceHandle(s)), true) {
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  private bool ContainsListHelper(int listId, object value) {
    bool ret = NoesisGUI_PINVOKE.SelectionChangedEventArgs_ContainsListHelper(swigCPtr, listId, Noesis.Extend.GetInstanceHandle(value));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int IndexOfListHelper(int listId, object value) {
    int ret = NoesisGUI_PINVOKE.SelectionChangedEventArgs_IndexOfListHelper(swigCPtr, listId, Noesis.Extend.GetInstanceHandle(value));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private object GetItemListHelper(int listId, int index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.SelectionChangedEventArgs_GetItemListHelper(swigCPtr, listId, index);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  private int CountListHelper(int listId) {
    int ret = NoesisGUI_PINVOKE.SelectionChangedEventArgs_CountListHelper(swigCPtr, listId);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

