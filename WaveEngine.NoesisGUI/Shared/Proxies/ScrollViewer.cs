//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class ScrollViewer : ContentControl {
  internal new static ScrollViewer CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ScrollViewer(cPtr, cMemoryOwn);
  }

  internal ScrollViewer(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ScrollViewer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events
  #region ScrollChanged
  public delegate void ScrollChangedHandler(object sender, ScrollChangedEventArgs e);
  public event ScrollChangedHandler ScrollChanged {
    add {
      if (!_ScrollChanged.ContainsKey(swigCPtr.Handle)) {
        _ScrollChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_ScrollViewer_ScrollChanged(_raiseScrollChanged, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _ScrollChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_ScrollChanged.ContainsKey(swigCPtr.Handle)) {

        _ScrollChanged[swigCPtr.Handle] -= value;

        if (_ScrollChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_ScrollViewer_ScrollChanged(_raiseScrollChanged, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();

          _ScrollChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseScrollChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseScrollChangedCallback _raiseScrollChanged = RaiseScrollChanged;

  [MonoPInvokeCallback(typeof(RaiseScrollChangedCallback))]
  private static void RaiseScrollChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_ScrollChanged.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for ScrollChanged event");
      }
      if (sender == IntPtr.Zero && e == IntPtr.Zero) {
        _ScrollChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        ScrollChangedHandler handler = _ScrollChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new ScrollChangedEventArgs(e, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, ScrollChangedHandler> _ScrollChanged =
      new Dictionary<IntPtr, ScrollChangedHandler>();
  #endregion

  #endregion

  public ScrollViewer() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(ScrollViewer).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_ScrollViewer();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public static bool GetCanContentScroll(DependencyObject element) {
    bool ret = NoesisGUI_PINVOKE.ScrollViewer_GetCanContentScroll(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetCanContentScroll(DependencyObject element, bool canScroll) {
    NoesisGUI_PINVOKE.ScrollViewer_SetCanContentScroll(DependencyObject.getCPtr(element), canScroll);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static ScrollBarVisibility GetHorizontalScrollBarVisibility(DependencyObject element) {
    ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.ScrollViewer_GetHorizontalScrollBarVisibility(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetHorizontalScrollBarVisibility(DependencyObject element, ScrollBarVisibility visibility) {
    NoesisGUI_PINVOKE.ScrollViewer_SetHorizontalScrollBarVisibility(DependencyObject.getCPtr(element), (int)visibility);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static ScrollBarVisibility GetVerticalScrollBarVisibility(DependencyObject element) {
    ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.ScrollViewer_GetVerticalScrollBarVisibility(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetVerticalScrollBarVisibility(DependencyObject element, ScrollBarVisibility visibility) {
    NoesisGUI_PINVOKE.ScrollViewer_SetVerticalScrollBarVisibility(DependencyObject.getCPtr(element), (int)visibility);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool GetIsDeferredScrollingEnabled(DependencyObject element) {
    bool ret = NoesisGUI_PINVOKE.ScrollViewer_GetIsDeferredScrollingEnabled(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetIsDeferredScrollingEnabled(DependencyObject element, bool value) {
    NoesisGUI_PINVOKE.ScrollViewer_SetIsDeferredScrollingEnabled(DependencyObject.getCPtr(element), value);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static PanningMode GetPanningMode(DependencyObject element) {
    PanningMode ret = (PanningMode)NoesisGUI_PINVOKE.ScrollViewer_GetPanningMode(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetPanningMode(DependencyObject element, PanningMode panningMode) {
    NoesisGUI_PINVOKE.ScrollViewer_SetPanningMode(DependencyObject.getCPtr(element), (int)panningMode);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static float GetPanningDeceleration(DependencyObject element) {
    float ret = NoesisGUI_PINVOKE.ScrollViewer_GetPanningDeceleration(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetPanningDeceleration(DependencyObject element, float deceleration) {
    NoesisGUI_PINVOKE.ScrollViewer_SetPanningDeceleration(DependencyObject.getCPtr(element), deceleration);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static float GetPanningRatio(DependencyObject element) {
    float ret = NoesisGUI_PINVOKE.ScrollViewer_GetPanningRatio(DependencyObject.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetPanningRatio(DependencyObject element, float panningRatio) {
    NoesisGUI_PINVOKE.ScrollViewer_SetPanningRatio(DependencyObject.getCPtr(element), panningRatio);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void LineLeft() {
    NoesisGUI_PINVOKE.ScrollViewer_LineLeft(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void LineRight() {
    NoesisGUI_PINVOKE.ScrollViewer_LineRight(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void LineUp() {
    NoesisGUI_PINVOKE.ScrollViewer_LineUp(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void LineDown() {
    NoesisGUI_PINVOKE.ScrollViewer_LineDown(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void PageLeft() {
    NoesisGUI_PINVOKE.ScrollViewer_PageLeft(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void PageRight() {
    NoesisGUI_PINVOKE.ScrollViewer_PageRight(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void PageUp() {
    NoesisGUI_PINVOKE.ScrollViewer_PageUp(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void PageDown() {
    NoesisGUI_PINVOKE.ScrollViewer_PageDown(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToLeftEnd() {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToLeftEnd(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToRightEnd() {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToRightEnd(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToTop() {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToTop(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToBottom() {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToBottom(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToHome() {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToHome(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToEnd() {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToEnd(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToHorizontalOffset(float offset) {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToHorizontalOffset(swigCPtr, offset);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScrollToVerticalOffset(float offset) {
    NoesisGUI_PINVOKE.ScrollViewer_ScrollToVerticalOffset(swigCPtr, offset);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void InvalidateScrollInfo() {
    NoesisGUI_PINVOKE.ScrollViewer_InvalidateScrollInfo(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public static DependencyProperty CanContentScrollProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_CanContentScrollProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ComputedHorizontalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ComputedHorizontalScrollBarVisibilityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ComputedVerticalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ComputedVerticalScrollBarVisibilityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ExtentHeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ExtentHeightProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ExtentWidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ExtentWidthProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HorizontalOffsetProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_HorizontalOffsetProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HorizontalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_HorizontalScrollBarVisibilityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsDeferredScrollingEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_IsDeferredScrollingEnabledProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ScrollableHeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ScrollableHeightProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ScrollableWidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ScrollableWidthProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VerticalOffsetProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_VerticalOffsetProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VerticalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_VerticalScrollBarVisibilityProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ViewportHeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ViewportHeightProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ViewportWidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_ViewportWidthProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty PanningModeProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_PanningModeProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty PanningDecelerationProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_PanningDecelerationProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty PanningRatioProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollViewer_PanningRatioProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool CanContentScroll {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_CanContentScroll_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.ScrollViewer_CanContentScroll_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ScrollBarVisibility HorizontalScrollBarVisibility {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_HorizontalScrollBarVisibility_set(swigCPtr, (int)value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.ScrollViewer_HorizontalScrollBarVisibility_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ScrollBarVisibility VerticalScrollBarVisibility {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_VerticalScrollBarVisibility_set(swigCPtr, (int)value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.ScrollViewer_VerticalScrollBarVisibility_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsDeferredScrollingEnabled {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_IsDeferredScrollingEnabled_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.ScrollViewer_IsDeferredScrollingEnabled_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PanningMode PanningMode {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_PanningMode_set(swigCPtr, (int)value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      PanningMode ret = (PanningMode)NoesisGUI_PINVOKE.ScrollViewer_PanningMode_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float PanningDeceleration {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_PanningDeceleration_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_PanningDeceleration_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float PanningRatio {
    set {
      NoesisGUI_PINVOKE.ScrollViewer_PanningRatio_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_PanningRatio_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Visibility ComputedHorizontalScrollBarVisibility {
    get {
      Visibility ret = (Visibility)NoesisGUI_PINVOKE.ScrollViewer_ComputedHorizontalScrollBarVisibility_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Visibility ComputedVerticalScrollBarVisibility {
    get {
      Visibility ret = (Visibility)NoesisGUI_PINVOKE.ScrollViewer_ComputedVerticalScrollBarVisibility_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ExtentWidth {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_ExtentWidth_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ExtentHeight {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_ExtentHeight_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float HorizontalOffset {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_HorizontalOffset_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float VerticalOffset {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_VerticalOffset_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ScrollableWidth {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_ScrollableWidth_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ScrollableHeight {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_ScrollableHeight_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ViewportWidth {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_ViewportWidth_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ViewportHeight {
    get {
      float ret = NoesisGUI_PINVOKE.ScrollViewer_ViewportHeight_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ScrollViewer_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_ScrollViewer(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

