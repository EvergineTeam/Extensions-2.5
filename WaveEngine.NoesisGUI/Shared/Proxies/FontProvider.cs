//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.IO;

namespace Noesis
{

public class FontProvider : BaseComponent {
  internal new static FontProvider CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new FontProvider(cPtr, cMemoryOwn);
  }

  internal FontProvider(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(FontProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected FontProvider() {
  }

  /// <summary>
  /// Scans a folder looking for all font files available. For each file, RegisterFont() should be
  /// called to cache all font information in the base provider implementation.
  /// </summary>
  /// <param name="folder">Path to the folder being scanned.</param>
  public virtual void ScanFolder(string folder) {
  }

  /// <summary>
  /// Opens font file for reading returning a stream.
  /// </summary>
  /// <param name="folder">Path to the folder where font should be found.</param>
  /// <param name="id">Font ID, typically file name.</param>
  public virtual System.IO.Stream OpenFont(string folder, string id) {
    return null;
  }

  protected void RegisterFont(string folder, string id) {
    RegisterFontHelper(folder, id);
  }

  private void RegisterFontHelper(string folder, string id) {
    NoesisGUI_PINVOKE.FontProvider_RegisterFontHelper(swigCPtr, folder != null ? folder : string.Empty, id != null ? id : string.Empty);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.FontProvider_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_FontProvider(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

