//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class ListBoxItem : ContentControl {
  internal new static ListBoxItem CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ListBoxItem(cPtr, cMemoryOwn);
  }

  internal ListBoxItem(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ListBoxItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events
  #region Selected
  public delegate void SelectedHandler(object sender, RoutedEventArgs e);
  public event SelectedHandler Selected {
    add {
      if (!_Selected.ContainsKey(swigCPtr.Handle)) {
        _Selected.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_ListBoxItem_Selected(_raiseSelected, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _Selected[swigCPtr.Handle] += value;
    }
    remove {
      if (_Selected.ContainsKey(swigCPtr.Handle)) {

        _Selected[swigCPtr.Handle] -= value;

        if (_Selected[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_ListBoxItem_Selected(_raiseSelected, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();

          _Selected.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseSelectedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseSelectedCallback _raiseSelected = RaiseSelected;

  [MonoPInvokeCallback(typeof(RaiseSelectedCallback))]
  private static void RaiseSelected(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_Selected.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for Selected event");
      }
      if (sender == IntPtr.Zero && e == IntPtr.Zero) {
        _Selected.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        SelectedHandler handler = _Selected[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, SelectedHandler> _Selected =
      new Dictionary<IntPtr, SelectedHandler>();
  #endregion

  #region Unselected
  public delegate void UnselectedHandler(object sender, RoutedEventArgs e);
  public event UnselectedHandler Unselected {
    add {
      if (!_Unselected.ContainsKey(swigCPtr.Handle)) {
        _Unselected.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_ListBoxItem_Unselected(_raiseUnselected, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _Unselected[swigCPtr.Handle] += value;
    }
    remove {
      if (_Unselected.ContainsKey(swigCPtr.Handle)) {

        _Unselected[swigCPtr.Handle] -= value;

        if (_Unselected[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_ListBoxItem_Unselected(_raiseUnselected, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();

          _Unselected.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseUnselectedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseUnselectedCallback _raiseUnselected = RaiseUnselected;

  [MonoPInvokeCallback(typeof(RaiseUnselectedCallback))]
  private static void RaiseUnselected(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_Unselected.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for Unselected event");
      }
      if (sender == IntPtr.Zero && e == IntPtr.Zero) {
        _Unselected.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        UnselectedHandler handler = _Unselected[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, UnselectedHandler> _Unselected =
      new Dictionary<IntPtr, UnselectedHandler>();
  #endregion

  #endregion

  public ListBoxItem() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(ListBoxItem).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_ListBoxItem();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public static DependencyProperty IsSelectedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ListBoxItem_IsSelectedProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool IsSelected {
    set {
      NoesisGUI_PINVOKE.ListBoxItem_IsSelected_set(swigCPtr, value);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.ListBoxItem_IsSelected_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ListBoxItem_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_ListBoxItem(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

