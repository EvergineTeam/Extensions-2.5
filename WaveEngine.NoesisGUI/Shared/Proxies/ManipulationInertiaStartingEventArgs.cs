//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ManipulationInertiaStartingEventArgs : RoutedEventArgs {
  private HandleRef swigCPtr;

  internal ManipulationInertiaStartingEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ManipulationInertiaStartingEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ManipulationInertiaStartingEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_ManipulationInertiaStartingEventArgs(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Noesis.UIElement ManipulationContainer {
    get {
      return GetManipulationContainerHelper();
    }
  }

  public Noesis.Point ManipulationOrigin {
    get {
      return GetManipulationOriginHelper();
    }
    set {
      SetManipulationOriginHelper(value);
    }
  }

  public Noesis.ManipulationVelocities InitialVelocities {
    get {
      return GetInitialVelocitiesHelper();
    }
  }

  public Noesis.InertiaExpansionBehavior ExpansionBehavior {
    get {
      return GetExpansionBehaviorHelper();
    }
    set {
      SetExpansionBehaviorHelper(value);
    }
  }

  public Noesis.InertiaTranslationBehavior TranslationBehavior {
    get {
      return GetTranslationBehaviorHelper();
    }
    set {
      SetTranslationBehaviorHelper(value);
    }
  }

  public Noesis.InertiaRotationBehavior RotationBehavior {
    get {
      return GetRotationBehaviorHelper();
    }
    set {
      SetRotationBehaviorHelper(value);
    }
  }

  public ManipulationInertiaStartingEventArgs(object s, RoutedEvent e, Visual manipulationContainer, Point manipulationOrigin, ManipulationVelocities initialVelocities) : this(NoesisGUI_PINVOKE.new_ManipulationInertiaStartingEventArgs(Noesis.Extend.GetInstanceHandle(s), RoutedEvent.getCPtr(e), Visual.getCPtr(manipulationContainer), ref manipulationOrigin, ManipulationVelocities.getCPtr(initialVelocities)), true) {
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Cancel() {
    bool ret = NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_Cancel(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private UIElement GetManipulationContainerHelper() {
    IntPtr cPtr = NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_GetManipulationContainerHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
  }

  private Point GetManipulationOriginHelper() {
    IntPtr ret = NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_GetManipulationOriginHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Point>(ret);
    }
    else {
      return new Point();
    }
  }

  private void SetManipulationOriginHelper(Point origin) {
    NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_SetManipulationOriginHelper(swigCPtr, ref origin);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  private ManipulationVelocities GetInitialVelocitiesHelper() {
    ManipulationVelocities ret = new ManipulationVelocities(NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_GetInitialVelocitiesHelper(swigCPtr), false);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private InertiaExpansionBehavior GetExpansionBehaviorHelper() {
    InertiaExpansionBehavior ret = new InertiaExpansionBehavior(NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_GetExpansionBehaviorHelper(swigCPtr), false);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetExpansionBehaviorHelper(InertiaExpansionBehavior exp) {
    NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_SetExpansionBehaviorHelper(swigCPtr, InertiaExpansionBehavior.getCPtr(exp));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  private InertiaTranslationBehavior GetTranslationBehaviorHelper() {
    InertiaTranslationBehavior ret = new InertiaTranslationBehavior(NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_GetTranslationBehaviorHelper(swigCPtr), false);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetTranslationBehaviorHelper(InertiaTranslationBehavior trans) {
    NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_SetTranslationBehaviorHelper(swigCPtr, InertiaTranslationBehavior.getCPtr(trans));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  private InertiaRotationBehavior GetRotationBehaviorHelper() {
    InertiaRotationBehavior ret = new InertiaRotationBehavior(NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_GetRotationBehaviorHelper(swigCPtr), false);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetRotationBehaviorHelper(InertiaRotationBehavior rot) {
    NoesisGUI_PINVOKE.ManipulationInertiaStartingEventArgs_SetRotationBehaviorHelper(swigCPtr, InertiaRotationBehavior.getCPtr(rot));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

}

}

