//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class TreeView : ItemsControl {
  internal new static TreeView CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new TreeView(cPtr, cMemoryOwn);
  }

  internal TreeView(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TreeView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events

  #region SelectedItemChanged
  public delegate void SelectedItemChangedHandler(object oldValue, object newValue);
  public event SelectedItemChangedHandler SelectedItemChanged {
    add {
      if (!_SelectedItemChanged.ContainsKey(swigCPtr.Handle)) {
        _SelectedItemChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_TreeView_SelectedItemChanged(_raiseSelectedItemChanged, swigCPtr.Handle);
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      }

      _SelectedItemChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_SelectedItemChanged.ContainsKey(swigCPtr.Handle)) {

        _SelectedItemChanged[swigCPtr.Handle] -= value;

        if (_SelectedItemChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_TreeView_SelectedItemChanged(_raiseSelectedItemChanged, swigCPtr.Handle);
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          _SelectedItemChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseSelectedItemChangedCallback(IntPtr cPtr, IntPtr oldValue, IntPtr newValue);
  private static RaiseSelectedItemChangedCallback _raiseSelectedItemChanged = RaiseSelectedItemChanged;

  [MonoPInvokeCallback(typeof(RaiseSelectedItemChangedCallback))]
  private static void RaiseSelectedItemChanged(IntPtr cPtr, IntPtr oldValue, IntPtr newValue) {
    try {
      if (!_SelectedItemChanged.ContainsKey(cPtr)) {
        throw new InvalidOperationException("Delegate not registered for SelectedItemChanged event");
      }
      if (oldValue == IntPtr.Zero && newValue == IntPtr.Zero) {
        _SelectedItemChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        SelectedItemChangedHandler handler = _SelectedItemChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(oldValue, false), Noesis.Extend.GetProxy(newValue, false));
        }
      }
    }
    catch (Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static Dictionary<IntPtr, SelectedItemChangedHandler> _SelectedItemChanged =
      new Dictionary<IntPtr, SelectedItemChangedHandler>();
  #endregion

  #endregion

  public TreeView() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(TreeView).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_TreeView();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public static DependencyProperty SelectedItemProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedItemProperty_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object SelectedItem {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedItem_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.TreeView_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_TreeView(Marshal.StringToHGlobalAnsi(typeName));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return nativeType;
  }
}

}

