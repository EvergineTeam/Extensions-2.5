//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Keyboard : BaseComponent {
  internal new static Keyboard CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Keyboard(cPtr, cMemoryOwn);
  }

  internal Keyboard(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Keyboard obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Keyboard() {
  }

  public void ResetState() {
    NoesisGUI_PINVOKE.Keyboard_ResetState(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetModifiers() {
    uint ret = NoesisGUI_PINVOKE.Keyboard_GetModifiers(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetKeyStates(Key key) {
    uint ret = NoesisGUI_PINVOKE.Keyboard_GetKeyStates(swigCPtr, (int)key);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsKeyDown(Key key) {
    bool ret = NoesisGUI_PINVOKE.Keyboard_IsKeyDown(swigCPtr, (int)key);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsKeyUp(Key key) {
    bool ret = NoesisGUI_PINVOKE.Keyboard_IsKeyUp(swigCPtr, (int)key);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsKeyToggled(Key key) {
    bool ret = NoesisGUI_PINVOKE.Keyboard_IsKeyToggled(swigCPtr, (int)key);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UIElement GetFocused() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_GetFocused(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
  }

  public UIElement Focus(UIElement element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_Focus(swigCPtr, UIElement.getCPtr(element));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Keyboard_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

