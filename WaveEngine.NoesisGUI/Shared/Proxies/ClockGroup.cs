//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ClockGroup : Clock {
  internal new static ClockGroup CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ClockGroup(cPtr, cMemoryOwn);
  }

  internal ClockGroup(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ClockGroup obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected ClockGroup() {
  }

  public ClockGroup(TimelineGroup timelineGroup, bool controllable) : this(NoesisGUI_PINVOKE.new_ClockGroup(TimelineGroup.getCPtr(timelineGroup), controllable), true) {
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(Clock clock) {
    NoesisGUI_PINVOKE.ClockGroup_Add(swigCPtr, Clock.getCPtr(clock));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public Clock GetChild(uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ClockGroup_GetChild(swigCPtr, index);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return (Clock)Noesis.Extend.GetProxy(cPtr, false);
  }

  public bool Tick(double time, ClockState parentState) {
    bool ret = NoesisGUI_PINVOKE.ClockGroup_Tick(swigCPtr, time, (int)parentState);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ChildrenCount {
    get {
      uint ret = NoesisGUI_PINVOKE.ClockGroup_ChildrenCount_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ClockGroup_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

