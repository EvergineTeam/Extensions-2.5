//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections;

namespace Noesis
{

public class CollectionView : BaseComponent, System.Collections.IEnumerable {
  internal new static CollectionView CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new CollectionView(cPtr, cMemoryOwn);
  }

  internal CollectionView(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(CollectionView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public CollectionView(System.Collections.IEnumerable collection) :
    base(CreateCollectionView(collection), true) {
  }

  public System.Collections.IEnumerable SourceCollection {
    get {
      return (System.Collections.IEnumerable)GetSourceCollectionHelper();
    }
  }

  private struct CollectionViewEnumerator : System.Collections.IEnumerator {
    object System.Collections.IEnumerator.Current {
      get { return Current; }
    }
    public object Current {
      get { return this._collectionView.GetItemAt((uint)this._index); }
    }
    public bool MoveNext() {
      if (++this._index >= (int)this._collectionView.Count) {
        return false;
      }
      return true;
    }
    public void Reset() {
      this._index = -1;
    }
    public CollectionViewEnumerator(CollectionView c) {
      this._collectionView = c;
      this._index = -1;
    }
    private CollectionView _collectionView;
    private int _index;
  }

  public System.Collections.IEnumerator GetEnumerator() {
    return new CollectionViewEnumerator(this);
  }

  internal CollectionView() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    registerExtend = false;
    return NoesisGUI_PINVOKE.new_CollectionView();
  }

  public object GetItemAt(uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.CollectionView_GetItemAt(swigCPtr, index);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  public int IndexOf(object item) {
    int ret = NoesisGUI_PINVOKE.CollectionView_IndexOf(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Contains(object item) {
    bool ret = NoesisGUI_PINVOKE.CollectionView_Contains(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MoveCurrentTo(object item) {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentTo(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MoveCurrentToFirst() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToFirst(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MoveCurrentToLast() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToLast(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MoveCurrentToNext() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToNext(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MoveCurrentToPosition(int position) {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToPosition(swigCPtr, position);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MoveCurrentToPrevious() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToPrevious(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Refresh() {
    NoesisGUI_PINVOKE.CollectionView_Refresh(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
  }

  public uint Count {
    get {
      uint ret = NoesisGUI_PINVOKE.CollectionView_Count_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool CanFilter {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_CanFilter_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool CanGroup {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_CanGroup_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool CanSort {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_CanSort_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public object CurrentItem {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CollectionView_CurrentItem_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public int CurrentPosition {
    get {
      int ret = NoesisGUI_PINVOKE.CollectionView_CurrentPosition_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsCurrentAfterLast {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_IsCurrentAfterLast_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsCurrentBeforeFirst {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_IsCurrentBeforeFirst_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool IsEmpty {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_IsEmpty_get(swigCPtr);
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private static IntPtr CreateCollectionView(object collection) {
    IntPtr ret = NoesisGUI_PINVOKE.CollectionView_CreateCollectionView(Noesis.Extend.GetInstanceHandle(collection));
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private object GetSourceCollectionHelper() {
    IntPtr cPtr = NoesisGUI_PINVOKE.CollectionView_GetSourceCollectionHelper(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.CollectionView_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

