//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Projection : Animatable {
  internal new static Projection CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Projection(cPtr, cMemoryOwn);
  }

  internal Projection(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Projection obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Projection() {
  }

  public virtual bool IsIdentity() {
    bool ret = NoesisGUI_PINVOKE.Projection_IsIdentity(swigCPtr);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Matrix4 GetProjection(Size surface, Size size) {
    IntPtr ret = NoesisGUI_PINVOKE.Projection_GetProjection(swigCPtr, ref surface, ref size);
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Matrix4>(ret);
    }
    else {
      return new Matrix4();
    }
  }

  public static Projection Identity {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Projection_Identity_get();
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      return (Projection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Projection_GetStaticType();
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

